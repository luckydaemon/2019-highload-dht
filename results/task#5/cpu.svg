<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (1,034 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (7 samples, 0.68%)</title><rect x="10.0" y="931.0" width="8.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.19%)</title><rect x="10.0" y="915.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.19%)</title><rect x="10.0" y="899.0" width="2.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.19%)</title><rect x="10.0" y="883.0" width="2.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (2 samples, 0.19%)</title><rect x="10.0" y="867.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (1 samples, 0.10%)</title><rect x="10.0" y="851.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.10%)</title><rect x="11.1" y="851.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.1" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.10%)</title><rect x="11.1" y="835.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="14.1" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.10%)</title><rect x="11.1" y="819.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.1" y="830.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.10%)</title><rect x="11.1" y="803.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="14.1" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="11.1" y="787.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="14.1" y="798.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.10%)</title><rect x="11.1" y="771.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.1" y="782.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (1 samples, 0.10%)</title><rect x="11.1" y="755.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="14.1" y="766.0"></text>
</g>
<g>
<title>G1Analytics::predict_card_num(unsigned long, bool) const (1 samples, 0.10%)</title><rect x="11.1" y="739.0" width="1.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="14.1" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.48%)</title><rect x="12.3" y="915.0" width="5.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="15.3" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.48%)</title><rect x="12.3" y="899.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="15.3" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.48%)</title><rect x="12.3" y="883.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="15.3" y="894.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (1 samples, 0.10%)</title><rect x="12.3" y="867.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="15.3" y="878.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (4 samples, 0.39%)</title><rect x="13.4" y="867.0" width="4.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="16.4" y="878.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.10%)</title><rect x="13.4" y="851.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="16.4" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (2 samples, 0.19%)</title><rect x="14.6" y="851.0" width="2.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="17.6" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.19%)</title><rect x="14.6" y="835.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="17.6" y="846.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire_region(HeapRegion*, unsigned long) (1 samples, 0.10%)</title><rect x="14.6" y="819.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="17.6" y="830.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="14.6" y="803.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="17.6" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="14.6" y="787.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="17.6" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="14.6" y="771.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="17.6" y="782.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.10%)</title><rect x="15.7" y="819.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="18.7" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.10%)</title><rect x="16.8" y="851.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.8" y="862.0"></text>
</g>
<g>
<title>G1ContiguousSpace::free() const (1 samples, 0.10%)</title><rect x="16.8" y="835.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="19.8" y="846.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="16.8" y="819.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="19.8" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="16.8" y="803.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="19.8" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="16.8" y="787.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="19.8" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="18.0" y="931.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="21.0" y="942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.10%)</title><rect x="18.0" y="915.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="21.0" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.10%)</title><rect x="18.0" y="899.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="21.0" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.10%)</title><rect x="18.0" y="883.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="21.0" y="894.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.10%)</title><rect x="18.0" y="867.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="21.0" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.10%)</title><rect x="18.0" y="851.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="21.0" y="862.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (1 samples, 0.10%)</title><rect x="18.0" y="835.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="21.0" y="846.0"></text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.10%)</title><rect x="19.1" y="931.0" width="1.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="22.1" y="942.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (1 samples, 0.10%)</title><rect x="19.1" y="915.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="22.1" y="926.0"></text>
</g>
<g>
<title>[unknown_Java] (6 samples, 0.58%)</title><rect x="20.3" y="931.0" width="6.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="23.3" y="942.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.19%)</title><rect x="22.6" y="915.0" width="2.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="25.6" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.10%)</title><rect x="22.6" y="899.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="25.6" y="910.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.10%)</title><rect x="23.7" y="899.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="26.7" y="910.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.19%)</title><rect x="24.8" y="915.0" width="2.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="27.8" y="926.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.19%)</title><rect x="24.8" y="899.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="27.8" y="910.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.19%)</title><rect x="24.8" y="883.0" width="2.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="27.8" y="894.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned (1 samples, 0.10%)</title><rect x="27.1" y="931.0" width="1.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="30.1" y="942.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (1 samples, 0.10%)</title><rect x="28.3" y="931.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="31.3" y="942.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="28.3" y="915.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="31.3" y="926.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="28.3" y="899.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="31.3" y="910.0"></text>
</g>
<g>
<title>sys_futex (1 samples, 0.10%)</title><rect x="28.3" y="883.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="31.3" y="894.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.10%)</title><rect x="28.3" y="867.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="31.3" y="878.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.10%)</title><rect x="28.3" y="851.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="31.3" y="862.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.10%)</title><rect x="28.3" y="835.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="31.3" y="846.0"></text>
</g>
<g>
<title>get_futex_value_locked (1 samples, 0.10%)</title><rect x="28.3" y="819.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="31.3" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.10%)</title><rect x="29.4" y="931.0" width="1.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="32.4" y="942.0"></text>
</g>
<g>
<title>_int_malloc (1 samples, 0.10%)</title><rect x="30.5" y="931.0" width="1.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="33.5" y="942.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (932 samples, 90.14%)</title><rect x="31.7" y="931.0" width="1063.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="34.7" y="942.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 0.19%)</title><rect x="31.7" y="915.0" width="2.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="34.7" y="926.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (2 samples, 0.19%)</title><rect x="31.7" y="899.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.7" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (2 samples, 0.19%)</title><rect x="31.7" y="883.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="34.7" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (84 samples, 8.12%)</title><rect x="34.0" y="915.0" width="95.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="37.0" y="926.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (78 samples, 7.54%)</title><rect x="39.7" y="899.0" width="89.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="42.7" y="910.0">one/nio/ne..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.10%)</title><rect x="43.1" y="883.0" width="1.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="46.1" y="894.0"></text>
</g>
<g>
<title>[unknown] (71 samples, 6.87%)</title><rect x="44.2" y="883.0" width="81.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="47.2" y="894.0">[unknown]</text>
</g>
<g>
<title>__libc_disable_asynccancel (1 samples, 0.10%)</title><rect x="44.2" y="867.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="47.2" y="878.0"></text>
</g>
<g>
<title>epoll_wait (70 samples, 6.77%)</title><rect x="45.4" y="867.0" width="79.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="48.4" y="878.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (69 samples, 6.67%)</title><rect x="46.5" y="851.0" width="78.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="49.5" y="862.0">entry_SYS..</text>
</g>
<g>
<title>do_syscall_64 (69 samples, 6.67%)</title><rect x="46.5" y="835.0" width="78.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="49.5" y="846.0">do_syscal..</text>
</g>
<g>
<title>sys_epoll_wait (66 samples, 6.38%)</title><rect x="49.9" y="819.0" width="75.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="52.9" y="830.0">sys_epol..</text>
</g>
<g>
<title>__fdget (1 samples, 0.10%)</title><rect x="49.9" y="803.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="52.9" y="814.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.10%)</title><rect x="49.9" y="787.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="52.9" y="798.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.10%)</title><rect x="49.9" y="771.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="52.9" y="782.0"></text>
</g>
<g>
<title>ep_poll (63 samples, 6.09%)</title><rect x="51.1" y="803.0" width="71.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="54.1" y="814.0">ep_poll</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.17 (13 samples, 1.26%)</title><rect x="51.1" y="787.0" width="14.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="54.1" y="798.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (4 samples, 0.39%)</title><rect x="51.1" y="771.0" width="4.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="54.1" y="782.0"></text>
</g>
<g>
<title>ep_send_events_proc (9 samples, 0.87%)</title><rect x="55.6" y="771.0" width="10.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="58.6" y="782.0"></text>
</g>
<g>
<title>ep_item_poll.isra.10 (6 samples, 0.58%)</title><rect x="59.1" y="755.0" width="6.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="62.1" y="766.0"></text>
</g>
<g>
<title>sock_poll (3 samples, 0.29%)</title><rect x="62.5" y="739.0" width="3.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="65.5" y="750.0"></text>
</g>
<g>
<title>tcp_poll (1 samples, 0.10%)</title><rect x="64.8" y="723.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="67.8" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (50 samples, 4.84%)</title><rect x="65.9" y="787.0" width="57.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="68.9" y="798.0">schedu..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (50 samples, 4.84%)</title><rect x="65.9" y="771.0" width="57.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="68.9" y="782.0">schedu..</text>
</g>
<g>
<title>schedule (50 samples, 4.84%)</title><rect x="65.9" y="755.0" width="57.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="68.9" y="766.0">schedule</text>
</g>
<g>
<title>__schedule (49 samples, 4.74%)</title><rect x="67.1" y="739.0" width="55.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="70.1" y="750.0">__sch..</text>
</g>
<g>
<title>finish_task_switch (49 samples, 4.74%)</title><rect x="67.1" y="723.0" width="55.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="70.1" y="734.0">finis..</text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.10%)</title><rect x="121.8" y="707.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="124.8" y="718.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.10%)</title><rect x="121.8" y="691.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="124.8" y="702.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.10%)</title><rect x="121.8" y="675.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="124.8" y="686.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.10%)</title><rect x="121.8" y="659.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="124.8" y="670.0"></text>
</g>
<g>
<title>run_timer_softirq (1 samples, 0.10%)</title><rect x="121.8" y="643.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="124.8" y="654.0"></text>
</g>
<g>
<title>call_timer_fn (1 samples, 0.10%)</title><rect x="121.8" y="627.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="124.8" y="638.0"></text>
</g>
<g>
<title>tcp_delack_timer (1 samples, 0.10%)</title><rect x="121.8" y="611.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="124.8" y="622.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.10%)</title><rect x="121.8" y="595.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="124.8" y="606.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.17 (1 samples, 0.10%)</title><rect x="123.0" y="803.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="126.0" y="814.0"></text>
</g>
<g>
<title>fput (1 samples, 0.10%)</title><rect x="124.1" y="803.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="127.1" y="814.0"></text>
</g>
<g>
<title>_init (2 samples, 0.19%)</title><rect x="125.3" y="883.0" width="2.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="128.3" y="894.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.10%)</title><rect x="127.5" y="883.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="130.5" y="894.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (1 samples, 0.10%)</title><rect x="127.5" y="867.0" width="1.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="130.5" y="878.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="128.7" y="899.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="131.7" y="910.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="128.7" y="883.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="131.7" y="894.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="128.7" y="867.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="131.7" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (846 samples, 81.82%)</title><rect x="129.8" y="915.0" width="965.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.8" y="926.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (845 samples, 81.72%)</title><rect x="129.8" y="899.0" width="964.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="132.8" y="910.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleSocketClosed (1 samples, 0.10%)</title><rect x="129.8" y="883.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="132.8" y="894.0"></text>
</g>
<g>
<title>one/nio/net/Session.scheduleClose (1 samples, 0.10%)</title><rect x="129.8" y="867.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="132.8" y="878.0"></text>
</g>
<g>
<title>one/nio/net/Session.close (1 samples, 0.10%)</title><rect x="129.8" y="851.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="132.8" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.close (1 samples, 0.10%)</title><rect x="129.8" y="835.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="132.8" y="846.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="129.8" y="819.0" width="1.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="132.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.10%)</title><rect x="129.8" y="803.0" width="1.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="132.8" y="814.0"></text>
</g>
<g>
<title>__GI___shutdown (1 samples, 0.10%)</title><rect x="129.8" y="787.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="132.8" y="798.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.10%)</title><rect x="129.8" y="771.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="132.8" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.10%)</title><rect x="129.8" y="755.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="132.8" y="766.0"></text>
</g>
<g>
<title>sys_shutdown (1 samples, 0.10%)</title><rect x="129.8" y="739.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="132.8" y="750.0"></text>
</g>
<g>
<title>inet_shutdown (1 samples, 0.10%)</title><rect x="129.8" y="723.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="132.8" y="734.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.10%)</title><rect x="129.8" y="707.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="132.8" y="718.0"></text>
</g>
<g>
<title>__release_sock (1 samples, 0.10%)</title><rect x="129.8" y="691.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="132.8" y="702.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (1 samples, 0.10%)</title><rect x="129.8" y="675.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="132.8" y="686.0"></text>
</g>
<g>
<title>sched_clock_cpu (1 samples, 0.10%)</title><rect x="129.8" y="659.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="132.8" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (805 samples, 77.85%)</title><rect x="131.0" y="883.0" width="918.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="134.0" y="894.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (785 samples, 75.92%)</title><rect x="135.5" y="867.0" width="895.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="138.5" y="878.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (784 samples, 75.82%)</title><rect x="135.5" y="851.0" width="894.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="138.5" y="862.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>one/nio/http/PathMapper.find (5 samples, 0.48%)</title><rect x="135.5" y="835.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="138.5" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (5 samples, 0.48%)</title><rect x="135.5" y="819.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="138.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.19%)</title><rect x="135.5" y="803.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="138.5" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 0.29%)</title><rect x="137.8" y="803.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="140.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.29%)</title><rect x="137.8" y="787.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="140.8" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 0.29%)</title><rect x="137.8" y="771.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="140.8" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="139.0" y="755.0" width="1.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="142.0" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="140.1" y="755.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="143.1" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="140.1" y="739.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="143.1" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="140.1" y="723.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="143.1" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/ServiceImpl.handleDefault (779 samples, 75.34%)</title><rect x="141.2" y="835.0" width="889.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="144.2" y="846.0">ru/mail/polis/service/luckydaemon/ServiceImpl.handleDefault</text>
</g>
<g>
<title>java/lang/String.equals (2 samples, 0.19%)</title><rect x="141.2" y="819.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="144.2" y="830.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="142.4" y="803.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="145.4" y="814.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="142.4" y="787.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="145.4" y="798.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="142.4" y="771.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="145.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (10 samples, 0.97%)</title><rect x="143.5" y="819.0" width="11.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.5" y="830.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.39%)</title><rect x="148.1" y="803.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="151.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.39%)</title><rect x="148.1" y="787.0" width="4.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="151.1" y="798.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.29%)</title><rect x="149.2" y="771.0" width="3.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="152.2" y="782.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.10%)</title><rect x="152.6" y="803.0" width="1.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="155.6" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="153.8" y="803.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="156.8" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/ServiceImpl.entity (767 samples, 74.18%)</title><rect x="154.9" y="819.0" width="875.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="157.9" y="830.0">ru/mail/polis/service/luckydaemon/ServiceImpl.entity</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.10%)</title><rect x="156.1" y="803.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="159.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.10%)</title><rect x="156.1" y="787.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="159.1" y="798.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.10%)</title><rect x="156.1" y="771.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="159.1" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.10%)</title><rect x="156.1" y="755.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="159.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.29%)</title><rect x="157.2" y="803.0" width="3.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="160.2" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.10%)</title><rect x="158.4" y="787.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="161.4" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.10%)</title><rect x="158.4" y="771.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="161.4" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="159.5" y="787.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="162.5" y="798.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="159.5" y="771.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="162.5" y="782.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="159.5" y="755.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="162.5" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.10%)</title><rect x="160.6" y="803.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.10%)</title><rect x="160.6" y="787.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="163.6" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.10%)</title><rect x="160.6" y="771.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.6" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/ClustersNodes.getNodes (9 samples, 0.87%)</title><rect x="161.8" y="803.0" width="10.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="164.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (9 samples, 0.87%)</title><rect x="161.8" y="787.0" width="10.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="164.8" y="798.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (9 samples, 0.87%)</title><rect x="161.8" y="771.0" width="10.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="164.8" y="782.0"></text>
</g>
<g>
<title>java/util/HashSet.add (9 samples, 0.87%)</title><rect x="161.8" y="755.0" width="10.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="164.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.put (7 samples, 0.68%)</title><rect x="164.1" y="739.0" width="8.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="167.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (7 samples, 0.68%)</title><rect x="164.1" y="723.0" width="8.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="167.1" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (1 samples, 0.10%)</title><rect x="166.3" y="707.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="169.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (1 samples, 0.10%)</title><rect x="167.5" y="707.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="170.5" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (1 samples, 0.10%)</title><rect x="168.6" y="707.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="171.6" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="168.6" y="691.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="171.6" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="168.6" y="675.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="171.6" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="168.6" y="659.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="171.6" y="670.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.19%)</title><rect x="169.8" y="707.0" width="2.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="172.8" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/ClustersNodes.getReplics (3 samples, 0.29%)</title><rect x="172.1" y="803.0" width="3.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="175.1" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (2 samples, 0.19%)</title><rect x="173.2" y="787.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="176.2" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.coordinateRequest (2 samples, 0.19%)</title><rect x="173.2" y="771.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="176.2" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.coordinateRequest (749 samples, 72.44%)</title><rect x="175.5" y="803.0" width="854.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="178.5" y="814.0">ru/mail/polis/service/luckydaemon/RequestCoordinators.coordinateRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (239 samples, 23.11%)</title><rect x="175.5" y="787.0" width="272.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="178.5" y="798.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.19%)</title><rect x="176.6" y="771.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="179.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.19%)</title><rect x="176.6" y="755.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="179.6" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.19%)</title><rect x="176.6" y="739.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="179.6" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (235 samples, 22.73%)</title><rect x="178.9" y="771.0" width="268.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="181.9" y="782.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (5 samples, 0.48%)</title><rect x="180.0" y="755.0" width="5.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="183.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.29%)</title><rect x="181.2" y="739.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="184.2" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.29%)</title><rect x="181.2" y="723.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="184.2" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.29%)</title><rect x="181.2" y="707.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="184.2" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="183.5" y="691.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="186.5" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="183.5" y="675.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="186.5" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="183.5" y="659.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="186.5" y="670.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="184.6" y="739.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="187.6" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="184.6" y="723.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="187.6" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="184.6" y="707.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="187.6" y="718.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (229 samples, 22.15%)</title><rect x="185.7" y="755.0" width="261.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="188.7" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (229 samples, 22.15%)</title><rect x="185.7" y="739.0" width="261.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.7" y="750.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (229 samples, 22.15%)</title><rect x="185.7" y="723.0" width="261.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="188.7" y="734.0">one/nio/net/Session$ArrayQueueItem...</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.10%)</title><rect x="185.7" y="707.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="188.7" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (228 samples, 22.05%)</title><rect x="186.9" y="707.0" width="260.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="189.9" y="718.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>[unknown] (7 samples, 0.68%)</title><rect x="189.2" y="691.0" width="8.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="192.2" y="702.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.68%)</title><rect x="189.2" y="675.0" width="8.0" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="192.2" y="686.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (5 samples, 0.48%)</title><rect x="189.2" y="659.0" width="5.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="192.2" y="670.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (2 samples, 0.19%)</title><rect x="189.2" y="643.0" width="2.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="192.2" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="190.3" y="627.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="193.3" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="190.3" y="611.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="193.3" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="190.3" y="595.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="193.3" y="606.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.29%)</title><rect x="191.5" y="643.0" width="3.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="194.5" y="654.0"></text>
</g>
<g>
<title>JavaThread::is_Java_thread() const (1 samples, 0.10%)</title><rect x="191.5" y="627.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="194.5" y="638.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.10%)</title><rect x="192.6" y="627.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="195.6" y="638.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.10%)</title><rect x="193.7" y="627.0" width="1.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="196.7" y="638.0"></text>
</g>
<g>
<title>__send (2 samples, 0.19%)</title><rect x="194.9" y="659.0" width="2.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="197.9" y="670.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.10%)</title><rect x="197.2" y="691.0" width="1.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="200.2" y="702.0"></text>
</g>
<g>
<title>__send (218 samples, 21.08%)</title><rect x="198.3" y="691.0" width="248.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="201.3" y="702.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (213 samples, 20.60%)</title><rect x="202.9" y="675.0" width="243.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="205.9" y="686.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>do_syscall_64 (213 samples, 20.60%)</title><rect x="202.9" y="659.0" width="243.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="205.9" y="670.0">do_syscall_64</text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="207.4" y="643.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="210.4" y="654.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.10%)</title><rect x="207.4" y="627.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="210.4" y="638.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.10%)</title><rect x="207.4" y="611.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="210.4" y="622.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.10%)</title><rect x="207.4" y="595.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="210.4" y="606.0"></text>
</g>
<g>
<title>sys_sendto (208 samples, 20.12%)</title><rect x="208.6" y="643.0" width="237.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="211.6" y="654.0">sys_sendto</text>
</g>
<g>
<title>SYSC_sendto (207 samples, 20.02%)</title><rect x="208.6" y="627.0" width="236.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="211.6" y="638.0">SYSC_sendto</text>
</g>
<g>
<title>import_single_range (1 samples, 0.10%)</title><rect x="209.7" y="611.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="212.7" y="622.0"></text>
</g>
<g>
<title>sock_sendmsg (202 samples, 19.54%)</title><rect x="210.9" y="611.0" width="230.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="213.9" y="622.0">sock_sendmsg</text>
</g>
<g>
<title>inet_sendmsg (196 samples, 18.96%)</title><rect x="212.0" y="595.0" width="223.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="215.0" y="606.0">inet_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (195 samples, 18.86%)</title><rect x="213.1" y="579.0" width="222.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="216.1" y="590.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.10%)</title><rect x="214.3" y="563.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="217.3" y="574.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.10%)</title><rect x="215.4" y="563.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="218.4" y="574.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.10%)</title><rect x="215.4" y="547.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="218.4" y="558.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.10%)</title><rect x="216.6" y="563.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="219.6" y="574.0"></text>
</g>
<g>
<title>__release_sock (1 samples, 0.10%)</title><rect x="216.6" y="547.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="219.6" y="558.0"></text>
</g>
<g>
<title>_cond_resched (1 samples, 0.10%)</title><rect x="216.6" y="531.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="219.6" y="542.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.10%)</title><rect x="216.6" y="515.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="219.6" y="526.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.10%)</title><rect x="216.6" y="499.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="219.6" y="510.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (190 samples, 18.38%)</title><rect x="217.7" y="563.0" width="216.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="220.7" y="574.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (1 samples, 0.10%)</title><rect x="222.3" y="547.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="225.3" y="558.0"></text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.10%)</title><rect x="223.4" y="547.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="226.4" y="558.0"></text>
</g>
<g>
<title>copy_user_generic_string (1 samples, 0.10%)</title><rect x="223.4" y="531.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="226.4" y="542.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (5 samples, 0.48%)</title><rect x="224.5" y="547.0" width="5.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="227.5" y="558.0"></text>
</g>
<g>
<title>__alloc_skb (4 samples, 0.39%)</title><rect x="225.7" y="531.0" width="4.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="228.7" y="542.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.10%)</title><rect x="228.0" y="515.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="231.0" y="526.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (1 samples, 0.10%)</title><rect x="229.1" y="515.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="232.1" y="526.0"></text>
</g>
<g>
<title>skb_entail (2 samples, 0.19%)</title><rect x="230.3" y="547.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="233.3" y="558.0"></text>
</g>
<g>
<title>tcp_chrono_start (1 samples, 0.10%)</title><rect x="231.4" y="531.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="234.4" y="542.0"></text>
</g>
<g>
<title>tcp_push (174 samples, 16.83%)</title><rect x="232.5" y="547.0" width="198.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="235.5" y="558.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (173 samples, 16.73%)</title><rect x="232.5" y="531.0" width="197.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="235.5" y="542.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>tcp_write_xmit (173 samples, 16.73%)</title><rect x="232.5" y="515.0" width="197.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="235.5" y="526.0">tcp_write_xmit</text>
</g>
<g>
<title>sched_clock_cpu (1 samples, 0.10%)</title><rect x="234.8" y="499.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="237.8" y="510.0"></text>
</g>
<g>
<title>sched_clock (1 samples, 0.10%)</title><rect x="234.8" y="483.0" width="1.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="237.8" y="494.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (1 samples, 0.10%)</title><rect x="234.8" y="467.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="237.8" y="478.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (1 samples, 0.10%)</title><rect x="234.8" y="451.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="237.8" y="462.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (2 samples, 0.19%)</title><rect x="236.0" y="499.0" width="2.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="239.0" y="510.0"></text>
</g>
<g>
<title>tcp_transmit_skb (167 samples, 16.15%)</title><rect x="238.2" y="499.0" width="190.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="241.2" y="510.0">tcp_transmit_skb</text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.19%)</title><rect x="240.5" y="483.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="243.5" y="494.0"></text>
</g>
<g>
<title>__skb_clone (1 samples, 0.10%)</title><rect x="242.8" y="483.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="245.8" y="494.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.10%)</title><rect x="243.9" y="483.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="246.9" y="494.0"></text>
</g>
<g>
<title>ip_copy_addrs (1 samples, 0.10%)</title><rect x="245.1" y="483.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="248.1" y="494.0"></text>
</g>
<g>
<title>ip_queue_xmit (157 samples, 15.18%)</title><rect x="246.2" y="483.0" width="179.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="249.2" y="494.0">ip_queue_xmit</text>
</g>
<g>
<title>__indirect_thunk_start (1 samples, 0.10%)</title><rect x="246.2" y="467.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="249.2" y="478.0"></text>
</g>
<g>
<title>ip_local_out (156 samples, 15.09%)</title><rect x="247.4" y="467.0" width="178.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="250.4" y="478.0">ip_local_out</text>
</g>
<g>
<title>ip_output (156 samples, 15.09%)</title><rect x="247.4" y="451.0" width="178.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="250.4" y="462.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (154 samples, 14.89%)</title><rect x="249.7" y="435.0" width="175.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="252.7" y="446.0">ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (151 samples, 14.60%)</title><rect x="253.1" y="419.0" width="172.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="256.1" y="430.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (138 samples, 13.35%)</title><rect x="254.2" y="403.0" width="157.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="257.2" y="414.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.17 (137 samples, 13.25%)</title><rect x="255.4" y="387.0" width="156.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="258.4" y="398.0">do_softirq.part.17</text>
</g>
<g>
<title>do_softirq_own_stack (136 samples, 13.15%)</title><rect x="256.5" y="371.0" width="155.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="259.5" y="382.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (136 samples, 13.15%)</title><rect x="256.5" y="355.0" width="155.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="259.5" y="366.0">__softirqentry_text_..</text>
</g>
<g>
<title>net_rx_action (135 samples, 13.06%)</title><rect x="257.6" y="339.0" width="154.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="260.6" y="350.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (133 samples, 12.86%)</title><rect x="259.9" y="323.0" width="151.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="262.9" y="334.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (133 samples, 12.86%)</title><rect x="259.9" y="307.0" width="151.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="262.9" y="318.0">__netif_receive_skb</text>
</g>
<g>
<title>__netif_receive_skb_core (133 samples, 12.86%)</title><rect x="259.9" y="291.0" width="151.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="262.9" y="302.0">__netif_receive_skb..</text>
</g>
<g>
<title>ip_rcv (130 samples, 12.57%)</title><rect x="263.3" y="275.0" width="148.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="266.3" y="286.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (129 samples, 12.48%)</title><rect x="264.5" y="259.0" width="147.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="267.5" y="270.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (129 samples, 12.48%)</title><rect x="264.5" y="243.0" width="147.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="267.5" y="254.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (128 samples, 12.38%)</title><rect x="264.5" y="227.0" width="146.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="267.5" y="238.0">ip_local_deliver_f..</text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.10%)</title><rect x="266.8" y="211.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="269.8" y="222.0"></text>
</g>
<g>
<title>tcp_v4_rcv (125 samples, 12.09%)</title><rect x="267.9" y="211.0" width="142.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="270.9" y="222.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (5 samples, 0.48%)</title><rect x="270.2" y="195.0" width="5.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="273.2" y="206.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.10%)</title><rect x="274.8" y="179.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="277.8" y="190.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.10%)</title><rect x="275.9" y="195.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="278.9" y="206.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.10%)</title><rect x="277.0" y="195.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="280.0" y="206.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (116 samples, 11.22%)</title><rect x="278.2" y="195.0" width="132.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="281.2" y="206.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_ack (1 samples, 0.10%)</title><rect x="278.2" y="179.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="281.2" y="190.0"></text>
</g>
<g>
<title>tcp_rcv_established (115 samples, 11.12%)</title><rect x="279.3" y="179.0" width="131.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="282.3" y="190.0">tcp_rcv_establis..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.10%)</title><rect x="279.3" y="163.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="282.3" y="174.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.10%)</title><rect x="279.3" y="147.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="282.3" y="158.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.10%)</title><rect x="279.3" y="131.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="282.3" y="142.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.10%)</title><rect x="279.3" y="115.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="282.3" y="126.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.10%)</title><rect x="279.3" y="99.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="282.3" y="110.0"></text>
</g>
<g>
<title>tcp_ack (13 samples, 1.26%)</title><rect x="280.5" y="163.0" width="14.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="283.5" y="174.0"></text>
</g>
<g>
<title>__kfree_skb (2 samples, 0.19%)</title><rect x="282.7" y="147.0" width="2.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="285.7" y="158.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.19%)</title><rect x="285.0" y="147.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="288.0" y="158.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (7 samples, 0.68%)</title><rect x="287.3" y="147.0" width="8.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="290.3" y="158.0"></text>
</g>
<g>
<title>__kfree_skb (3 samples, 0.29%)</title><rect x="289.6" y="131.0" width="3.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="292.6" y="142.0"></text>
</g>
<g>
<title>skb_release_all (3 samples, 0.29%)</title><rect x="289.6" y="115.0" width="3.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="292.6" y="126.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.19%)</title><rect x="290.7" y="99.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="293.7" y="110.0"></text>
</g>
<g>
<title>skb_free_head (2 samples, 0.19%)</title><rect x="290.7" y="83.0" width="2.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="293.7" y="94.0"></text>
</g>
<g>
<title>kfree (2 samples, 0.19%)</title><rect x="290.7" y="67.0" width="2.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="293.7" y="78.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.10%)</title><rect x="290.7" y="51.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="293.7" y="62.0"></text>
</g>
<g>
<title>cmpxchg_double_slab.isra.61 (1 samples, 0.10%)</title><rect x="290.7" y="35.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="293.7" y="46.0"></text>
</g>
<g>
<title>cmpxchg_double_slab.isra.61 (1 samples, 0.10%)</title><rect x="291.9" y="51.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="294.9" y="62.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.10%)</title><rect x="293.0" y="131.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="296.0" y="142.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.33 (1 samples, 0.10%)</title><rect x="294.2" y="131.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="297.2" y="142.0"></text>
</g>
<g>
<title>minmax_running_min (1 samples, 0.10%)</title><rect x="294.2" y="115.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="297.2" y="126.0"></text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.10%)</title><rect x="295.3" y="163.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="298.3" y="174.0"></text>
</g>
<g>
<title>tcp_data_queue (97 samples, 9.38%)</title><rect x="296.4" y="163.0" width="110.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="299.4" y="174.0">tcp_data_queue</text>
</g>
<g>
<title>__wake_up_sync_key (1 samples, 0.10%)</title><rect x="301.0" y="147.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="304.0" y="158.0"></text>
</g>
<g>
<title>sock_def_readable (88 samples, 8.51%)</title><rect x="302.1" y="147.0" width="100.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="305.1" y="158.0">sock_def_rea..</text>
</g>
<g>
<title>__wake_up_sync_key (85 samples, 8.22%)</title><rect x="305.6" y="131.0" width="97.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="308.6" y="142.0">__wake_up_s..</text>
</g>
<g>
<title>__wake_up_common_lock (85 samples, 8.22%)</title><rect x="305.6" y="115.0" width="97.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="308.6" y="126.0">__wake_up_c..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (85 samples, 8.22%)</title><rect x="305.6" y="99.0" width="97.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="308.6" y="110.0">_raw_spin_u..</text>
</g>
<g>
<title>tcp_event_data_recv (3 samples, 0.29%)</title><rect x="402.6" y="147.0" width="3.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="405.6" y="158.0"></text>
</g>
<g>
<title>tcp_queue_rcv (1 samples, 0.10%)</title><rect x="406.0" y="147.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="409.0" y="158.0"></text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.10%)</title><rect x="407.1" y="163.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="410.1" y="174.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (1 samples, 0.10%)</title><rect x="408.3" y="163.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="411.3" y="174.0"></text>
</g>
<g>
<title>tcp_rate_gen (1 samples, 0.10%)</title><rect x="409.4" y="163.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="412.4" y="174.0"></text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.10%)</title><rect x="410.6" y="227.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="413.6" y="238.0"></text>
</g>
<g>
<title>dev_queue_xmit (12 samples, 1.16%)</title><rect x="411.7" y="403.0" width="13.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="414.7" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (12 samples, 1.16%)</title><rect x="411.7" y="387.0" width="13.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="414.7" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (7 samples, 0.68%)</title><rect x="414.0" y="371.0" width="8.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="417.0" y="382.0"></text>
</g>
<g>
<title>eth_type_trans (1 samples, 0.10%)</title><rect x="414.0" y="355.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="417.0" y="366.0"></text>
</g>
<g>
<title>loopback_xmit (6 samples, 0.58%)</title><rect x="415.1" y="355.0" width="6.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="418.1" y="366.0"></text>
</g>
<g>
<title>eth_type_trans (1 samples, 0.10%)</title><rect x="417.4" y="339.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="420.4" y="350.0"></text>
</g>
<g>
<title>netif_rx (2 samples, 0.19%)</title><rect x="418.5" y="339.0" width="2.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="421.5" y="350.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.10%)</title><rect x="418.5" y="323.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="421.5" y="334.0"></text>
</g>
<g>
<title>netif_rx_internal (1 samples, 0.10%)</title><rect x="419.7" y="323.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="422.7" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.10%)</title><rect x="419.7" y="307.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="422.7" y="318.0"></text>
</g>
<g>
<title>sk_free (1 samples, 0.10%)</title><rect x="420.8" y="339.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="423.8" y="350.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (1 samples, 0.10%)</title><rect x="422.0" y="371.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="425.0" y="382.0"></text>
</g>
<g>
<title>validate_xmit_skb (2 samples, 0.19%)</title><rect x="423.1" y="371.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="426.1" y="382.0"></text>
</g>
<g>
<title>netif_skb_features (1 samples, 0.10%)</title><rect x="423.1" y="355.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="426.1" y="366.0"></text>
</g>
<g>
<title>skb_network_protocol (1 samples, 0.10%)</title><rect x="423.1" y="339.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="426.1" y="350.0"></text>
</g>
<g>
<title>skb_network_protocol (1 samples, 0.10%)</title><rect x="424.3" y="355.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="427.3" y="366.0"></text>
</g>
<g>
<title>skb_clone (2 samples, 0.19%)</title><rect x="425.4" y="483.0" width="2.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="428.4" y="494.0"></text>
</g>
<g>
<title>__copy_skb_header (1 samples, 0.10%)</title><rect x="425.4" y="467.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="428.4" y="478.0"></text>
</g>
<g>
<title>__skb_clone (1 samples, 0.10%)</title><rect x="426.5" y="467.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="429.5" y="478.0"></text>
</g>
<g>
<title>tcp_options_write (1 samples, 0.10%)</title><rect x="427.7" y="483.0" width="1.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="430.7" y="494.0"></text>
</g>
<g>
<title>tcp_tso_segs (1 samples, 0.10%)</title><rect x="428.8" y="499.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="431.8" y="510.0"></text>
</g>
<g>
<title>tcp_write_xmit (1 samples, 0.10%)</title><rect x="430.0" y="531.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="433.0" y="542.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.10%)</title><rect x="431.1" y="547.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="434.1" y="558.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.10%)</title><rect x="431.1" y="531.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="434.1" y="542.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.19%)</title><rect x="432.2" y="547.0" width="2.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="435.2" y="558.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.10%)</title><rect x="434.5" y="563.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="437.5" y="574.0"></text>
</g>
<g>
<title>security_socket_sendmsg (4 samples, 0.39%)</title><rect x="435.7" y="595.0" width="4.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="438.7" y="606.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (4 samples, 0.39%)</title><rect x="435.7" y="579.0" width="4.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="438.7" y="590.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (4 samples, 0.39%)</title><rect x="435.7" y="563.0" width="4.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="438.7" y="574.0"></text>
</g>
<g>
<title>aa_sk_perm (3 samples, 0.29%)</title><rect x="436.8" y="547.0" width="3.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="439.8" y="558.0"></text>
</g>
<g>
<title>aa_label_sk_perm (2 samples, 0.19%)</title><rect x="437.9" y="531.0" width="2.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="440.9" y="542.0"></text>
</g>
<g>
<title>tcp_sendmsg (1 samples, 0.10%)</title><rect x="440.2" y="595.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="443.2" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.29%)</title><rect x="441.4" y="611.0" width="3.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="444.4" y="622.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.10%)</title><rect x="441.4" y="595.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="444.4" y="606.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.10%)</title><rect x="441.4" y="579.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="444.4" y="590.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.10%)</title><rect x="441.4" y="563.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="444.4" y="574.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.19%)</title><rect x="442.5" y="595.0" width="2.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="445.5" y="606.0"></text>
</g>
<g>
<title>sock_sendmsg (1 samples, 0.10%)</title><rect x="444.8" y="627.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="447.8" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="445.9" y="675.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="448.9" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="445.9" y="659.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="448.9" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="445.9" y="643.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="448.9" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.10%)</title><rect x="447.1" y="771.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="450.1" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.10%)</title><rect x="447.1" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="450.1" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.10%)</title><rect x="447.1" y="739.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="450.1" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.10%)</title><rect x="447.1" y="723.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="450.1" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.10%)</title><rect x="447.1" y="707.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="450.1" y="718.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.10%)</title><rect x="447.1" y="691.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="450.1" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.getRequestCoordinate (509 samples, 49.23%)</title><rect x="448.2" y="787.0" width="580.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="451.2" y="798.0">ru/mail/polis/service/luckydaemon/RequestCoordinators.getRequestCoordinate</text>
</g>
<g>
<title>java/lang/String.equals (5 samples, 0.48%)</title><rect x="449.4" y="771.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="452.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (2 samples, 0.19%)</title><rect x="450.5" y="755.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="453.5" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="451.6" y="739.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="454.6" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="451.6" y="723.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="454.6" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="451.6" y="707.0" width="1.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="454.6" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.10%)</title><rect x="452.8" y="755.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="455.8" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="453.9" y="755.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="456.9" y="766.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="453.9" y="739.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="456.9" y="750.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="453.9" y="723.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="456.9" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.10%)</title><rect x="455.1" y="771.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="458.1" y="782.0"></text>
</g>
<g>
<title>java/util/AbstractList.&lt;init&gt; (1 samples, 0.10%)</title><rect x="455.1" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="458.1" y="766.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.&lt;init&gt; (1 samples, 0.10%)</title><rect x="455.1" y="739.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="458.1" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.10%)</title><rect x="456.2" y="771.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="459.2" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.10%)</title><rect x="456.2" y="755.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="459.2" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.10%)</title><rect x="456.2" y="739.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="459.2" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.10%)</title><rect x="456.2" y="723.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="459.2" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (1 samples, 0.10%)</title><rect x="456.2" y="707.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="459.2" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.get (281 samples, 27.18%)</title><rect x="457.4" y="771.0" width="320.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="460.4" y="782.0">one/nio/http/HttpClient.get</text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (2 samples, 0.19%)</title><rect x="457.4" y="755.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="460.4" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="458.5" y="739.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="461.5" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="458.5" y="723.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="461.5" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="458.5" y="707.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="461.5" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (279 samples, 26.98%)</title><rect x="459.6" y="755.0" width="318.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="462.6" y="766.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (279 samples, 26.98%)</title><rect x="459.6" y="739.0" width="318.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="462.6" y="750.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.29%)</title><rect x="461.9" y="723.0" width="3.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="464.9" y="734.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.29%)</title><rect x="461.9" y="707.0" width="3.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="464.9" y="718.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.10%)</title><rect x="461.9" y="691.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="464.9" y="702.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.10%)</title><rect x="463.1" y="691.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="466.1" y="702.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.10%)</title><rect x="463.1" y="675.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="466.1" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.10%)</title><rect x="464.2" y="691.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="467.2" y="702.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.10%)</title><rect x="464.2" y="675.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="467.2" y="686.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (1 samples, 0.10%)</title><rect x="464.2" y="659.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="467.2" y="670.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (1 samples, 0.10%)</title><rect x="464.2" y="643.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="467.2" y="654.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (1 samples, 0.10%)</title><rect x="464.2" y="627.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="467.2" y="638.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (36 samples, 3.48%)</title><rect x="465.3" y="723.0" width="41.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="468.3" y="734.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (35 samples, 3.38%)</title><rect x="465.3" y="707.0" width="40.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="468.3" y="718.0">one..</text>
</g>
<g>
<title>[unknown] (9 samples, 0.87%)</title><rect x="465.3" y="691.0" width="10.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="468.3" y="702.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.87%)</title><rect x="465.3" y="675.0" width="10.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="468.3" y="686.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (8 samples, 0.77%)</title><rect x="465.3" y="659.0" width="9.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="468.3" y="670.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.58%)</title><rect x="467.6" y="643.0" width="6.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="470.6" y="654.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.19%)</title><rect x="469.9" y="627.0" width="2.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="472.9" y="638.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.19%)</title><rect x="472.2" y="627.0" width="2.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="475.2" y="638.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.10%)</title><rect x="474.5" y="659.0" width="1.1" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="477.5" y="670.0"></text>
</g>
<g>
<title>recv (26 samples, 2.51%)</title><rect x="475.6" y="691.0" width="29.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="478.6" y="702.0">recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (24 samples, 2.32%)</title><rect x="477.9" y="675.0" width="27.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="480.9" y="686.0">e..</text>
</g>
<g>
<title>do_syscall_64 (24 samples, 2.32%)</title><rect x="477.9" y="659.0" width="27.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="480.9" y="670.0">d..</text>
</g>
<g>
<title>sys_recvfrom (19 samples, 1.84%)</title><rect x="483.6" y="643.0" width="21.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="486.6" y="654.0">s..</text>
</g>
<g>
<title>SYSC_recvfrom (19 samples, 1.84%)</title><rect x="483.6" y="627.0" width="21.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="486.6" y="638.0">S..</text>
</g>
<g>
<title>__fdget (1 samples, 0.10%)</title><rect x="483.6" y="611.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="486.6" y="622.0"></text>
</g>
<g>
<title>fput (1 samples, 0.10%)</title><rect x="484.7" y="611.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="487.7" y="622.0"></text>
</g>
<g>
<title>sock_recvmsg (17 samples, 1.64%)</title><rect x="485.9" y="611.0" width="19.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="488.9" y="622.0"></text>
</g>
<g>
<title>inet_recvmsg (16 samples, 1.55%)</title><rect x="485.9" y="595.0" width="18.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="488.9" y="606.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.10%)</title><rect x="485.9" y="579.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="488.9" y="590.0"></text>
</g>
<g>
<title>tcp_recvmsg (15 samples, 1.45%)</title><rect x="487.0" y="579.0" width="17.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="490.0" y="590.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.10%)</title><rect x="488.2" y="563.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="491.2" y="574.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.10%)</title><rect x="488.2" y="547.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="491.2" y="558.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.10%)</title><rect x="489.3" y="563.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="492.3" y="574.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.10%)</title><rect x="489.3" y="547.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="492.3" y="558.0"></text>
</g>
<g>
<title>sk_wait_data (11 samples, 1.06%)</title><rect x="490.4" y="563.0" width="12.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="493.4" y="574.0"></text>
</g>
<g>
<title>add_wait_queue (2 samples, 0.19%)</title><rect x="490.4" y="547.0" width="2.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="493.4" y="558.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.19%)</title><rect x="490.4" y="531.0" width="2.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="493.4" y="542.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.10%)</title><rect x="492.7" y="547.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="495.7" y="558.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.10%)</title><rect x="492.7" y="531.0" width="1.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="495.7" y="542.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (1 samples, 0.10%)</title><rect x="492.7" y="515.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="495.7" y="526.0"></text>
</g>
<g>
<title>kvm_wait (1 samples, 0.10%)</title><rect x="492.7" y="499.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="495.7" y="510.0"></text>
</g>
<g>
<title>native_safe_halt (1 samples, 0.10%)</title><rect x="492.7" y="483.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="495.7" y="494.0"></text>
</g>
<g>
<title>wait_woken (8 samples, 0.77%)</title><rect x="493.9" y="547.0" width="9.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="496.9" y="558.0"></text>
</g>
<g>
<title>schedule_timeout (8 samples, 0.77%)</title><rect x="493.9" y="531.0" width="9.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="496.9" y="542.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.10%)</title><rect x="493.9" y="515.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="496.9" y="526.0"></text>
</g>
<g>
<title>del_timer_sync (1 samples, 0.10%)</title><rect x="495.0" y="515.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="498.0" y="526.0"></text>
</g>
<g>
<title>try_to_del_timer_sync (1 samples, 0.10%)</title><rect x="495.0" y="499.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="498.0" y="510.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.10%)</title><rect x="495.0" y="483.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="498.0" y="494.0"></text>
</g>
<g>
<title>schedule (6 samples, 0.58%)</title><rect x="496.2" y="515.0" width="6.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="499.2" y="526.0"></text>
</g>
<g>
<title>__schedule (6 samples, 0.58%)</title><rect x="496.2" y="499.0" width="6.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="499.2" y="510.0"></text>
</g>
<g>
<title>finish_task_switch (6 samples, 0.58%)</title><rect x="496.2" y="483.0" width="6.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="499.2" y="494.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.10%)</title><rect x="503.0" y="563.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="506.0" y="574.0"></text>
</g>
<g>
<title>tcp_send_ack (1 samples, 0.10%)</title><rect x="503.0" y="547.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="506.0" y="558.0"></text>
</g>
<g>
<title>tcp_send_ack.part.39 (1 samples, 0.10%)</title><rect x="503.0" y="531.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="506.0" y="542.0"></text>
</g>
<g>
<title>tcp_transmit_skb (1 samples, 0.10%)</title><rect x="503.0" y="515.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="506.0" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.10%)</title><rect x="503.0" y="499.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="506.0" y="510.0"></text>
</g>
<g>
<title>ip_local_out (1 samples, 0.10%)</title><rect x="503.0" y="483.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="506.0" y="494.0"></text>
</g>
<g>
<title>ip_output (1 samples, 0.10%)</title><rect x="503.0" y="467.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="506.0" y="478.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.10%)</title><rect x="503.0" y="451.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="506.0" y="462.0"></text>
</g>
<g>
<title>ip_finish_output2 (1 samples, 0.10%)</title><rect x="503.0" y="435.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="506.0" y="446.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.10%)</title><rect x="503.0" y="419.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="506.0" y="430.0"></text>
</g>
<g>
<title>do_softirq.part.17 (1 samples, 0.10%)</title><rect x="503.0" y="403.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="506.0" y="414.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.10%)</title><rect x="503.0" y="387.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="506.0" y="398.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.10%)</title><rect x="503.0" y="371.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="506.0" y="382.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.10%)</title><rect x="503.0" y="355.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="506.0" y="366.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.10%)</title><rect x="503.0" y="339.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="506.0" y="350.0"></text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.10%)</title><rect x="503.0" y="323.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="506.0" y="334.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (1 samples, 0.10%)</title><rect x="503.0" y="307.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="506.0" y="318.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.10%)</title><rect x="503.0" y="291.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="506.0" y="302.0"></text>
</g>
<g>
<title>ip_local_deliver (1 samples, 0.10%)</title><rect x="503.0" y="275.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="506.0" y="286.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.10%)</title><rect x="504.1" y="595.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="507.1" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="505.3" y="707.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="508.3" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="505.3" y="691.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="508.3" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="505.3" y="675.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="508.3" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (7 samples, 0.68%)</title><rect x="506.4" y="723.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="509.4" y="734.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.29%)</title><rect x="507.6" y="707.0" width="3.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="510.6" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (3 samples, 0.29%)</title><rect x="507.6" y="691.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="510.6" y="702.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.19%)</title><rect x="508.7" y="675.0" width="2.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="511.7" y="686.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.10%)</title><rect x="511.0" y="707.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="514.0" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.10%)</title><rect x="511.0" y="691.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="514.0" y="702.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.10%)</title><rect x="511.0" y="675.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="514.0" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (2 samples, 0.19%)</title><rect x="512.1" y="707.0" width="2.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="515.1" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.19%)</title><rect x="512.1" y="691.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="515.1" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.19%)</title><rect x="512.1" y="675.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="515.1" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="513.3" y="659.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="516.3" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="513.3" y="643.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="516.3" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="513.3" y="627.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="516.3" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (10 samples, 0.97%)</title><rect x="514.4" y="723.0" width="11.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="517.4" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.39%)</title><rect x="521.3" y="707.0" width="4.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="524.3" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (4 samples, 0.39%)</title><rect x="521.3" y="691.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="524.3" y="702.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.39%)</title><rect x="521.3" y="675.0" width="4.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="524.3" y="686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.10%)</title><rect x="524.7" y="659.0" width="1.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="527.7" y="670.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (34 samples, 3.29%)</title><rect x="525.8" y="723.0" width="38.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="528.8" y="734.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (2 samples, 0.19%)</title><rect x="528.1" y="707.0" width="2.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="531.1" y="718.0"></text>
</g>
<g>
<title>__GI___setsockopt (30 samples, 2.90%)</title><rect x="530.4" y="707.0" width="34.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="533.4" y="718.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (25 samples, 2.42%)</title><rect x="536.1" y="691.0" width="28.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="539.1" y="702.0">en..</text>
</g>
<g>
<title>do_syscall_64 (25 samples, 2.42%)</title><rect x="536.1" y="675.0" width="28.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="539.1" y="686.0">do..</text>
</g>
<g>
<title>sys_setsockopt (13 samples, 1.26%)</title><rect x="549.8" y="659.0" width="14.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="552.8" y="670.0"></text>
</g>
<g>
<title>__get_user_4 (1 samples, 0.10%)</title><rect x="549.8" y="643.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="552.8" y="654.0"></text>
</g>
<g>
<title>security_socket_setsockopt (4 samples, 0.39%)</title><rect x="550.9" y="643.0" width="4.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="553.9" y="654.0"></text>
</g>
<g>
<title>aa_sock_opt_perm (2 samples, 0.19%)</title><rect x="552.1" y="627.0" width="2.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="555.1" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (1 samples, 0.10%)</title><rect x="554.4" y="627.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="557.4" y="638.0"></text>
</g>
<g>
<title>aa_sock_opt_perm (1 samples, 0.10%)</title><rect x="554.4" y="611.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="557.4" y="622.0"></text>
</g>
<g>
<title>sock_set_timeout (1 samples, 0.10%)</title><rect x="555.5" y="643.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="558.5" y="654.0"></text>
</g>
<g>
<title>sock_setsockopt (4 samples, 0.39%)</title><rect x="556.6" y="643.0" width="4.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="559.6" y="654.0"></text>
</g>
<g>
<title>sock_set_timeout (1 samples, 0.10%)</title><rect x="560.1" y="627.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="563.1" y="638.0"></text>
</g>
<g>
<title>sockfd_lookup_light (3 samples, 0.29%)</title><rect x="561.2" y="643.0" width="3.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="564.2" y="654.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.19%)</title><rect x="561.2" y="627.0" width="2.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="564.2" y="638.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.19%)</title><rect x="561.2" y="611.0" width="2.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="564.2" y="622.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.19%)</title><rect x="561.2" y="595.0" width="2.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="564.2" y="606.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.10%)</title><rect x="563.5" y="627.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="566.5" y="638.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (185 samples, 17.89%)</title><rect x="564.6" y="723.0" width="211.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="567.6" y="734.0">one/nio/net/NativeSocket.wri..</text>
</g>
<g>
<title>__send (184 samples, 17.79%)</title><rect x="565.8" y="707.0" width="209.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="568.8" y="718.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (183 samples, 17.70%)</title><rect x="566.9" y="691.0" width="208.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="569.9" y="702.0">entry_SYSCALL_64_after_hwfr..</text>
</g>
<g>
<title>do_syscall_64 (183 samples, 17.70%)</title><rect x="566.9" y="675.0" width="208.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="569.9" y="686.0">do_syscall_64</text>
</g>
<g>
<title>SYSC_sendto (1 samples, 0.10%)</title><rect x="570.3" y="659.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="573.3" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (7 samples, 0.68%)</title><rect x="571.5" y="659.0" width="8.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="574.5" y="670.0"></text>
</g>
<g>
<title>schedule (7 samples, 0.68%)</title><rect x="571.5" y="643.0" width="8.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="574.5" y="654.0"></text>
</g>
<g>
<title>__schedule (7 samples, 0.68%)</title><rect x="571.5" y="627.0" width="8.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="574.5" y="638.0"></text>
</g>
<g>
<title>finish_task_switch (7 samples, 0.68%)</title><rect x="571.5" y="611.0" width="8.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="574.5" y="622.0"></text>
</g>
<g>
<title>sys_sendto (172 samples, 16.63%)</title><rect x="579.5" y="659.0" width="196.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="582.5" y="670.0">sys_sendto</text>
</g>
<g>
<title>SYSC_sendto (172 samples, 16.63%)</title><rect x="579.5" y="643.0" width="196.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="582.5" y="654.0">SYSC_sendto</text>
</g>
<g>
<title>sock_sendmsg (169 samples, 16.34%)</title><rect x="581.7" y="627.0" width="192.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="584.7" y="638.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.10%)</title><rect x="581.7" y="611.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="584.7" y="622.0"></text>
</g>
<g>
<title>inet_sendmsg (167 samples, 16.15%)</title><rect x="582.9" y="611.0" width="190.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="585.9" y="622.0">inet_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (167 samples, 16.15%)</title><rect x="582.9" y="595.0" width="190.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="585.9" y="606.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg_locked (166 samples, 16.05%)</title><rect x="582.9" y="579.0" width="189.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="585.9" y="590.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>_copy_from_iter_full (4 samples, 0.39%)</title><rect x="585.2" y="563.0" width="4.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="588.2" y="574.0"></text>
</g>
<g>
<title>copy_user_generic_string (1 samples, 0.10%)</title><rect x="588.6" y="547.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="591.6" y="558.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (7 samples, 0.68%)</title><rect x="589.7" y="563.0" width="8.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="592.7" y="574.0"></text>
</g>
<g>
<title>__alloc_skb (4 samples, 0.39%)</title><rect x="589.7" y="547.0" width="4.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="592.7" y="558.0"></text>
</g>
<g>
<title>__slab_alloc (1 samples, 0.10%)</title><rect x="592.0" y="531.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="595.0" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (1 samples, 0.10%)</title><rect x="593.2" y="531.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="596.2" y="542.0"></text>
</g>
<g>
<title>ksize (3 samples, 0.29%)</title><rect x="594.3" y="547.0" width="3.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="597.3" y="558.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.10%)</title><rect x="597.7" y="563.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="600.7" y="574.0"></text>
</g>
<g>
<title>tcp_push (150 samples, 14.51%)</title><rect x="598.9" y="563.0" width="171.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="601.9" y="574.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (150 samples, 14.51%)</title><rect x="598.9" y="547.0" width="171.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="601.9" y="558.0">__tcp_push_pending_fra..</text>
</g>
<g>
<title>tcp_write_xmit (150 samples, 14.51%)</title><rect x="598.9" y="531.0" width="171.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="601.9" y="542.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.10%)</title><rect x="602.3" y="515.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="605.3" y="526.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.19%)</title><rect x="603.4" y="515.0" width="2.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="606.4" y="526.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.10%)</title><rect x="605.7" y="515.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="608.7" y="526.0"></text>
</g>
<g>
<title>tcp_init_tso_segs (1 samples, 0.10%)</title><rect x="606.8" y="515.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="609.8" y="526.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.10%)</title><rect x="608.0" y="515.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="611.0" y="526.0"></text>
</g>
<g>
<title>tcp_transmit_skb (140 samples, 13.54%)</title><rect x="609.1" y="515.0" width="159.8" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="612.1" y="526.0">tcp_transmit_skb</text>
</g>
<g>
<title>ip_queue_xmit (136 samples, 13.15%)</title><rect x="610.3" y="499.0" width="155.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="613.3" y="510.0">ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (1 samples, 0.10%)</title><rect x="612.6" y="483.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="615.6" y="494.0"></text>
</g>
<g>
<title>ip_local_out (133 samples, 12.86%)</title><rect x="613.7" y="483.0" width="151.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="616.7" y="494.0">ip_local_out</text>
</g>
<g>
<title>ip_output (133 samples, 12.86%)</title><rect x="613.7" y="467.0" width="151.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="616.7" y="478.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (131 samples, 12.67%)</title><rect x="616.0" y="451.0" width="149.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="619.0" y="462.0">ip_finish_output</text>
</g>
<g>
<title>ip_finish_output2 (131 samples, 12.67%)</title><rect x="616.0" y="435.0" width="149.5" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="619.0" y="446.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (127 samples, 12.28%)</title><rect x="616.0" y="419.0" width="144.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="619.0" y="430.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.17 (127 samples, 12.28%)</title><rect x="616.0" y="403.0" width="144.9" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="619.0" y="414.0">do_softirq.part.17</text>
</g>
<g>
<title>do_softirq_own_stack (125 samples, 12.09%)</title><rect x="618.3" y="387.0" width="142.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="621.3" y="398.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (125 samples, 12.09%)</title><rect x="618.3" y="371.0" width="142.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="621.3" y="382.0">__softirqentry_tex..</text>
</g>
<g>
<title>net_rx_action (125 samples, 12.09%)</title><rect x="618.3" y="355.0" width="142.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="621.3" y="366.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (123 samples, 11.90%)</title><rect x="620.5" y="339.0" width="140.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="623.5" y="350.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (122 samples, 11.80%)</title><rect x="621.7" y="323.0" width="139.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="624.7" y="334.0">__netif_receive_skb</text>
</g>
<g>
<title>__netif_receive_skb_core (121 samples, 11.70%)</title><rect x="622.8" y="307.0" width="138.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="625.8" y="318.0">__netif_receive_s..</text>
</g>
<g>
<title>ip_rcv (118 samples, 11.41%)</title><rect x="626.2" y="291.0" width="134.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="629.2" y="302.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (116 samples, 11.22%)</title><rect x="628.5" y="275.0" width="132.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="631.5" y="286.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (115 samples, 11.12%)</title><rect x="629.7" y="259.0" width="131.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="632.7" y="270.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (115 samples, 11.12%)</title><rect x="629.7" y="243.0" width="131.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="632.7" y="254.0">ip_local_deliver..</text>
</g>
<g>
<title>tcp_v4_fill_cb (2 samples, 0.19%)</title><rect x="632.0" y="227.0" width="2.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="635.0" y="238.0"></text>
</g>
<g>
<title>tcp_v4_rcv (111 samples, 10.74%)</title><rect x="634.2" y="227.0" width="126.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="637.2" y="238.0">tcp_v4_rcv</text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.10%)</title><rect x="637.7" y="211.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="640.7" y="222.0"></text>
</g>
<g>
<title>__xfrm_policy_check2.constprop.33 (1 samples, 0.10%)</title><rect x="638.8" y="211.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="641.8" y="222.0"></text>
</g>
<g>
<title>_raw_spin_lock (1 samples, 0.10%)</title><rect x="639.9" y="211.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="642.9" y="222.0"></text>
</g>
<g>
<title>tcp_filter (1 samples, 0.10%)</title><rect x="641.1" y="211.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="644.1" y="222.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.10%)</title><rect x="641.1" y="195.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="644.1" y="206.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (1 samples, 0.10%)</title><rect x="641.1" y="179.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="644.1" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (104 samples, 10.06%)</title><rect x="642.2" y="211.0" width="118.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="645.2" y="222.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_rcv_established (104 samples, 10.06%)</title><rect x="642.2" y="195.0" width="118.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="645.2" y="206.0">tcp_rcv_establ..</text>
</g>
<g>
<title>__tcp_ack_snd_check (1 samples, 0.10%)</title><rect x="644.5" y="179.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="647.5" y="190.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (1 samples, 0.10%)</title><rect x="644.5" y="163.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="647.5" y="174.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.10%)</title><rect x="644.5" y="147.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="647.5" y="158.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.10%)</title><rect x="644.5" y="131.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="647.5" y="142.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.10%)</title><rect x="644.5" y="115.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="647.5" y="126.0"></text>
</g>
<g>
<title>sock_def_readable (2 samples, 0.19%)</title><rect x="645.6" y="179.0" width="2.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="648.6" y="190.0"></text>
</g>
<g>
<title>__wake_up_sync_key (2 samples, 0.19%)</title><rect x="645.6" y="163.0" width="2.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="648.6" y="174.0"></text>
</g>
<g>
<title>__wake_up_common_lock (2 samples, 0.19%)</title><rect x="645.6" y="147.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="648.6" y="158.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.19%)</title><rect x="645.6" y="131.0" width="2.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="648.6" y="142.0"></text>
</g>
<g>
<title>tcp_ack (8 samples, 0.77%)</title><rect x="647.9" y="179.0" width="9.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="650.9" y="190.0"></text>
</g>
<g>
<title>rb_erase (1 samples, 0.10%)</title><rect x="647.9" y="163.0" width="1.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="650.9" y="174.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (7 samples, 0.68%)</title><rect x="649.1" y="163.0" width="8.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="652.1" y="174.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.33 (2 samples, 0.19%)</title><rect x="653.6" y="147.0" width="2.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="656.6" y="158.0"></text>
</g>
<g>
<title>minmax_subwin_update (1 samples, 0.10%)</title><rect x="654.8" y="131.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="657.8" y="142.0"></text>
</g>
<g>
<title>tcp_rack_advance (1 samples, 0.10%)</title><rect x="655.9" y="147.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="658.9" y="158.0"></text>
</g>
<g>
<title>tcp_check_space (3 samples, 0.29%)</title><rect x="657.1" y="179.0" width="3.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="660.1" y="190.0"></text>
</g>
<g>
<title>tcp_data_queue (88 samples, 8.51%)</title><rect x="660.5" y="179.0" width="100.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="663.5" y="190.0">tcp_data_queue</text>
</g>
<g>
<title>__wake_up_sync_key (1 samples, 0.10%)</title><rect x="660.5" y="163.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="663.5" y="174.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.10%)</title><rect x="661.6" y="163.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="664.6" y="174.0"></text>
</g>
<g>
<title>sock_def_readable (85 samples, 8.22%)</title><rect x="662.8" y="163.0" width="97.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="665.8" y="174.0">sock_def_re..</text>
</g>
<g>
<title>__wake_up_sync_key (85 samples, 8.22%)</title><rect x="662.8" y="147.0" width="97.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="665.8" y="158.0">__wake_up_s..</text>
</g>
<g>
<title>__wake_up_common_lock (85 samples, 8.22%)</title><rect x="662.8" y="131.0" width="97.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="665.8" y="142.0">__wake_up_c..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (85 samples, 8.22%)</title><rect x="662.8" y="115.0" width="97.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="665.8" y="126.0">_raw_spin_u..</text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.10%)</title><rect x="759.8" y="163.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="762.8" y="174.0"></text>
</g>
<g>
<title>dev_queue_xmit (4 samples, 0.39%)</title><rect x="760.9" y="419.0" width="4.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="763.9" y="430.0"></text>
</g>
<g>
<title>__dev_queue_xmit (4 samples, 0.39%)</title><rect x="760.9" y="403.0" width="4.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="763.9" y="414.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.10%)</title><rect x="763.2" y="387.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="766.2" y="398.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.10%)</title><rect x="763.2" y="371.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="766.2" y="382.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (1 samples, 0.10%)</title><rect x="764.3" y="387.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="767.3" y="398.0"></text>
</g>
<g>
<title>skb_clone (3 samples, 0.29%)</title><rect x="765.5" y="499.0" width="3.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="768.5" y="510.0"></text>
</g>
<g>
<title>__skb_clone (1 samples, 0.10%)</title><rect x="767.8" y="483.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="770.8" y="494.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.10%)</title><rect x="768.9" y="515.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="771.9" y="526.0"></text>
</g>
<g>
<title>tcp_send_mss (1 samples, 0.10%)</title><rect x="770.0" y="563.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="773.0" y="574.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.10%)</title><rect x="770.0" y="547.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="773.0" y="558.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.10%)</title><rect x="771.2" y="563.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="774.2" y="574.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (1 samples, 0.10%)</title><rect x="772.3" y="579.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="775.3" y="590.0"></text>
</g>
<g>
<title>security_socket_sendmsg (1 samples, 0.10%)</title><rect x="773.5" y="611.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="776.5" y="622.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.10%)</title><rect x="773.5" y="595.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="776.5" y="606.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.10%)</title><rect x="773.5" y="579.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="776.5" y="590.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.10%)</title><rect x="773.5" y="563.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="776.5" y="574.0"></text>
</g>
<g>
<title>aa_label_sk_perm (1 samples, 0.10%)</title><rect x="773.5" y="547.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="776.5" y="558.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.10%)</title><rect x="774.6" y="627.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="777.6" y="638.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.10%)</title><rect x="774.6" y="611.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="777.6" y="622.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (2 samples, 0.19%)</title><rect x="775.7" y="723.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="778.7" y="734.0"></text>
</g>
<g>
<title>one/nio/pool/SocketPool.createObject (1 samples, 0.10%)</title><rect x="776.9" y="707.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="779.9" y="718.0"></text>
</g>
<g>
<title>one/nio/pool/SocketPool.createObject (1 samples, 0.10%)</title><rect x="776.9" y="691.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="779.9" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Socket.create (1 samples, 0.10%)</title><rect x="776.9" y="675.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="779.9" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.&lt;init&gt; (1 samples, 0.10%)</title><rect x="776.9" y="659.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="779.9" y="670.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (3 samples, 0.29%)</title><rect x="778.0" y="771.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="781.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.29%)</title><rect x="778.0" y="755.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="781.0" y="766.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="780.3" y="739.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="783.3" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="780.3" y="723.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="783.3" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="780.3" y="707.0" width="1.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="783.3" y="718.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.10%)</title><rect x="780.3" y="691.0" width="1.2" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="783.3" y="702.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.10%)</title><rect x="780.3" y="675.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="783.3" y="686.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.10%)</title><rect x="780.3" y="659.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="783.3" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RecordTimestamp.fromBytes (1 samples, 0.10%)</title><rect x="781.5" y="771.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="784.5" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.getMethodWrapper (204 samples, 19.73%)</title><rect x="782.6" y="771.0" width="232.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="785.6" y="782.0">ru/mail/polis/service/luckydaem..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (4 samples, 0.39%)</title><rect x="782.6" y="755.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="785.6" y="766.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.10%)</title><rect x="783.7" y="739.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="786.7" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.19%)</title><rect x="784.9" y="739.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="787.9" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.19%)</title><rect x="784.9" y="723.0" width="2.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="787.9" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.19%)</title><rect x="784.9" y="707.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="787.9" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.copyFromByteBuffer (200 samples, 19.34%)</title><rect x="787.2" y="755.0" width="228.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="790.2" y="766.0">ru/mail/polis/service/luckydae..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.getWithTimestamp (190 samples, 18.38%)</title><rect x="787.2" y="739.0" width="216.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="790.2" y="750.0">ru/mail/polis/dao/DAOImpl.ge..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (174 samples, 16.83%)</title><rect x="787.2" y="723.0" width="198.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="790.2" y="734.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (173 samples, 16.73%)</title><rect x="787.2" y="707.0" width="197.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="790.2" y="718.0">org/rocksdb/RocksDB.get</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25 (1 samples, 0.10%)</title><rect x="788.3" y="691.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="791.3" y="702.0"></text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (160 samples, 15.47%)</title><rect x="789.4" y="691.0" width="182.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="792.4" y="702.0">Java_org_rocksdb_RocksDB..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25 (5 samples, 0.48%)</title><rect x="791.7" y="675.0" width="5.7" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="794.7" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="796.3" y="659.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="799.3" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="796.3" y="643.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="799.3" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="796.3" y="627.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="799.3" y="638.0"></text>
</g>
<g>
<title>__libc_free (1 samples, 0.10%)</title><rect x="797.4" y="675.0" width="1.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="800.4" y="686.0"></text>
</g>
<g>
<title>operator new(unsigned long) (1 samples, 0.10%)</title><rect x="798.6" y="675.0" width="1.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="801.6" y="686.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (1 samples, 0.10%)</title><rect x="799.7" y="675.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="802.7" y="686.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (1 samples, 0.10%)</title><rect x="800.9" y="675.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="803.9" y="686.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (148 samples, 14.31%)</title><rect x="802.0" y="675.0" width="168.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="805.0" y="686.0">rocksdb_get_helper(JNI..</text>
</g>
<g>
<title>jni_ExceptionCheck (3 samples, 0.29%)</title><rect x="803.1" y="659.0" width="3.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="806.1" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.10%)</title><rect x="805.4" y="643.0" width="1.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="808.4" y="654.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.10%)</title><rect x="806.6" y="659.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="809.6" y="670.0"></text>
</g>
<g>
<title>jni_NewByteArray (2 samples, 0.19%)</title><rect x="807.7" y="659.0" width="2.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="810.7" y="670.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (122 samples, 11.80%)</title><rect x="810.0" y="659.0" width="139.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="813.0" y="670.0">rocksdb::DB::Get(..</text>
</g>
<g>
<title>rocksdb::Cleanable::~Cleanable() (1 samples, 0.10%)</title><rect x="810.0" y="643.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="813.0" y="654.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (119 samples, 11.51%)</title><rect x="811.1" y="643.0" width="135.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="814.1" y="654.0">rocksdb::DB::Get(..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (118 samples, 11.41%)</title><rect x="812.3" y="627.0" width="134.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="815.3" y="638.0">rocksdb::DBImpl::..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.19%)</title><rect x="812.3" y="611.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="815.3" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="813.4" y="595.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="816.4" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="813.4" y="579.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="816.4" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="813.4" y="563.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="816.4" y="574.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.10%)</title><rect x="814.5" y="611.0" width="1.2" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="817.5" y="622.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="814.5" y="595.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="817.5" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="814.5" y="579.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="817.5" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="814.5" y="563.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="817.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (3 samples, 0.29%)</title><rect x="815.7" y="611.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="818.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyHandleImpl::cfd() const (2 samples, 0.19%)</title><rect x="819.1" y="611.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="822.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (1 samples, 0.10%)</title><rect x="821.4" y="611.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="824.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (100 samples, 9.67%)</title><rect x="822.5" y="611.0" width="114.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="825.5" y="622.0">rocksdb::DBImp..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.10%)</title><rect x="827.1" y="595.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="830.1" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.19%)</title><rect x="828.2" y="595.0" width="2.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="831.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.10%)</title><rect x="830.5" y="595.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="833.5" y="606.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (2 samples, 0.19%)</title><rect x="831.7" y="595.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="834.7" y="606.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (3 samples, 0.29%)</title><rect x="833.9" y="595.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="836.9" y="606.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (2 samples, 0.19%)</title><rect x="833.9" y="579.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="836.9" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="836.2" y="579.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="839.2" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="836.2" y="563.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="839.2" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="836.2" y="547.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="839.2" y="558.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.10%)</title><rect x="837.4" y="595.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="840.4" y="606.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (82 samples, 7.93%)</title><rect x="838.5" y="595.0" width="93.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="841.5" y="606.0">rocksdb::Me..</text>
</g>
<g>
<title>/tmp/librocksdbjni727071106436380230.so (75 samples, 7.25%)</title><rect x="844.2" y="579.0" width="85.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="847.2" y="590.0">/tmp/libro..</text>
</g>
<g>
<title>/tmp/librocksdbjni727071106436380230.so (4 samples, 0.39%)</title><rect x="846.5" y="563.0" width="4.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="849.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (67 samples, 6.48%)</title><rect x="851.1" y="563.0" width="76.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="854.1" y="574.0">rocksdb:..</text>
</g>
<g>
<title>/tmp/librocksdbjni727071106436380230.so (2 samples, 0.19%)</title><rect x="903.6" y="547.0" width="2.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="906.6" y="558.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="904.7" y="531.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="907.7" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="904.7" y="515.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="907.7" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="904.7" y="499.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="907.7" y="510.0"></text>
</g>
<g>
<title>_init (3 samples, 0.29%)</title><rect x="905.8" y="547.0" width="3.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="908.8" y="558.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (13 samples, 1.26%)</title><rect x="909.3" y="547.0" width="14.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="912.3" y="558.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni727071106436380230.so (2 samples, 0.19%)</title><rect x="916.1" y="531.0" width="2.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="919.1" y="542.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (1 samples, 0.10%)</title><rect x="918.4" y="531.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="921.4" y="542.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="918.4" y="515.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="921.4" y="526.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="918.4" y="499.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="921.4" y="510.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="918.4" y="483.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="921.4" y="494.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.19%)</title><rect x="919.5" y="531.0" width="2.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="922.5" y="542.0"></text>
</g>
<g>
<title>_init (1 samples, 0.10%)</title><rect x="921.8" y="531.0" width="1.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="924.8" y="542.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="923.0" y="531.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="926.0" y="542.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="923.0" y="515.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="926.0" y="526.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="923.0" y="499.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="926.0" y="510.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.29%)</title><rect x="924.1" y="547.0" width="3.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="927.1" y="558.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.29%)</title><rect x="924.1" y="531.0" width="3.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="927.1" y="542.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.29%)</title><rect x="924.1" y="515.0" width="3.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="927.1" y="526.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned long) (2 samples, 0.19%)</title><rect x="927.5" y="563.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="930.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (1 samples, 0.10%)</title><rect x="929.8" y="579.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="932.8" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="929.8" y="563.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="932.8" y="574.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="929.8" y="547.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="932.8" y="558.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="929.8" y="531.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="932.8" y="542.0"></text>
</g>
<g>
<title>rocksdb::MemTable::NewRangeTombstoneIterator(rocksdb::ReadOptions const&amp;, unsigned long) (1 samples, 0.10%)</title><rect x="930.9" y="579.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="933.9" y="590.0"></text>
</g>
<g>
<title>rocksdb::PackSequenceAndType(unsigned long, rocksdb::ValueType) (1 samples, 0.10%)</title><rect x="932.1" y="595.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="935.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.10%)</title><rect x="933.2" y="595.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="936.2" y="606.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Swap(void*) (1 samples, 0.10%)</title><rect x="934.4" y="595.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="937.4" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="935.5" y="595.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="938.5" y="606.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="935.5" y="579.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="938.5" y="590.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="935.5" y="563.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="938.5" y="574.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (3 samples, 0.29%)</title><rect x="936.7" y="611.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="939.7" y="622.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long) (2 samples, 0.19%)</title><rect x="940.1" y="611.0" width="2.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="943.1" y="622.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (2 samples, 0.19%)</title><rect x="942.4" y="611.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="945.4" y="622.0"></text>
</g>
<g>
<title>rocksdb::StopWatch::~StopWatch() (2 samples, 0.19%)</title><rect x="944.6" y="611.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="947.6" y="622.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (2 samples, 0.19%)</title><rect x="946.9" y="643.0" width="2.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="949.9" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="948.1" y="627.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="951.1" y="638.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="948.1" y="611.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="951.1" y="622.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="948.1" y="595.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="951.1" y="606.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (17 samples, 1.64%)</title><rect x="949.2" y="659.0" width="19.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="952.2" y="670.0"></text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (1 samples, 0.10%)</title><rect x="949.2" y="643.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="952.2" y="654.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.10%)</title><rect x="950.3" y="643.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="953.3" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.10%)</title><rect x="950.3" y="627.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="953.3" y="638.0"></text>
</g>
<g>
<title>jni_NewByteArray (14 samples, 1.35%)</title><rect x="951.5" y="643.0" width="16.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="954.5" y="654.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;5292148ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)0, 5292148ul&gt;::oop_access_barrier(void*, oopDesc*) (1 samples, 0.10%)</title><rect x="954.9" y="627.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="957.9" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.19%)</title><rect x="956.1" y="627.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="959.1" y="638.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="957.2" y="611.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="960.2" y="622.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="957.2" y="595.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="960.2" y="606.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="957.2" y="579.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="960.2" y="590.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (8 samples, 0.77%)</title><rect x="958.3" y="627.0" width="9.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="961.3" y="638.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.68%)</title><rect x="959.5" y="611.0" width="8.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="962.5" y="622.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.29%)</title><rect x="959.5" y="595.0" width="3.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="962.5" y="606.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned (1 samples, 0.10%)</title><rect x="960.6" y="579.0" width="1.2" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="963.6" y="590.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="961.8" y="579.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="964.8" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="961.8" y="563.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="964.8" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="961.8" y="547.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="964.8" y="558.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.10%)</title><rect x="962.9" y="595.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="965.9" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.29%)</title><rect x="964.0" y="595.0" width="3.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="967.0" y="606.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.19%)</title><rect x="965.2" y="579.0" width="2.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="968.2" y="590.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.19%)</title><rect x="965.2" y="563.0" width="2.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="968.2" y="574.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.19%)</title><rect x="965.2" y="547.0" width="2.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="968.2" y="558.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.10%)</title><rect x="967.5" y="643.0" width="1.1" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="970.5" y="654.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.10%)</title><rect x="967.5" y="627.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="970.5" y="638.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.10%)</title><rect x="968.6" y="659.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="971.6" y="670.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.10%)</title><rect x="969.7" y="659.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="972.7" y="670.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (1 samples, 0.10%)</title><rect x="970.9" y="675.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="973.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.39%)</title><rect x="972.0" y="691.0" width="4.6" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="975.0" y="702.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.39%)</title><rect x="972.0" y="675.0" width="4.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="975.0" y="686.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned (4 samples, 0.39%)</title><rect x="972.0" y="659.0" width="4.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="975.0" y="670.0"></text>
</g>
<g>
<title>__libc_free (1 samples, 0.10%)</title><rect x="976.6" y="691.0" width="1.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="979.6" y="702.0"></text>
</g>
<g>
<title>__malloc (2 samples, 0.19%)</title><rect x="977.7" y="691.0" width="2.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="980.7" y="702.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (2 samples, 0.19%)</title><rect x="980.0" y="691.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="983.0" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="981.2" y="675.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="984.2" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="981.2" y="659.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="984.2" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="981.2" y="643.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="984.2" y="654.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1 samples, 0.10%)</title><rect x="982.3" y="691.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="985.3" y="702.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (1 samples, 0.10%)</title><rect x="983.4" y="691.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="986.4" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="984.6" y="707.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="987.6" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="984.6" y="691.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="987.6" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="984.6" y="675.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="987.6" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shift (11 samples, 1.06%)</title><rect x="985.7" y="723.0" width="12.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="988.7" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.10%)</title><rect x="986.9" y="707.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="989.9" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.fromByteToArray (9 samples, 0.87%)</title><rect x="988.0" y="707.0" width="10.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="991.0" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.10%)</title><rect x="988.0" y="691.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="991.0" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.10%)</title><rect x="988.0" y="675.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="991.0" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (1 samples, 0.10%)</title><rect x="988.0" y="659.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="991.0" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (8 samples, 0.77%)</title><rect x="989.1" y="691.0" width="9.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="992.1" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.58%)</title><rect x="991.4" y="675.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="994.4" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.58%)</title><rect x="991.4" y="659.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="994.4" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.29%)</title><rect x="994.9" y="643.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="997.9" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.19%)</title><rect x="994.9" y="627.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="997.9" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.10%)</title><rect x="996.0" y="611.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="999.0" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.10%)</title><rect x="996.0" y="595.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="999.0" y="606.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.10%)</title><rect x="997.1" y="627.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1000.1" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.10%)</title><rect x="997.1" y="611.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1000.1" y="622.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RecordTimestamp.fromBytes (5 samples, 0.48%)</title><rect x="998.3" y="723.0" width="5.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1001.3" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.29%)</title><rect x="999.4" y="707.0" width="3.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1002.4" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (3 samples, 0.29%)</title><rect x="999.4" y="691.0" width="3.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1002.4" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.29%)</title><rect x="999.4" y="675.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1002.4" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.29%)</title><rect x="999.4" y="659.0" width="3.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1002.4" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1001.7" y="643.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1004.7" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RecordTimestamp.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1002.8" y="707.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1005.8" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="1002.8" y="691.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1005.8" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="1002.8" y="675.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1005.8" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="1002.8" y="659.0" width="1.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1005.8" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RecordTimestamp.toBytes (10 samples, 0.97%)</title><rect x="1004.0" y="739.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1007.0" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (2 samples, 0.19%)</title><rect x="1005.1" y="723.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1008.1" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.19%)</title><rect x="1005.1" y="707.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1008.1" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1005.1" y="691.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1008.1" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1005.1" y="675.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1008.1" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="1006.3" y="691.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1009.3" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="1006.3" y="675.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1009.3" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="1006.3" y="659.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1009.3" y="670.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (7 samples, 0.68%)</title><rect x="1007.4" y="723.0" width="8.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1010.4" y="734.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.10%)</title><rect x="1009.7" y="707.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1012.7" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (2 samples, 0.19%)</title><rect x="1010.8" y="707.0" width="2.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1013.8" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.10%)</title><rect x="1013.1" y="707.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1016.1" y="718.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (1 samples, 0.10%)</title><rect x="1014.3" y="707.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1017.3" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="1014.3" y="691.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1017.3" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="1014.3" y="675.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1017.3" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="1014.3" y="659.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1017.3" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.responsesProcessing (12 samples, 1.16%)</title><rect x="1015.4" y="771.0" width="13.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1018.4" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RecordTimestamp.getValueInByteFormat (1 samples, 0.10%)</title><rect x="1015.4" y="755.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1018.4" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.10%)</title><rect x="1015.4" y="739.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1018.4" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RecordTimestamp.mergeRecords (8 samples, 0.77%)</title><rect x="1016.5" y="755.0" width="9.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1019.5" y="766.0"></text>
</g>
<g>
<title>java/util/Collection.stream (2 samples, 0.19%)</title><rect x="1016.5" y="739.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1019.5" y="750.0"></text>
</g>
<g>
<title>java/util/ArrayList.spliterator (1 samples, 0.10%)</title><rect x="1016.5" y="723.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1019.5" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1016.5" y="707.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1019.5" y="718.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1016.5" y="691.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1019.5" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="1016.5" y="675.0" width="1.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1019.5" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="1016.5" y="659.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1019.5" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="1016.5" y="643.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1019.5" y="654.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.10%)</title><rect x="1017.7" y="723.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1020.7" y="734.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1017.7" y="707.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1020.7" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1017.7" y="691.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1020.7" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1017.7" y="675.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1020.7" y="686.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.10%)</title><rect x="1017.7" y="659.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1020.7" y="670.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (2 samples, 0.19%)</title><rect x="1018.8" y="739.0" width="2.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1021.8" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="1020.0" y="723.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1023.0" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="1020.0" y="707.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1023.0" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="1020.0" y="691.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1023.0" y="702.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (4 samples, 0.39%)</title><rect x="1021.1" y="739.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1024.1" y="750.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (4 samples, 0.39%)</title><rect x="1021.1" y="723.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1024.1" y="734.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.39%)</title><rect x="1021.1" y="707.0" width="4.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1024.1" y="718.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.39%)</title><rect x="1021.1" y="691.0" width="4.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1024.1" y="702.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.39%)</title><rect x="1021.1" y="675.0" width="4.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1024.1" y="686.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.39%)</title><rect x="1021.1" y="659.0" width="4.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1024.1" y="670.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (4 samples, 0.39%)</title><rect x="1021.1" y="643.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1024.1" y="654.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (3 samples, 0.29%)</title><rect x="1022.2" y="627.0" width="3.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1025.2" y="638.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.accept (2 samples, 0.19%)</title><rect x="1023.4" y="611.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1026.4" y="622.0"></text>
</g>
<g>
<title>java/util/function/BinaryOperator$$Lambda$66/594145540.apply (2 samples, 0.19%)</title><rect x="1023.4" y="595.0" width="2.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1026.4" y="606.0"></text>
</g>
<g>
<title>java/util/function/BinaryOperator.lambda$maxBy$1 (2 samples, 0.19%)</title><rect x="1023.4" y="579.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1026.4" y="590.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$63/409500895.compare (2 samples, 0.19%)</title><rect x="1023.4" y="563.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1026.4" y="574.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparingLong$6043328a$1 (2 samples, 0.19%)</title><rect x="1023.4" y="547.0" width="2.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1026.4" y="558.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.10%)</title><rect x="1023.4" y="531.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1026.4" y="542.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1023.4" y="515.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1026.4" y="526.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.10%)</title><rect x="1023.4" y="499.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1026.4" y="510.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.10%)</title><rect x="1023.4" y="483.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1026.4" y="494.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.10%)</title><rect x="1023.4" y="467.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1026.4" y="478.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.10%)</title><rect x="1023.4" y="451.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1026.4" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RecordTimestamp$$Lambda$62/971331785.applyAsLong (1 samples, 0.10%)</title><rect x="1024.5" y="531.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1027.5" y="542.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RecordTimestamp.toBytes (3 samples, 0.29%)</title><rect x="1025.7" y="755.0" width="3.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1028.7" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.19%)</title><rect x="1025.7" y="739.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1028.7" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.19%)</title><rect x="1025.7" y="723.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1028.7" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1025.7" y="707.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1028.7" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.10%)</title><rect x="1025.7" y="691.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1028.7" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.10%)</title><rect x="1025.7" y="675.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1028.7" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.10%)</title><rect x="1025.7" y="659.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1028.7" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.10%)</title><rect x="1025.7" y="643.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1028.7" y="654.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="1026.8" y="707.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1029.8" y="718.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="1026.8" y="691.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1029.8" y="702.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="1026.8" y="675.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1029.8" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.10%)</title><rect x="1027.9" y="739.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1030.9" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.putRequestCoordinate (1 samples, 0.10%)</title><rect x="1029.1" y="787.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1032.1" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.upsertWithTimestamp (1 samples, 0.10%)</title><rect x="1029.1" y="771.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1032.1" y="782.0"></text>
</g>
<g>
<title>org/rocksdb/RocksDB.put (1 samples, 0.10%)</title><rect x="1029.1" y="755.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1032.1" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1 samples, 0.10%)</title><rect x="1029.1" y="739.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1032.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.10%)</title><rect x="1030.2" y="851.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1033.2" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (12 samples, 1.16%)</title><rect x="1031.4" y="867.0" width="13.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1034.4" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 0.29%)</title><rect x="1034.8" y="851.0" width="3.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1037.8" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.29%)</title><rect x="1034.8" y="835.0" width="3.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1037.8" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.29%)</title><rect x="1034.8" y="819.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1037.8" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.29%)</title><rect x="1034.8" y="803.0" width="3.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1037.8" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.10%)</title><rect x="1037.1" y="787.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1040.1" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.39%)</title><rect x="1038.2" y="851.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1041.2" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.29%)</title><rect x="1039.4" y="835.0" width="3.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1042.4" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (2 samples, 0.19%)</title><rect x="1042.8" y="851.0" width="2.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1045.8" y="862.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="1043.9" y="835.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1046.9" y="846.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="1043.9" y="819.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1046.9" y="830.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="1043.9" y="803.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1046.9" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.19%)</title><rect x="1045.1" y="867.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1048.1" y="878.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.19%)</title><rect x="1045.1" y="851.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1048.1" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.19%)</title><rect x="1045.1" y="835.0" width="2.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1048.1" y="846.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.19%)</title><rect x="1045.1" y="819.0" width="2.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1048.1" y="830.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (2 samples, 0.19%)</title><rect x="1045.1" y="803.0" width="2.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1048.1" y="814.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (2 samples, 0.19%)</title><rect x="1045.1" y="787.0" width="2.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1048.1" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.10%)</title><rect x="1047.4" y="867.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1050.4" y="878.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="1048.5" y="867.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1051.5" y="878.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="1048.5" y="851.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1051.5" y="862.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="1048.5" y="835.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1051.5" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (39 samples, 3.77%)</title><rect x="1049.6" y="883.0" width="44.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1052.6" y="894.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (38 samples, 3.68%)</title><rect x="1050.8" y="867.0" width="43.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1053.8" y="878.0">one/..</text>
</g>
<g>
<title>[unknown] (8 samples, 0.77%)</title><rect x="1053.1" y="851.0" width="9.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1056.1" y="862.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.77%)</title><rect x="1053.1" y="835.0" width="9.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1056.1" y="846.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (5 samples, 0.48%)</title><rect x="1053.1" y="819.0" width="5.7" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1056.1" y="830.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.19%)</title><rect x="1053.1" y="803.0" width="2.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1056.1" y="814.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned (1 samples, 0.10%)</title><rect x="1055.3" y="803.0" width="1.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1058.3" y="814.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.19%)</title><rect x="1056.5" y="803.0" width="2.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1059.5" y="814.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.10%)</title><rect x="1056.5" y="787.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1059.5" y="798.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.10%)</title><rect x="1057.6" y="787.0" width="1.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1060.6" y="798.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.19%)</title><rect x="1058.8" y="819.0" width="2.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1061.8" y="830.0"></text>
</g>
<g>
<title>recv (1 samples, 0.10%)</title><rect x="1061.0" y="819.0" width="1.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1064.0" y="830.0"></text>
</g>
<g>
<title>recv (28 samples, 2.71%)</title><rect x="1062.2" y="851.0" width="31.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="1065.2" y="862.0">recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (27 samples, 2.61%)</title><rect x="1063.3" y="835.0" width="30.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1066.3" y="846.0">en..</text>
</g>
<g>
<title>do_syscall_64 (27 samples, 2.61%)</title><rect x="1063.3" y="819.0" width="30.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1066.3" y="830.0">do..</text>
</g>
<g>
<title>sys_recvfrom (25 samples, 2.42%)</title><rect x="1065.6" y="803.0" width="28.5" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1068.6" y="814.0">sy..</text>
</g>
<g>
<title>SYSC_recvfrom (25 samples, 2.42%)</title><rect x="1065.6" y="787.0" width="28.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1068.6" y="798.0">SY..</text>
</g>
<g>
<title>import_single_range (1 samples, 0.10%)</title><rect x="1065.6" y="771.0" width="1.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1068.6" y="782.0"></text>
</g>
<g>
<title>sock_recvmsg (19 samples, 1.84%)</title><rect x="1066.8" y="771.0" width="21.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1069.8" y="782.0">s..</text>
</g>
<g>
<title>inet_recvmsg (18 samples, 1.74%)</title><rect x="1066.8" y="755.0" width="20.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1069.8" y="766.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.10%)</title><rect x="1066.8" y="739.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1069.8" y="750.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.10%)</title><rect x="1067.9" y="739.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1070.9" y="750.0"></text>
</g>
<g>
<title>tcp_recvmsg (16 samples, 1.55%)</title><rect x="1069.0" y="739.0" width="18.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1072.0" y="750.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.10%)</title><rect x="1072.5" y="723.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1075.5" y="734.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.10%)</title><rect x="1072.5" y="707.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1075.5" y="718.0"></text>
</g>
<g>
<title>skb_release_head_state (1 samples, 0.10%)</title><rect x="1072.5" y="691.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1075.5" y="702.0"></text>
</g>
<g>
<title>dst_release (1 samples, 0.10%)</title><rect x="1072.5" y="675.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1075.5" y="686.0"></text>
</g>
<g>
<title>lock_sock_nested (3 samples, 0.29%)</title><rect x="1073.6" y="723.0" width="3.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1076.6" y="734.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.10%)</title><rect x="1073.6" y="707.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1076.6" y="718.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (2 samples, 0.19%)</title><rect x="1074.7" y="707.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1077.7" y="718.0"></text>
</g>
<g>
<title>__pv_queued_spin_lock_slowpath (1 samples, 0.10%)</title><rect x="1075.9" y="691.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1078.9" y="702.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (2 samples, 0.19%)</title><rect x="1077.0" y="723.0" width="2.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1080.0" y="734.0"></text>
</g>
<g>
<title>__check_object_size (2 samples, 0.19%)</title><rect x="1077.0" y="707.0" width="2.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1080.0" y="718.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.10%)</title><rect x="1078.2" y="691.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1081.2" y="702.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (3 samples, 0.29%)</title><rect x="1079.3" y="723.0" width="3.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1082.3" y="734.0"></text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.10%)</title><rect x="1081.6" y="707.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1084.6" y="718.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (3 samples, 0.29%)</title><rect x="1082.7" y="723.0" width="3.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1085.7" y="734.0"></text>
</g>
<g>
<title>sched_clock_cpu (2 samples, 0.19%)</title><rect x="1083.9" y="707.0" width="2.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1086.9" y="718.0"></text>
</g>
<g>
<title>sched_clock (2 samples, 0.19%)</title><rect x="1083.9" y="691.0" width="2.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1086.9" y="702.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (2 samples, 0.19%)</title><rect x="1083.9" y="675.0" width="2.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1086.9" y="686.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (2 samples, 0.19%)</title><rect x="1083.9" y="659.0" width="2.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1086.9" y="670.0"></text>
</g>
<g>
<title>tcp_release_cb (1 samples, 0.10%)</title><rect x="1086.2" y="723.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1089.2" y="734.0"></text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.10%)</title><rect x="1087.3" y="755.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1090.3" y="766.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.10%)</title><rect x="1087.3" y="739.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1090.3" y="750.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.10%)</title><rect x="1087.3" y="723.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1090.3" y="734.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.10%)</title><rect x="1087.3" y="707.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1090.3" y="718.0"></text>
</g>
<g>
<title>sockfd_lookup_light (5 samples, 0.48%)</title><rect x="1088.4" y="771.0" width="5.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1091.4" y="782.0"></text>
</g>
<g>
<title>__fdget (5 samples, 0.48%)</title><rect x="1088.4" y="755.0" width="5.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1091.4" y="766.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.48%)</title><rect x="1088.4" y="739.0" width="5.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1091.4" y="750.0"></text>
</g>
<g>
<title>__fget (3 samples, 0.29%)</title><rect x="1090.7" y="723.0" width="3.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1093.7" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.close (1 samples, 0.10%)</title><rect x="1094.1" y="899.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1097.1" y="910.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.unregister (1 samples, 0.10%)</title><rect x="1094.1" y="883.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1097.1" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.disable (1 samples, 0.10%)</title><rect x="1094.1" y="867.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1097.1" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1 samples, 0.10%)</title><rect x="1094.1" y="851.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1097.1" y="862.0"></text>
</g>
<g>
<title>start_thread (83 samples, 8.03%)</title><rect x="1095.3" y="931.0" width="94.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1098.3" y="942.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (83 samples, 8.03%)</title><rect x="1095.3" y="915.0" width="94.7" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1098.3" y="926.0">thread_nati..</text>
</g>
<g>
<title>Thread::call_run() (83 samples, 8.03%)</title><rect x="1095.3" y="899.0" width="94.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.3" y="910.0">Thread::cal..</text>
</g>
<g>
<title>JavaThread::run() (83 samples, 8.03%)</title><rect x="1095.3" y="883.0" width="94.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.3" y="894.0">JavaThread:..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (83 samples, 8.03%)</title><rect x="1095.3" y="867.0" width="94.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1098.3" y="878.0">JavaThread:..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (83 samples, 8.03%)</title><rect x="1095.3" y="851.0" width="94.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1098.3" y="862.0">CompileBrok..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (83 samples, 8.03%)</title><rect x="1095.3" y="835.0" width="94.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1098.3" y="846.0">CompileBrok..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (82 samples, 7.93%)</title><rect x="1095.3" y="819.0" width="93.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1098.3" y="830.0">C2Compiler:..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (82 samples, 7.93%)</title><rect x="1095.3" y="803.0" width="93.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1098.3" y="814.0">Compile::Co..</text>
</g>
<g>
<title>Compile::Code_Gen() (44 samples, 4.26%)</title><rect x="1095.3" y="787.0" width="50.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1098.3" y="798.0">Compi..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.10%)</title><rect x="1095.3" y="771.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.3" y="782.0"></text>
</g>
<g>
<title>Compile::init_buffer(unsigned int*) (1 samples, 0.10%)</title><rect x="1095.3" y="755.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1098.3" y="766.0"></text>
</g>
<g>
<title>Compile::shorten_branches(unsigned int*, int&amp;, int&amp;, int&amp;) (1 samples, 0.10%)</title><rect x="1095.3" y="739.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1098.3" y="750.0"></text>
</g>
<g>
<title>testP_regNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.10%)</title><rect x="1095.3" y="723.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1098.3" y="734.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.10%)</title><rect x="1096.4" y="771.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1099.4" y="782.0"></text>
</g>
<g>
<title>MachOper::num_edges() const (1 samples, 0.10%)</title><rect x="1096.4" y="755.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1099.4" y="766.0"></text>
</g>
<g>
<title>Matcher::match() (3 samples, 0.29%)</title><rect x="1097.6" y="771.0" width="3.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1100.6" y="782.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (2 samples, 0.19%)</title><rect x="1097.6" y="755.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1100.6" y="766.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.10%)</title><rect x="1097.6" y="739.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1100.6" y="750.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (1 samples, 0.10%)</title><rect x="1098.7" y="739.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1101.7" y="750.0"></text>
</g>
<g>
<title>Node::jvms() const (1 samples, 0.10%)</title><rect x="1099.8" y="755.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1102.8" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (4 samples, 0.39%)</title><rect x="1101.0" y="771.0" width="4.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1104.0" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (4 samples, 0.39%)</title><rect x="1101.0" y="755.0" width="4.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1104.0" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (1 samples, 0.10%)</title><rect x="1101.0" y="739.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.0" y="750.0"></text>
</g>
<g>
<title>PhaseCFG::hoist_to_cheaper_block(Block*, Block*, Node*) (1 samples, 0.10%)</title><rect x="1101.0" y="723.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.0" y="734.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (1 samples, 0.10%)</title><rect x="1102.1" y="739.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1105.1" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (2 samples, 0.19%)</title><rect x="1103.3" y="739.0" width="2.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1106.3" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="1104.4" y="723.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1107.4" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="1104.4" y="707.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1107.4" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="1104.4" y="691.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1107.4" y="702.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.10%)</title><rect x="1104.4" y="675.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1107.4" y="686.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.10%)</title><rect x="1104.4" y="659.0" width="1.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1107.4" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.10%)</title><rect x="1104.4" y="643.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1107.4" y="654.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.10%)</title><rect x="1105.6" y="771.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1108.6" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (34 samples, 3.29%)</title><rect x="1106.7" y="771.0" width="38.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1109.7" y="782.0">Pha..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.10%)</title><rect x="1106.7" y="755.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1109.7" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (3 samples, 0.29%)</title><rect x="1107.8" y="755.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.8" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::IndexSetIterator(IndexSet*) (1 samples, 0.10%)</title><rect x="1109.0" y="739.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.0" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1110.1" y="739.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1113.1" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (2 samples, 0.19%)</title><rect x="1111.3" y="755.0" width="2.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1114.3" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (1 samples, 0.10%)</title><rect x="1112.4" y="739.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.4" y="750.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1112.4" y="723.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1115.4" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (3 samples, 0.29%)</title><rect x="1113.5" y="755.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.5" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (2 samples, 0.19%)</title><rect x="1113.5" y="739.0" width="2.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1116.5" y="750.0"></text>
</g>
<g>
<title>Block::find_node(Node const*) const (1 samples, 0.10%)</title><rect x="1113.5" y="723.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1116.5" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.10%)</title><rect x="1114.7" y="723.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1117.7" y="734.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.10%)</title><rect x="1114.7" y="707.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1117.7" y="718.0"></text>
</g>
<g>
<title>Node::grow(unsigned int) (1 samples, 0.10%)</title><rect x="1114.7" y="691.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1117.7" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="1115.8" y="739.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1118.8" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="1115.8" y="723.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1118.8" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="1115.8" y="707.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1118.8" y="718.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (7 samples, 0.68%)</title><rect x="1117.0" y="755.0" width="8.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1120.0" y="766.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (1 samples, 0.10%)</title><rect x="1118.1" y="739.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1121.1" y="750.0"></text>
</g>
<g>
<title>_dl_update_slotinfo (1 samples, 0.10%)</title><rect x="1118.1" y="723.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1121.1" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (2 samples, 0.19%)</title><rect x="1119.2" y="739.0" width="2.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1122.2" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::raise_pressure(Block*, LRG&amp;, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (1 samples, 0.10%)</title><rect x="1120.4" y="723.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1123.4" y="734.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (3 samples, 0.29%)</title><rect x="1121.5" y="739.0" width="3.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1124.5" y="750.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="1123.8" y="723.0" width="1.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1126.8" y="734.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="1123.8" y="707.0" width="1.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1126.8" y="718.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="1123.8" y="691.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1126.8" y="702.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (1 samples, 0.10%)</title><rect x="1125.0" y="755.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1128.0" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.10%)</title><rect x="1125.0" y="739.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1128.0" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.179] (3 samples, 0.29%)</title><rect x="1126.1" y="755.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1129.1" y="766.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.10%)</title><rect x="1127.2" y="739.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1130.2" y="750.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.10%)</title><rect x="1128.4" y="739.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1131.4" y="750.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.19%)</title><rect x="1129.5" y="755.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1132.5" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (1 samples, 0.10%)</title><rect x="1130.7" y="739.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.7" y="750.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (5 samples, 0.48%)</title><rect x="1131.8" y="755.0" width="5.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1134.8" y="766.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (5 samples, 0.48%)</title><rect x="1131.8" y="739.0" width="5.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.8" y="750.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (5 samples, 0.48%)</title><rect x="1131.8" y="723.0" width="5.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1134.8" y="734.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (1 samples, 0.10%)</title><rect x="1131.8" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1134.8" y="718.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.10%)</title><rect x="1131.8" y="691.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1134.8" y="702.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.10%)</title><rect x="1131.8" y="675.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1134.8" y="686.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.10%)</title><rect x="1131.8" y="659.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1134.8" y="670.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.10%)</title><rect x="1131.8" y="643.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1134.8" y="654.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.10%)</title><rect x="1131.8" y="627.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1134.8" y="638.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (4 samples, 0.39%)</title><rect x="1132.9" y="707.0" width="4.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1135.9" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="1136.4" y="691.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1139.4" y="702.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="1136.4" y="675.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1139.4" y="686.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="1136.4" y="659.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1139.4" y="670.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.19%)</title><rect x="1137.5" y="755.0" width="2.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.5" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.10%)</title><rect x="1139.8" y="755.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.8" y="766.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.10%)</title><rect x="1139.8" y="739.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.8" y="750.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.10%)</title><rect x="1139.8" y="723.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.8" y="734.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.10%)</title><rect x="1139.8" y="707.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.8" y="718.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.29%)</title><rect x="1140.9" y="755.0" width="3.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1143.9" y="766.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.10%)</title><rect x="1143.2" y="739.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.2" y="750.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.10%)</title><rect x="1143.2" y="723.0" width="1.2" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1146.2" y="734.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.10%)</title><rect x="1144.4" y="755.0" width="1.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1147.4" y="766.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.10%)</title><rect x="1144.4" y="739.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1147.4" y="750.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.10%)</title><rect x="1144.4" y="723.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1147.4" y="734.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.10%)</title><rect x="1144.4" y="707.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1147.4" y="718.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.10%)</title><rect x="1144.4" y="691.0" width="1.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1147.4" y="702.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.10%)</title><rect x="1144.4" y="675.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1147.4" y="686.0"></text>
</g>
<g>
<title>handle_pte_fault (1 samples, 0.10%)</title><rect x="1144.4" y="659.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1147.4" y="670.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.10%)</title><rect x="1144.4" y="643.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1147.4" y="654.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.10%)</title><rect x="1144.4" y="627.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1147.4" y="638.0"></text>
</g>
<g>
<title>clear_page_rep (1 samples, 0.10%)</title><rect x="1144.4" y="611.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1147.4" y="622.0"></text>
</g>
<g>
<title>Compile::Optimize() (33 samples, 3.19%)</title><rect x="1145.5" y="787.0" width="37.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1148.5" y="798.0">Com..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.10%)</title><rect x="1145.5" y="771.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.5" y="782.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.10%)</title><rect x="1145.5" y="755.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.5" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (1 samples, 0.10%)</title><rect x="1146.6" y="771.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.6" y="782.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (1 samples, 0.10%)</title><rect x="1146.6" y="755.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.6" y="766.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1146.6" y="739.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.6" y="750.0"></text>
</g>
<g>
<title>ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1146.6" y="723.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.6" y="734.0"></text>
</g>
<g>
<title>ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1146.6" y="707.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.6" y="718.0"></text>
</g>
<g>
<title>ConnectionGraph::create_split_phi(PhiNode*, int, GrowableArray&lt;PhiNode*&gt;&amp;, bool&amp;) (1 samples, 0.10%)</title><rect x="1146.6" y="691.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.6" y="702.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (1 samples, 0.10%)</title><rect x="1146.6" y="675.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.6" y="686.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (25 samples, 2.42%)</title><rect x="1147.8" y="771.0" width="28.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.8" y="782.0">Ph..</text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.19%)</title><rect x="1147.8" y="755.0" width="2.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.8" y="766.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.19%)</title><rect x="1147.8" y="739.0" width="2.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.8" y="750.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (2 samples, 0.19%)</title><rect x="1147.8" y="723.0" width="2.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.8" y="734.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.10%)</title><rect x="1147.8" y="707.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1150.8" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.10%)</title><rect x="1147.8" y="691.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1150.8" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1147.8" y="675.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1150.8" y="686.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.10%)</title><rect x="1147.8" y="659.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.8" y="670.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::grow(int) (1 samples, 0.10%)</title><rect x="1147.8" y="643.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.8" y="654.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) (1 samples, 0.10%)</title><rect x="1148.9" y="707.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1151.9" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.10%)</title><rect x="1148.9" y="691.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1151.9" y="702.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.10%)</title><rect x="1148.9" y="675.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1151.9" y="686.0"></text>
</g>
<g>
<title>GrowableArray&lt;float&gt;::grow(int) (1 samples, 0.10%)</title><rect x="1148.9" y="659.0" width="1.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.9" y="670.0"></text>
</g>
<g>
<title>Node::pinned() const (1 samples, 0.10%)</title><rect x="1150.1" y="755.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1153.1" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (19 samples, 1.84%)</title><rect x="1151.2" y="755.0" width="21.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.2" y="766.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (15 samples, 1.45%)</title><rect x="1153.5" y="739.0" width="17.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.5" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (15 samples, 1.45%)</title><rect x="1153.5" y="723.0" width="17.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.5" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.10%)</title><rect x="1153.5" y="707.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.5" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::idom_no_update(unsigned int) const (1 samples, 0.10%)</title><rect x="1153.5" y="691.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.5" y="702.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (14 samples, 1.35%)</title><rect x="1154.6" y="707.0" width="16.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1157.6" y="718.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.19%)</title><rect x="1170.6" y="739.0" width="2.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1173.6" y="750.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.19%)</title><rect x="1170.6" y="723.0" width="2.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1173.6" y="734.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.19%)</title><rect x="1170.6" y="707.0" width="2.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1173.6" y="718.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (1 samples, 0.10%)</title><rect x="1172.9" y="755.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.9" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.10%)</title><rect x="1172.9" y="739.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.9" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.10%)</title><rect x="1172.9" y="723.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1175.9" y="734.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.10%)</title><rect x="1172.9" y="707.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1175.9" y="718.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.10%)</title><rect x="1174.0" y="755.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1177.0" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.10%)</title><rect x="1174.0" y="739.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.0" y="750.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1174.0" y="723.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1177.0" y="734.0"></text>
</g>
<g>
<title>MemNode::Ideal_common(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1174.0" y="707.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.0" y="718.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.10%)</title><rect x="1174.0" y="691.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1177.0" y="702.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.10%)</title><rect x="1174.0" y="675.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1177.0" y="686.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="1174.0" y="659.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1177.0" y="670.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="1174.0" y="643.0" width="1.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1177.0" y="654.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="1174.0" y="627.0" width="1.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1177.0" y="638.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (1 samples, 0.10%)</title><rect x="1175.2" y="755.0" width="1.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1178.2" y="766.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.48%)</title><rect x="1176.3" y="771.0" width="5.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1179.3" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.48%)</title><rect x="1176.3" y="755.0" width="5.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1179.3" y="766.0"></text>
</g>
<g>
<title>BoolNode::hash() const (1 samples, 0.10%)</title><rect x="1176.3" y="739.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1179.3" y="750.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1177.4" y="739.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1180.4" y="750.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1177.4" y="723.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1180.4" y="734.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.10%)</title><rect x="1178.6" y="739.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="750.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.10%)</title><rect x="1178.6" y="723.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.6" y="734.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.10%)</title><rect x="1179.7" y="739.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.7" y="750.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.10%)</title><rect x="1180.9" y="739.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.9" y="750.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.10%)</title><rect x="1182.0" y="771.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.0" y="782.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*) (1 samples, 0.10%)</title><rect x="1182.0" y="755.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.0" y="766.0"></text>
</g>
<g>
<title>PhaseMacroExpand::scalar_replacement(AllocateNode*, GrowableArray&lt;SafePointNode*&gt;&amp;) (1 samples, 0.10%)</title><rect x="1182.0" y="739.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.0" y="750.0"></text>
</g>
<g>
<title>PhaseMacroExpand::value_from_mem(Node*, Node*, BasicType, Type const*, TypeOopPtr const*, AllocateNode*) (1 samples, 0.10%)</title><rect x="1182.0" y="723.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.0" y="734.0"></text>
</g>
<g>
<title>Compile::find_alias_type(TypePtr const*, bool, ciField*) [clone .part.321] (1 samples, 0.10%)</title><rect x="1182.0" y="707.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.0" y="718.0"></text>
</g>
<g>
<title>Compile::flatten_alias_type(TypePtr const*) const (1 samples, 0.10%)</title><rect x="1182.0" y="691.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1185.0" y="702.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.10%)</title><rect x="1182.0" y="675.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.0" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.39%)</title><rect x="1183.2" y="787.0" width="4.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1186.2" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.39%)</title><rect x="1183.2" y="771.0" width="4.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.2" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.39%)</title><rect x="1183.2" y="755.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.2" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.39%)</title><rect x="1183.2" y="739.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.39%)</title><rect x="1183.2" y="723.0" width="4.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.2" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.39%)</title><rect x="1183.2" y="707.0" width="4.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.2" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.39%)</title><rect x="1183.2" y="691.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1186.2" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.39%)</title><rect x="1183.2" y="675.0" width="4.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1186.2" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.39%)</title><rect x="1183.2" y="659.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1186.2" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.39%)</title><rect x="1183.2" y="643.0" width="4.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.2" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.39%)</title><rect x="1183.2" y="627.0" width="4.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.2" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.39%)</title><rect x="1183.2" y="611.0" width="4.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1183.2" y="595.0" width="3.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1186.2" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1183.2" y="579.0" width="3.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1186.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1183.2" y="563.0" width="3.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1186.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1183.2" y="547.0" width="3.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1183.2" y="531.0" width="3.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1186.2" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1183.2" y="515.0" width="3.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.2" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.29%)</title><rect x="1183.2" y="499.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1186.2" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.29%)</title><rect x="1183.2" y="483.0" width="3.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1186.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.29%)</title><rect x="1183.2" y="467.0" width="3.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1186.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.29%)</title><rect x="1183.2" y="451.0" width="3.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1186.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.29%)</title><rect x="1183.2" y="435.0" width="3.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.2" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.29%)</title><rect x="1183.2" y="419.0" width="3.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1186.2" y="430.0"></text>
</g>
<g>
<title>GraphKit::round_double_arguments(ciMethod*) (1 samples, 0.10%)</title><rect x="1183.2" y="403.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.2" y="414.0"></text>
</g>
<g>
<title>TypeFunc::make(ciMethod*) (1 samples, 0.10%)</title><rect x="1183.2" y="387.0" width="1.1" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.2" y="398.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.19%)</title><rect x="1184.3" y="403.0" width="2.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1187.3" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.19%)</title><rect x="1184.3" y="387.0" width="2.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.3" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.19%)</title><rect x="1184.3" y="371.0" width="2.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.3" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.19%)</title><rect x="1184.3" y="355.0" width="2.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.3" y="366.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.10%)</title><rect x="1184.3" y="339.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.3" y="350.0"></text>
</g>
<g>
<title>Parse::throw_to_exit(SafePointNode*) (1 samples, 0.10%)</title><rect x="1184.3" y="323.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.3" y="334.0"></text>
</g>
<g>
<title>GraphKit::make_exception_state(Node*) (1 samples, 0.10%)</title><rect x="1184.3" y="307.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.3" y="318.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.10%)</title><rect x="1184.3" y="291.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.3" y="302.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1185.4" y="339.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.4" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1185.4" y="323.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.4" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1185.4" y="307.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.4" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1185.4" y="291.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.4" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1185.4" y="275.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.4" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1185.4" y="259.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.4" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1185.4" y="243.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.4" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1185.4" y="227.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.4" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1185.4" y="211.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.4" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1185.4" y="195.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.4" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1185.4" y="179.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.4" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1185.4" y="163.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.4" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1185.4" y="147.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.4" y="158.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.10%)</title><rect x="1185.4" y="131.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.4" y="142.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) (1 samples, 0.10%)</title><rect x="1185.4" y="115.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.4" y="126.0"></text>
</g>
<g>
<title>PhaseValues::uncached_makecon(Type const*) (1 samples, 0.10%)</title><rect x="1185.4" y="99.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.4" y="110.0"></text>
</g>
<g>
<title>Node::destruct() (1 samples, 0.10%)</title><rect x="1185.4" y="83.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.4" y="94.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1186.6" y="595.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.6" y="606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1186.6" y="579.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1186.6" y="563.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.6" y="574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1186.6" y="547.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1186.6" y="531.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1186.6" y="515.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.6" y="526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1186.6" y="499.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.6" y="510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1186.6" y="483.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.6" y="494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1186.6" y="467.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.6" y="478.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1186.6" y="451.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1186.6" y="435.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.6" y="446.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1186.6" y="419.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.6" y="430.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1186.6" y="403.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.6" y="414.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1186.6" y="387.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.6" y="398.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1186.6" y="371.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="382.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1186.6" y="355.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.6" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1186.6" y="339.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.6" y="350.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1186.6" y="323.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.6" y="334.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.10%)</title><rect x="1186.6" y="307.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="318.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.10%)</title><rect x="1186.6" y="291.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.6" y="302.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.10%)</title><rect x="1186.6" y="275.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.6" y="286.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.10%)</title><rect x="1186.6" y="259.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1189.6" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.10%)</title><rect x="1186.6" y="243.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.6" y="254.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.10%)</title><rect x="1186.6" y="227.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.6" y="238.0"></text>
</g>
<g>
<title>Parse::return_current(Node*) (1 samples, 0.10%)</title><rect x="1186.6" y="211.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1189.6" y="222.0"></text>
</g>
<g>
<title>PhiNode::slice_memory(TypePtr const*) const (1 samples, 0.10%)</title><rect x="1186.6" y="195.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.6" y="206.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.10%)</title><rect x="1186.6" y="179.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1189.6" y="190.0"></text>
</g>
<g>
<title>Compile::copy_node_notes_to(Node*, Node*) (1 samples, 0.10%)</title><rect x="1186.6" y="163.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.6" y="174.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.10%)</title><rect x="1187.7" y="787.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.7" y="798.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.10%)</title><rect x="1187.7" y="771.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1190.7" y="782.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.10%)</title><rect x="1188.9" y="819.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.9" y="830.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.10%)</title><rect x="1188.9" y="803.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.9" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.10%)</title><rect x="1188.9" y="787.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.9" y="798.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (1 samples, 0.10%)</title><rect x="1188.9" y="771.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.9" y="782.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (1 samples, 0.10%)</title><rect x="1188.9" y="755.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.9" y="766.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (1 samples, 0.10%)</title><rect x="1188.9" y="739.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.9" y="750.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num() (1 samples, 0.10%)</title><rect x="1188.9" y="723.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1191.9" y="734.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (1 samples, 0.10%)</title><rect x="1188.9" y="707.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.9" y="718.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.10%)</title><rect x="1188.9" y="691.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1191.9" y="702.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.10%)</title><rect x="1188.9" y="675.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1191.9" y="686.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.10%)</title><rect x="1188.9" y="659.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1191.9" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.10%)</title><rect x="1188.9" y="643.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1191.9" y="654.0"></text>
</g>
</g>
</svg>

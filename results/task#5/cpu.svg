<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="1285"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="1285"> </text>
<g id="frames">
<g>
<title>all (1,142 samples, 100.00%)</title><rect x="10.0" y="1251.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="1262.0">all</text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.09%)</title><rect x="10.0" y="1235.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="1246.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.35%)</title><rect x="11.0" y="1235.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.0" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.18%)</title><rect x="11.0" y="1219.0" width="2.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.0" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.18%)</title><rect x="11.0" y="1203.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="14.0" y="1214.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.18%)</title><rect x="11.0" y="1187.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="14.0" y="1198.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.09%)</title><rect x="11.0" y="1171.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="14.0" y="1182.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (1 samples, 0.09%)</title><rect x="11.0" y="1155.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="14.0" y="1166.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="12.1" y="1171.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="15.1" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="12.1" y="1155.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.1" y="1166.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.09%)</title><rect x="12.1" y="1139.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="15.1" y="1150.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.18%)</title><rect x="13.1" y="1219.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="16.1" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.18%)</title><rect x="13.1" y="1203.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="16.1" y="1214.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.18%)</title><rect x="13.1" y="1187.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.1" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="13.1" y="1171.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="16.1" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="13.1" y="1155.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="16.1" y="1166.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.09%)</title><rect x="13.1" y="1139.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="16.1" y="1150.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.09%)</title><rect x="13.1" y="1123.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="16.1" y="1134.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.09%)</title><rect x="13.1" y="1107.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="16.1" y="1118.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.09%)</title><rect x="13.1" y="1091.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="16.1" y="1102.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.09%)</title><rect x="14.1" y="1171.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="17.1" y="1182.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.18%)</title><rect x="15.2" y="1235.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="18.2" y="1246.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.09%)</title><rect x="15.2" y="1219.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="18.2" y="1230.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (1 samples, 0.09%)</title><rect x="15.2" y="1203.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="18.2" y="1214.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="15.2" y="1187.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="18.2" y="1198.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="15.2" y="1171.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="18.2" y="1182.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.09%)</title><rect x="15.2" y="1155.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="18.2" y="1166.0"></text>
</g>
<g>
<title>G1AllocRegion::par_allocate(HeapRegion*, unsigned long, unsigned long, unsigned long*) (1 samples, 0.09%)</title><rect x="15.2" y="1139.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="18.2" y="1150.0"></text>
</g>
<g>
<title>Klass::class_loader() const (1 samples, 0.09%)</title><rect x="16.2" y="1219.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="19.2" y="1230.0"></text>
</g>
<g>
<title>[not_walkable] (1 samples, 0.09%)</title><rect x="17.2" y="1235.0" width="1.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="20.2" y="1246.0"></text>
</g>
<g>
<title>[not_walkable_Java] (6 samples, 0.53%)</title><rect x="18.3" y="1235.0" width="6.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="21.3" y="1246.0"></text>
</g>
<g>
<title>G1BarrierSet::write_ref_array_work(MemRegion) (3 samples, 0.26%)</title><rect x="18.3" y="1219.0" width="3.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="21.3" y="1230.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_array_post_entry(HeapWord*, unsigned long) (3 samples, 0.26%)</title><rect x="21.4" y="1219.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="24.4" y="1230.0"></text>
</g>
<g>
<title>G1BarrierSet::invalidate(MemRegion) (1 samples, 0.09%)</title><rect x="21.4" y="1203.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="24.4" y="1214.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.18%)</title><rect x="22.4" y="1203.0" width="2.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="25.4" y="1214.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="23.4" y="1187.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="26.4" y="1198.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="23.4" y="1171.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="26.4" y="1182.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="23.4" y="1155.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="26.4" y="1166.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="24.5" y="1235.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="27.5" y="1246.0"></text>
</g>
<g>
<title>__GI___open64 (1 samples, 0.09%)</title><rect x="24.5" y="1219.0" width="1.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="27.5" y="1230.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.09%)</title><rect x="24.5" y="1203.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="27.5" y="1214.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.09%)</title><rect x="24.5" y="1187.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="27.5" y="1198.0"></text>
</g>
<g>
<title>sys_openat (1 samples, 0.09%)</title><rect x="24.5" y="1171.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="27.5" y="1182.0"></text>
</g>
<g>
<title>do_sys_open (1 samples, 0.09%)</title><rect x="24.5" y="1155.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="27.5" y="1166.0"></text>
</g>
<g>
<title>[unknown_Java] (10 samples, 0.88%)</title><rect x="25.5" y="1235.0" width="10.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="28.5" y="1246.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_array_post_entry(HeapWord*, unsigned long) (2 samples, 0.18%)</title><rect x="28.6" y="1219.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="31.6" y="1230.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.35%)</title><rect x="30.7" y="1219.0" width="4.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="33.7" y="1230.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.09%)</title><rect x="30.7" y="1203.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="33.7" y="1214.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="30.7" y="1187.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="33.7" y="1198.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="30.7" y="1171.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="33.7" y="1182.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="30.7" y="1155.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="33.7" y="1166.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.26%)</title><rect x="31.7" y="1203.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="34.7" y="1214.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="34.8" y="1219.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="37.8" y="1230.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="34.8" y="1203.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="37.8" y="1214.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="34.8" y="1187.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="37.8" y="1198.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,031 samples, 90.28%)</title><rect x="35.8" y="1235.0" width="1065.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="38.8" y="1246.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (8 samples, 0.70%)</title><rect x="38.9" y="1219.0" width="8.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="41.9" y="1230.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (8 samples, 0.70%)</title><rect x="38.9" y="1203.0" width="8.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="41.9" y="1214.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (8 samples, 0.70%)</title><rect x="38.9" y="1187.0" width="8.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="41.9" y="1198.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (1 samples, 0.09%)</title><rect x="46.2" y="1171.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="49.2" y="1182.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="46.2" y="1155.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="49.2" y="1166.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="46.2" y="1139.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="49.2" y="1150.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="46.2" y="1123.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="49.2" y="1134.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (82 samples, 7.18%)</title><rect x="47.2" y="1219.0" width="84.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.2" y="1230.0">one/nio/ne..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (81 samples, 7.09%)</title><rect x="48.2" y="1203.0" width="83.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="51.2" y="1214.0">one/nio/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.09%)</title><rect x="53.4" y="1187.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="56.4" y="1198.0"></text>
</g>
<g>
<title>[unknown] (70 samples, 6.13%)</title><rect x="54.4" y="1187.0" width="72.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="57.4" y="1198.0">[unknown]</text>
</g>
<g>
<title>epoll_wait (70 samples, 6.13%)</title><rect x="54.4" y="1171.0" width="72.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="57.4" y="1182.0">epoll_wait</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (65 samples, 5.69%)</title><rect x="59.6" y="1155.0" width="67.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="62.6" y="1166.0">entry_S..</text>
</g>
<g>
<title>do_syscall_64 (63 samples, 5.52%)</title><rect x="59.6" y="1139.0" width="65.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="62.6" y="1150.0">do_sysc..</text>
</g>
<g>
<title>sys_epoll_wait (59 samples, 5.17%)</title><rect x="63.7" y="1123.0" width="61.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="66.7" y="1134.0">sys_ep..</text>
</g>
<g>
<title>ep_poll (59 samples, 5.17%)</title><rect x="63.7" y="1107.0" width="61.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="66.7" y="1118.0">ep_poll</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.09%)</title><rect x="63.7" y="1091.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="66.7" y="1102.0"></text>
</g>
<g>
<title>ep_scan_ready_list.constprop.17 (16 samples, 1.40%)</title><rect x="64.8" y="1091.0" width="16.5" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="67.8" y="1102.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (6 samples, 0.53%)</title><rect x="64.8" y="1075.0" width="6.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="67.8" y="1086.0"></text>
</g>
<g>
<title>ep_send_events_proc (9 samples, 0.79%)</title><rect x="71.0" y="1075.0" width="9.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="74.0" y="1086.0"></text>
</g>
<g>
<title>ep_item_poll.isra.10 (7 samples, 0.61%)</title><rect x="73.0" y="1059.0" width="7.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="76.0" y="1070.0"></text>
</g>
<g>
<title>sock_poll (7 samples, 0.61%)</title><rect x="73.0" y="1043.0" width="7.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="76.0" y="1054.0"></text>
</g>
<g>
<title>tcp_poll (3 samples, 0.26%)</title><rect x="77.2" y="1027.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="80.2" y="1038.0"></text>
</g>
<g>
<title>mutex_lock (1 samples, 0.09%)</title><rect x="80.3" y="1075.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="83.3" y="1086.0"></text>
</g>
<g>
<title>rcu_all_qs (1 samples, 0.09%)</title><rect x="80.3" y="1059.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="83.3" y="1070.0"></text>
</g>
<g>
<title>ep_send_events_proc (1 samples, 0.09%)</title><rect x="81.3" y="1091.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="84.3" y="1102.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (41 samples, 3.59%)</title><rect x="82.3" y="1091.0" width="42.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="85.3" y="1102.0">sche..</text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (41 samples, 3.59%)</title><rect x="82.3" y="1075.0" width="42.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="85.3" y="1086.0">sche..</text>
</g>
<g>
<title>__schedule (1 samples, 0.09%)</title><rect x="82.3" y="1059.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="85.3" y="1070.0"></text>
</g>
<g>
<title>schedule (40 samples, 3.50%)</title><rect x="83.4" y="1059.0" width="41.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="86.4" y="1070.0">sch..</text>
</g>
<g>
<title>__schedule (38 samples, 3.33%)</title><rect x="85.4" y="1043.0" width="39.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="88.4" y="1054.0">__s..</text>
</g>
<g>
<title>finish_task_switch (36 samples, 3.15%)</title><rect x="87.5" y="1027.0" width="37.2" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="90.5" y="1038.0">fin..</text>
</g>
<g>
<title>sys_epoll_wait (2 samples, 0.18%)</title><rect x="124.7" y="1139.0" width="2.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="127.7" y="1150.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.09%)</title><rect x="126.8" y="1187.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="129.8" y="1198.0"></text>
</g>
<g>
<title>epoll_wait (1 samples, 0.09%)</title><rect x="127.8" y="1187.0" width="1.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="130.8" y="1198.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.18%)</title><rect x="128.8" y="1187.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="131.8" y="1198.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.18%)</title><rect x="128.8" y="1171.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="131.8" y="1182.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (2 samples, 0.18%)</title><rect x="128.8" y="1155.0" width="2.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="131.8" y="1166.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="130.9" y="1187.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="133.9" y="1198.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="130.9" y="1171.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="133.9" y="1182.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="130.9" y="1155.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="133.9" y="1166.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (936 samples, 81.96%)</title><rect x="131.9" y="1219.0" width="967.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="134.9" y="1230.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (936 samples, 81.96%)</title><rect x="131.9" y="1203.0" width="967.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="134.9" y="1214.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (895 samples, 78.37%)</title><rect x="131.9" y="1187.0" width="924.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="134.9" y="1198.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (1 samples, 0.09%)</title><rect x="137.1" y="1171.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="140.1" y="1182.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (872 samples, 76.36%)</title><rect x="138.1" y="1171.0" width="901.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="141.1" y="1182.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (870 samples, 76.18%)</title><rect x="140.2" y="1155.0" width="898.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="143.2" y="1166.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (859 samples, 75.22%)</title><rect x="140.2" y="1139.0" width="887.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="143.2" y="1150.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (12 samples, 1.05%)</title><rect x="140.2" y="1123.0" width="12.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="143.2" y="1134.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (2 samples, 0.18%)</title><rect x="141.2" y="1107.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="144.2" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (2 samples, 0.18%)</title><rect x="141.2" y="1091.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="144.2" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.26%)</title><rect x="143.3" y="1107.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="146.3" y="1118.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.26%)</title><rect x="143.3" y="1091.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="146.3" y="1102.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.09%)</title><rect x="146.4" y="1107.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="149.4" y="1118.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.18%)</title><rect x="147.4" y="1107.0" width="2.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="150.4" y="1118.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (3 samples, 0.26%)</title><rect x="149.5" y="1107.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="152.5" y="1118.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="151.6" y="1091.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="154.6" y="1102.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="151.6" y="1075.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="154.6" y="1086.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="151.6" y="1059.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="154.6" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/ServiceImpl.entity (847 samples, 74.17%)</title><rect x="152.6" y="1123.0" width="875.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="155.6" y="1134.0">ru/mail/polis/service/luckydaemon/ServiceImpl.entity</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.26%)</title><rect x="152.6" y="1107.0" width="3.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="155.6" y="1118.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="154.7" y="1091.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="157.7" y="1102.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="154.7" y="1075.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="157.7" y="1086.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="154.7" y="1059.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="157.7" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/ClustersNodes.getNodes (18 samples, 1.58%)</title><rect x="155.7" y="1107.0" width="18.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="158.7" y="1118.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (18 samples, 1.58%)</title><rect x="155.7" y="1091.0" width="18.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="158.7" y="1102.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (18 samples, 1.58%)</title><rect x="155.7" y="1075.0" width="18.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="158.7" y="1086.0"></text>
</g>
<g>
<title>java/util/HashSet.add (18 samples, 1.58%)</title><rect x="155.7" y="1059.0" width="18.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="158.7" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.put (15 samples, 1.31%)</title><rect x="158.8" y="1043.0" width="15.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="161.8" y="1054.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (15 samples, 1.31%)</title><rect x="158.8" y="1027.0" width="15.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="161.8" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="160.9" y="1011.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="163.9" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (3 samples, 0.26%)</title><rect x="161.9" y="1011.0" width="3.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="164.9" y="1022.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="164.0" y="995.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="167.0" y="1006.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="164.0" y="979.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="167.0" y="990.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="164.0" y="963.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="167.0" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.44%)</title><rect x="165.0" y="1011.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="168.0" y="1022.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="169.1" y="995.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="172.1" y="1006.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="169.1" y="979.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="172.1" y="990.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="169.1" y="963.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="172.1" y="974.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (3 samples, 0.26%)</title><rect x="170.2" y="1011.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="173.2" y="1022.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.09%)</title><rect x="173.3" y="1011.0" width="1.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="176.3" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/ClustersNodes.getReplics (2 samples, 0.18%)</title><rect x="174.3" y="1107.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="177.3" y="1118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.hashCode (2 samples, 0.18%)</title><rect x="174.3" y="1091.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="177.3" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (2 samples, 0.18%)</title><rect x="174.3" y="1075.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="177.3" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.coordinateRequest (824 samples, 72.15%)</title><rect x="176.4" y="1107.0" width="851.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="179.4" y="1118.0">ru/mail/polis/service/luckydaemon/RequestCoordinators.coordinateRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (276 samples, 24.17%)</title><rect x="177.4" y="1091.0" width="285.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="180.4" y="1102.0">one/nio/http/HttpSession.sendResponse</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.09%)</title><rect x="178.4" y="1075.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="181.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.09%)</title><rect x="178.4" y="1059.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="181.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.09%)</title><rect x="178.4" y="1043.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="181.4" y="1054.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="178.4" y="1027.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="181.4" y="1038.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.09%)</title><rect x="178.4" y="1011.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="181.4" y="1022.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.09%)</title><rect x="178.4" y="995.0" width="1.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="181.4" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (270 samples, 23.64%)</title><rect x="179.5" y="1075.0" width="278.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="182.5" y="1086.0">one/nio/http/HttpSession.writeResponse</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (3 samples, 0.26%)</title><rect x="180.5" y="1059.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="183.5" y="1070.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (2 samples, 0.18%)</title><rect x="181.5" y="1043.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="184.5" y="1054.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.18%)</title><rect x="181.5" y="1027.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="184.5" y="1038.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (2 samples, 0.18%)</title><rect x="181.5" y="1011.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="184.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.18%)</title><rect x="181.5" y="995.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="184.5" y="1006.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="182.6" y="979.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="185.6" y="990.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="182.6" y="963.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="185.6" y="974.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="182.6" y="947.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="185.6" y="958.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (266 samples, 23.29%)</title><rect x="183.6" y="1059.0" width="274.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="186.6" y="1070.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (266 samples, 23.29%)</title><rect x="183.6" y="1043.0" width="274.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="186.6" y="1054.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.09%)</title><rect x="183.6" y="1027.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="186.6" y="1038.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (265 samples, 23.20%)</title><rect x="184.6" y="1027.0" width="273.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="187.6" y="1038.0">one/nio/net/Session$ArrayQueueItem.wr..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.09%)</title><rect x="185.7" y="1011.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.7" y="1022.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (263 samples, 23.03%)</title><rect x="186.7" y="1011.0" width="271.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="189.7" y="1022.0">one/nio/net/NativeSocket.write</text>
</g>
<g>
<title>[unknown] (8 samples, 0.70%)</title><rect x="187.7" y="995.0" width="8.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="190.7" y="1006.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.70%)</title><rect x="187.7" y="979.0" width="8.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="190.7" y="990.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (4 samples, 0.35%)</title><rect x="187.7" y="963.0" width="4.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="190.7" y="974.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.09%)</title><rect x="188.8" y="947.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="191.8" y="958.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.18%)</title><rect x="189.8" y="947.0" width="2.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="192.8" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (1 samples, 0.09%)</title><rect x="190.8" y="931.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="193.8" y="942.0"></text>
</g>
<g>
<title>__send (3 samples, 0.26%)</title><rect x="191.9" y="963.0" width="3.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="194.9" y="974.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.09%)</title><rect x="195.0" y="963.0" width="1.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="198.0" y="974.0"></text>
</g>
<g>
<title>__send (254 samples, 22.24%)</title><rect x="196.0" y="995.0" width="262.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="199.0" y="1006.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (253 samples, 22.15%)</title><rect x="197.0" y="979.0" width="261.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="200.0" y="990.0">entry_SYSCALL_64_after_hwframe</text>
</g>
<g>
<title>__indirect_thunk_start (1 samples, 0.09%)</title><rect x="197.0" y="963.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="200.0" y="974.0"></text>
</g>
<g>
<title>do_syscall_64 (252 samples, 22.07%)</title><rect x="198.1" y="963.0" width="260.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="201.1" y="974.0">do_syscall_64</text>
</g>
<g>
<title>SYSC_sendto (1 samples, 0.09%)</title><rect x="209.4" y="947.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="212.4" y="958.0"></text>
</g>
<g>
<title>sys_sendto (240 samples, 21.02%)</title><rect x="210.5" y="947.0" width="247.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="213.5" y="958.0">sys_sendto</text>
</g>
<g>
<title>SYSC_sendto (240 samples, 21.02%)</title><rect x="210.5" y="931.0" width="247.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="213.5" y="942.0">SYSC_sendto</text>
</g>
<g>
<title>sock_sendmsg (235 samples, 20.58%)</title><rect x="211.5" y="915.0" width="242.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="214.5" y="926.0">sock_sendmsg</text>
</g>
<g>
<title>inet_sendmsg (234 samples, 20.49%)</title><rect x="211.5" y="899.0" width="241.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="214.5" y="910.0">inet_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (234 samples, 20.49%)</title><rect x="211.5" y="883.0" width="241.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="214.5" y="894.0">tcp_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg_locked (233 samples, 20.40%)</title><rect x="211.5" y="867.0" width="240.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="214.5" y="878.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (1 samples, 0.09%)</title><rect x="214.6" y="851.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="217.6" y="862.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.09%)</title><rect x="214.6" y="835.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="217.6" y="846.0"></text>
</g>
<g>
<title>_copy_from_iter_full (1 samples, 0.09%)</title><rect x="215.6" y="851.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="218.6" y="862.0"></text>
</g>
<g>
<title>copy_user_generic_string (1 samples, 0.09%)</title><rect x="215.6" y="835.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="218.6" y="846.0"></text>
</g>
<g>
<title>iov_iter_advance (1 samples, 0.09%)</title><rect x="216.7" y="851.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="219.7" y="862.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (7 samples, 0.61%)</title><rect x="217.7" y="851.0" width="7.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="220.7" y="862.0"></text>
</g>
<g>
<title>__alloc_skb (6 samples, 0.53%)</title><rect x="218.7" y="835.0" width="6.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="221.7" y="846.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.43 (5 samples, 0.44%)</title><rect x="218.7" y="819.0" width="5.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="221.7" y="830.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (5 samples, 0.44%)</title><rect x="218.7" y="803.0" width="5.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="221.7" y="814.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (1 samples, 0.09%)</title><rect x="223.9" y="819.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="226.9" y="830.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.09%)</title><rect x="224.9" y="851.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="227.9" y="862.0"></text>
</g>
<g>
<title>tcp_current_mss (1 samples, 0.09%)</title><rect x="226.0" y="851.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="229.0" y="862.0"></text>
</g>
<g>
<title>tcp_push (214 samples, 18.74%)</title><rect x="227.0" y="851.0" width="221.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="230.0" y="862.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (214 samples, 18.74%)</title><rect x="227.0" y="835.0" width="221.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="230.0" y="846.0">__tcp_push_pending_frames</text>
</g>
<g>
<title>tcp_write_xmit (214 samples, 18.74%)</title><rect x="227.0" y="819.0" width="221.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="230.0" y="830.0">tcp_write_xmit</text>
</g>
<g>
<title>__indirect_thunk_start (1 samples, 0.09%)</title><rect x="228.0" y="803.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="231.0" y="814.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.09%)</title><rect x="229.1" y="803.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="232.1" y="814.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.09%)</title><rect x="230.1" y="803.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="233.1" y="814.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.09%)</title><rect x="231.1" y="803.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="234.1" y="814.0"></text>
</g>
<g>
<title>jiffies_to_usecs (1 samples, 0.09%)</title><rect x="232.2" y="803.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="235.2" y="814.0"></text>
</g>
<g>
<title>sched_clock (1 samples, 0.09%)</title><rect x="233.2" y="803.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="236.2" y="814.0"></text>
</g>
<g>
<title>sched_clock_cpu (2 samples, 0.18%)</title><rect x="234.2" y="803.0" width="2.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="237.2" y="814.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (1 samples, 0.09%)</title><rect x="234.2" y="787.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="237.2" y="798.0"></text>
</g>
<g>
<title>sched_clock (1 samples, 0.09%)</title><rect x="235.3" y="787.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="238.3" y="798.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (1 samples, 0.09%)</title><rect x="235.3" y="771.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="238.3" y="782.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (2 samples, 0.18%)</title><rect x="236.3" y="803.0" width="2.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="239.3" y="814.0"></text>
</g>
<g>
<title>tcp_rearm_rto (2 samples, 0.18%)</title><rect x="236.3" y="787.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="239.3" y="798.0"></text>
</g>
<g>
<title>tcp_rearm_rto.part.60 (2 samples, 0.18%)</title><rect x="236.3" y="771.0" width="2.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="239.3" y="782.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.18%)</title><rect x="236.3" y="755.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="239.3" y="766.0"></text>
</g>
<g>
<title>mod_timer (2 samples, 0.18%)</title><rect x="236.3" y="739.0" width="2.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="239.3" y="750.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (2 samples, 0.18%)</title><rect x="236.3" y="723.0" width="2.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="239.3" y="734.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.09%)</title><rect x="238.4" y="803.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="241.4" y="814.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.09%)</title><rect x="238.4" y="787.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="241.4" y="798.0"></text>
</g>
<g>
<title>tcp_transmit_skb (200 samples, 17.51%)</title><rect x="239.4" y="803.0" width="206.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="242.4" y="814.0">tcp_transmit_skb</text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.09%)</title><rect x="240.4" y="787.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="243.4" y="798.0"></text>
</g>
<g>
<title>ip_queue_xmit (198 samples, 17.34%)</title><rect x="241.5" y="787.0" width="204.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="244.5" y="798.0">ip_queue_xmit</text>
</g>
<g>
<title>__sk_dst_check (3 samples, 0.26%)</title><rect x="241.5" y="771.0" width="3.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="244.5" y="782.0"></text>
</g>
<g>
<title>ip_local_out (195 samples, 17.08%)</title><rect x="244.6" y="771.0" width="201.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="247.6" y="782.0">ip_local_out</text>
</g>
<g>
<title>ip_output (194 samples, 16.99%)</title><rect x="245.6" y="755.0" width="200.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="248.6" y="766.0">ip_output</text>
</g>
<g>
<title>__indirect_thunk_start (1 samples, 0.09%)</title><rect x="245.6" y="739.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="248.6" y="750.0"></text>
</g>
<g>
<title>ip_finish_output (193 samples, 16.90%)</title><rect x="246.6" y="739.0" width="199.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="249.6" y="750.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.09%)</title><rect x="246.6" y="723.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="249.6" y="734.0"></text>
</g>
<g>
<title>ip_finish_output2 (192 samples, 16.81%)</title><rect x="247.7" y="723.0" width="198.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="250.7" y="734.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (179 samples, 15.67%)</title><rect x="250.8" y="707.0" width="184.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="253.8" y="718.0">__local_bh_enable_ip</text>
</g>
<g>
<title>do_softirq.part.17 (178 samples, 15.59%)</title><rect x="251.8" y="691.0" width="183.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="254.8" y="702.0">do_softirq.part.17</text>
</g>
<g>
<title>do_softirq_own_stack (176 samples, 15.41%)</title><rect x="253.9" y="675.0" width="181.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="256.9" y="686.0">do_softirq_own_stack</text>
</g>
<g>
<title>__softirqentry_text_start (175 samples, 15.32%)</title><rect x="253.9" y="659.0" width="180.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="256.9" y="670.0">__softirqentry_text_start</text>
</g>
<g>
<title>__usecs_to_jiffies (2 samples, 0.18%)</title><rect x="253.9" y="643.0" width="2.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="256.9" y="654.0"></text>
</g>
<g>
<title>net_rx_action (173 samples, 15.15%)</title><rect x="255.9" y="643.0" width="178.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="258.9" y="654.0">net_rx_action</text>
</g>
<g>
<title>process_backlog (171 samples, 14.97%)</title><rect x="258.0" y="627.0" width="176.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="261.0" y="638.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (170 samples, 14.89%)</title><rect x="259.0" y="611.0" width="175.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="262.0" y="622.0">__netif_receive_skb</text>
</g>
<g>
<title>__netif_receive_skb_core (170 samples, 14.89%)</title><rect x="259.0" y="595.0" width="175.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="262.0" y="606.0">__netif_receive_skb_core</text>
</g>
<g>
<title>ip_rcv (165 samples, 14.45%)</title><rect x="264.2" y="579.0" width="170.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="267.2" y="590.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (164 samples, 14.36%)</title><rect x="265.2" y="563.0" width="169.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="268.2" y="574.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (163 samples, 14.27%)</title><rect x="265.2" y="547.0" width="168.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="268.2" y="558.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (163 samples, 14.27%)</title><rect x="265.2" y="531.0" width="168.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="268.2" y="542.0">ip_local_deliver_finish</text>
</g>
<g>
<title>raw_local_deliver (1 samples, 0.09%)</title><rect x="267.3" y="515.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="270.3" y="526.0"></text>
</g>
<g>
<title>tcp_v4_rcv (160 samples, 14.01%)</title><rect x="268.3" y="515.0" width="165.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="271.3" y="526.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (3 samples, 0.26%)</title><rect x="270.4" y="499.0" width="3.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="273.4" y="510.0"></text>
</g>
<g>
<title>tcp_filter (1 samples, 0.09%)</title><rect x="273.5" y="499.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="276.5" y="510.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (1 samples, 0.09%)</title><rect x="273.5" y="483.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="276.5" y="494.0"></text>
</g>
<g>
<title>tcp_rcv_established (1 samples, 0.09%)</title><rect x="274.5" y="499.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="277.5" y="510.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (153 samples, 13.40%)</title><rect x="275.6" y="499.0" width="158.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="278.6" y="510.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_rcv_established (153 samples, 13.40%)</title><rect x="275.6" y="483.0" width="158.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="278.6" y="494.0">tcp_rcv_established</text>
</g>
<g>
<title>__tcp_ack_snd_check (3 samples, 0.26%)</title><rect x="278.7" y="467.0" width="3.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="281.7" y="478.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (3 samples, 0.26%)</title><rect x="278.7" y="451.0" width="3.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="281.7" y="462.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.26%)</title><rect x="278.7" y="435.0" width="3.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="281.7" y="446.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.26%)</title><rect x="278.7" y="419.0" width="3.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="281.7" y="430.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (3 samples, 0.26%)</title><rect x="278.7" y="403.0" width="3.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="281.7" y="414.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (2 samples, 0.18%)</title><rect x="281.8" y="467.0" width="2.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="284.8" y="478.0"></text>
</g>
<g>
<title>get_seconds (1 samples, 0.09%)</title><rect x="283.8" y="467.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="286.8" y="478.0"></text>
</g>
<g>
<title>tcp_ack (19 samples, 1.66%)</title><rect x="284.9" y="467.0" width="19.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="287.9" y="478.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.09%)</title><rect x="289.0" y="451.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="292.0" y="462.0"></text>
</g>
<g>
<title>bictcp_cong_avoid (2 samples, 0.18%)</title><rect x="290.0" y="451.0" width="2.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="293.0" y="462.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.33 (1 samples, 0.09%)</title><rect x="292.1" y="451.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="295.1" y="462.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (9 samples, 0.79%)</title><rect x="293.1" y="451.0" width="9.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="296.1" y="462.0"></text>
</g>
<g>
<title>__kfree_skb (4 samples, 0.35%)</title><rect x="294.2" y="435.0" width="4.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="297.2" y="446.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.09%)</title><rect x="294.2" y="419.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="297.2" y="430.0"></text>
</g>
<g>
<title>kmem_cache_free (1 samples, 0.09%)</title><rect x="294.2" y="403.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="297.2" y="414.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.09%)</title><rect x="294.2" y="387.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="297.2" y="398.0"></text>
</g>
<g>
<title>skb_release_all (3 samples, 0.26%)</title><rect x="295.2" y="419.0" width="3.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="298.2" y="430.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.18%)</title><rect x="296.2" y="403.0" width="2.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="299.2" y="414.0"></text>
</g>
<g>
<title>skb_free_head (1 samples, 0.09%)</title><rect x="297.3" y="387.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="300.3" y="398.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.09%)</title><rect x="297.3" y="371.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="300.3" y="382.0"></text>
</g>
<g>
<title>__slab_free (1 samples, 0.09%)</title><rect x="297.3" y="355.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="300.3" y="366.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.18%)</title><rect x="298.3" y="435.0" width="2.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="301.3" y="446.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.09%)</title><rect x="300.4" y="435.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="303.4" y="446.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (1 samples, 0.09%)</title><rect x="301.4" y="435.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="304.4" y="446.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (2 samples, 0.18%)</title><rect x="302.4" y="451.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="305.4" y="462.0"></text>
</g>
<g>
<title>tcp_check_space (2 samples, 0.18%)</title><rect x="304.5" y="467.0" width="2.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="307.5" y="478.0"></text>
</g>
<g>
<title>tcp_data_queue (123 samples, 10.77%)</title><rect x="306.5" y="467.0" width="127.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="309.5" y="478.0">tcp_data_queue</text>
</g>
<g>
<title>sock_def_readable (120 samples, 10.51%)</title><rect x="307.6" y="451.0" width="124.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="310.6" y="462.0">sock_def_readable</text>
</g>
<g>
<title>__wake_up_sync_key (118 samples, 10.33%)</title><rect x="309.6" y="435.0" width="122.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="312.6" y="446.0">__wake_up_sync_..</text>
</g>
<g>
<title>__wake_up_common_lock (118 samples, 10.33%)</title><rect x="309.6" y="419.0" width="122.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="312.6" y="430.0">__wake_up_commo..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (118 samples, 10.33%)</title><rect x="309.6" y="403.0" width="122.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="312.6" y="414.0">_raw_spin_unloc..</text>
</g>
<g>
<title>tcp_event_data_recv (1 samples, 0.09%)</title><rect x="431.6" y="451.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="434.6" y="462.0"></text>
</g>
<g>
<title>tcp_queue_rcv (1 samples, 0.09%)</title><rect x="432.6" y="451.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="435.6" y="462.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.09%)</title><rect x="433.6" y="547.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="436.6" y="558.0"></text>
</g>
<g>
<title>rcu_bh_qs (1 samples, 0.09%)</title><rect x="434.7" y="659.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="437.7" y="670.0"></text>
</g>
<g>
<title>dev_queue_xmit (10 samples, 0.88%)</title><rect x="435.7" y="707.0" width="10.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="438.7" y="718.0"></text>
</g>
<g>
<title>__dev_queue_xmit (10 samples, 0.88%)</title><rect x="435.7" y="691.0" width="10.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="438.7" y="702.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (5 samples, 0.44%)</title><rect x="436.7" y="675.0" width="5.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="439.7" y="686.0"></text>
</g>
<g>
<title>loopback_xmit (5 samples, 0.44%)</title><rect x="436.7" y="659.0" width="5.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="439.7" y="670.0"></text>
</g>
<g>
<title>netif_rx (3 samples, 0.26%)</title><rect x="437.8" y="643.0" width="3.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="440.8" y="654.0"></text>
</g>
<g>
<title>enqueue_to_backlog (1 samples, 0.09%)</title><rect x="437.8" y="627.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="440.8" y="638.0"></text>
</g>
<g>
<title>netif_rx_internal (2 samples, 0.18%)</title><rect x="438.8" y="627.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="441.8" y="638.0"></text>
</g>
<g>
<title>enqueue_to_backlog (2 samples, 0.18%)</title><rect x="438.8" y="611.0" width="2.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="441.8" y="622.0"></text>
</g>
<g>
<title>tcp_wfree (1 samples, 0.09%)</title><rect x="440.9" y="643.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="443.9" y="654.0"></text>
</g>
<g>
<title>sk_free (1 samples, 0.09%)</title><rect x="440.9" y="627.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="443.9" y="638.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.09%)</title><rect x="441.9" y="675.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="444.9" y="686.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (1 samples, 0.09%)</title><rect x="442.9" y="675.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="445.9" y="686.0"></text>
</g>
<g>
<title>validate_xmit_skb (2 samples, 0.18%)</title><rect x="444.0" y="675.0" width="2.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="447.0" y="686.0"></text>
</g>
<g>
<title>netif_skb_features (1 samples, 0.09%)</title><rect x="445.0" y="659.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="448.0" y="670.0"></text>
</g>
<g>
<title>tcp_tso_segs (1 samples, 0.09%)</title><rect x="446.0" y="803.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="449.0" y="814.0"></text>
</g>
<g>
<title>tcp_v4_send_check (1 samples, 0.09%)</title><rect x="447.1" y="803.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="450.1" y="814.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (1 samples, 0.09%)</title><rect x="448.1" y="851.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="451.1" y="862.0"></text>
</g>
<g>
<title>tcp_send_mss (3 samples, 0.26%)</title><rect x="449.1" y="851.0" width="3.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="452.1" y="862.0"></text>
</g>
<g>
<title>tcp_current_mss (3 samples, 0.26%)</title><rect x="449.1" y="835.0" width="3.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="452.1" y="846.0"></text>
</g>
<g>
<title>tcp_established_options (1 samples, 0.09%)</title><rect x="450.2" y="819.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="453.2" y="830.0"></text>
</g>
<g>
<title>tcp_v4_md5_lookup (1 samples, 0.09%)</title><rect x="451.2" y="819.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="454.2" y="830.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (1 samples, 0.09%)</title><rect x="452.2" y="867.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="455.2" y="878.0"></text>
</g>
<g>
<title>security_socket_sendmsg (1 samples, 0.09%)</title><rect x="453.3" y="899.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="456.3" y="910.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (1 samples, 0.09%)</title><rect x="453.3" y="883.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="456.3" y="894.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.09%)</title><rect x="453.3" y="867.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="456.3" y="878.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.09%)</title><rect x="453.3" y="851.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="456.3" y="862.0"></text>
</g>
<g>
<title>aa_label_sk_perm (1 samples, 0.09%)</title><rect x="453.3" y="835.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="456.3" y="846.0"></text>
</g>
<g>
<title>sockfd_lookup_light (4 samples, 0.35%)</title><rect x="454.3" y="915.0" width="4.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="457.3" y="926.0"></text>
</g>
<g>
<title>__fdget (4 samples, 0.35%)</title><rect x="454.3" y="899.0" width="4.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="457.3" y="910.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.35%)</title><rect x="454.3" y="883.0" width="4.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="457.3" y="894.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.18%)</title><rect x="456.4" y="867.0" width="2.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="459.4" y="878.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.26%)</title><rect x="458.4" y="1075.0" width="3.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="461.4" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.26%)</title><rect x="458.4" y="1059.0" width="3.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="461.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.26%)</title><rect x="458.4" y="1043.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="461.4" y="1054.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="460.5" y="1027.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="463.5" y="1038.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="461.5" y="1075.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="464.5" y="1086.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="461.5" y="1059.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="464.5" y="1070.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="461.5" y="1043.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="464.5" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.18%)</title><rect x="462.6" y="1091.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="465.6" y="1102.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.09%)</title><rect x="463.6" y="1075.0" width="1.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="466.6" y="1086.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.09%)</title><rect x="463.6" y="1059.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="466.6" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.getRequestCoordinate (545 samples, 47.72%)</title><rect x="464.6" y="1091.0" width="563.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="467.6" y="1102.0">ru/mail/polis/service/luckydaemon/RequestCoordinators.getRequestCoordinate</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.09%)</title><rect x="467.7" y="1075.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="470.7" y="1086.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.09%)</title><rect x="467.7" y="1059.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="470.7" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.09%)</title><rect x="468.8" y="1075.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="471.8" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.processNode (1 samples, 0.09%)</title><rect x="468.8" y="1059.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="471.8" y="1070.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="468.8" y="1043.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="471.8" y="1054.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="468.8" y="1027.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="471.8" y="1038.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="468.8" y="1011.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="471.8" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.processIfProxy (137 samples, 12.00%)</title><rect x="469.8" y="1075.0" width="141.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="472.8" y="1086.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>java/util/ArrayList.addAll (1 samples, 0.09%)</title><rect x="469.8" y="1059.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="472.8" y="1070.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RecordTimestamp.mergeRecords (10 samples, 0.88%)</title><rect x="470.8" y="1059.0" width="10.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="473.8" y="1070.0"></text>
</g>
<g>
<title>java/util/Collection.stream (6 samples, 0.53%)</title><rect x="470.8" y="1043.0" width="6.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="473.8" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (6 samples, 0.53%)</title><rect x="470.8" y="1027.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="473.8" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$Head.&lt;init&gt; (5 samples, 0.44%)</title><rect x="471.9" y="1011.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="474.9" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (5 samples, 0.44%)</title><rect x="471.9" y="995.0" width="5.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="474.9" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (5 samples, 0.44%)</title><rect x="471.9" y="979.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="474.9" y="990.0"></text>
</g>
<g>
<title>G1BarrierSetRuntime::write_ref_array_post_entry(HeapWord*, unsigned long) (3 samples, 0.26%)</title><rect x="471.9" y="963.0" width="3.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="474.9" y="974.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="473.9" y="947.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="476.9" y="958.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="473.9" y="931.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="476.9" y="942.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="473.9" y="915.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="476.9" y="926.0"></text>
</g>
<g>
<title>oop_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="475.0" y="963.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="478.0" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.processNode (1 samples, 0.09%)</title><rect x="476.0" y="963.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="479.0" y="974.0"></text>
</g>
<g>
<title>java/util/Comparator.comparingLong (1 samples, 0.09%)</title><rect x="477.0" y="1043.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="480.0" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.09%)</title><rect x="477.0" y="1027.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="480.0" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.09%)</title><rect x="477.0" y="1011.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.0" y="1022.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$68/1671137091.get$Lambda (1 samples, 0.09%)</title><rect x="477.0" y="995.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="480.0" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (3 samples, 0.26%)</title><rect x="478.1" y="1043.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="481.1" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (3 samples, 0.26%)</title><rect x="478.1" y="1027.0" width="3.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="481.1" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (3 samples, 0.26%)</title><rect x="478.1" y="1011.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="481.1" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (3 samples, 0.26%)</title><rect x="478.1" y="995.0" width="3.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="481.1" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (3 samples, 0.26%)</title><rect x="478.1" y="979.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="481.1" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="478.1" y="963.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="481.1" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (2 samples, 0.18%)</title><rect x="479.1" y="947.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="482.1" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.processNode (126 samples, 11.03%)</title><rect x="481.2" y="1059.0" width="130.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="484.2" y="1070.0">ru/mail/polis/se..</text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.09%)</title><rect x="481.2" y="1043.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="484.2" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.09%)</title><rect x="481.2" y="1027.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="484.2" y="1038.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="481.2" y="1011.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="484.2" y="1022.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="481.2" y="995.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="484.2" y="1006.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="481.2" y="979.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="484.2" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.getMethodWrapper (125 samples, 10.95%)</title><rect x="482.2" y="1043.0" width="129.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="485.2" y="1054.0">ru/mail/polis/se..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.getWithTimestamp (122 samples, 10.68%)</title><rect x="483.2" y="1027.0" width="126.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="486.2" y="1038.0">ru/mail/polis/da..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (118 samples, 10.33%)</title><rect x="483.2" y="1011.0" width="122.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="486.2" y="1022.0">org/rocksdb/Roc..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (118 samples, 10.33%)</title><rect x="483.2" y="995.0" width="122.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="486.2" y="1006.0">org/rocksdb/Roc..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (103 samples, 9.02%)</title><rect x="483.2" y="979.0" width="106.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="486.2" y="990.0">Java_org_rock..</text>
</g>
<g>
<title>__libc_free (3 samples, 0.26%)</title><rect x="483.2" y="963.0" width="3.1" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="486.2" y="974.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.09%)</title><rect x="486.3" y="963.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="489.3" y="974.0"></text>
</g>
<g>
<title>operator delete(void*) (1 samples, 0.09%)</title><rect x="487.4" y="963.0" width="1.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="490.4" y="974.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.09%)</title><rect x="488.4" y="963.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="491.4" y="974.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (3 samples, 0.26%)</title><rect x="489.4" y="963.0" width="3.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="492.4" y="974.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.09%)</title><rect x="492.5" y="963.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="495.5" y="974.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (91 samples, 7.97%)</title><rect x="493.6" y="963.0" width="94.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="496.6" y="974.0">rocksdb_get..</text>
</g>
<g>
<title>JavaThread::check_and_handle_async_exceptions(bool) (2 samples, 0.18%)</title><rect x="494.6" y="947.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="497.6" y="958.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="495.6" y="931.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="498.6" y="942.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="495.6" y="915.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="498.6" y="926.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="495.6" y="899.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="498.6" y="910.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.09%)</title><rect x="496.7" y="947.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="499.7" y="958.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.09%)</title><rect x="496.7" y="931.0" width="1.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="499.7" y="942.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (74 samples, 6.48%)</title><rect x="497.7" y="947.0" width="76.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="500.7" y="958.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.09%)</title><rect x="497.7" y="931.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="500.7" y="942.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="497.7" y="915.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="500.7" y="926.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="497.7" y="899.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="500.7" y="910.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="497.7" y="883.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="500.7" y="894.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (73 samples, 6.39%)</title><rect x="498.7" y="931.0" width="75.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="501.7" y="942.0">rocksdb:..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (71 samples, 6.22%)</title><rect x="499.8" y="915.0" width="73.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="502.8" y="926.0">rocksdb:..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (2 samples, 0.18%)</title><rect x="499.8" y="899.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="502.8" y="910.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.09%)</title><rect x="499.8" y="883.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="502.8" y="894.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.09%)</title><rect x="499.8" y="867.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="502.8" y="878.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.09%)</title><rect x="499.8" y="851.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="502.8" y="862.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.09%)</title><rect x="499.8" y="835.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="502.8" y="846.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.09%)</title><rect x="499.8" y="819.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="502.8" y="830.0"></text>
</g>
<g>
<title>rebalance_domains (1 samples, 0.09%)</title><rect x="499.8" y="803.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="502.8" y="814.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.09%)</title><rect x="499.8" y="787.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="502.8" y="798.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (1 samples, 0.09%)</title><rect x="499.8" y="771.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="502.8" y="782.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="500.8" y="883.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="503.8" y="894.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="500.8" y="867.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="503.8" y="878.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="500.8" y="851.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="503.8" y="862.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (4 samples, 0.35%)</title><rect x="501.8" y="899.0" width="4.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="504.8" y="910.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="504.9" y="883.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="507.9" y="894.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="504.9" y="867.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="507.9" y="878.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="504.9" y="851.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="507.9" y="862.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (1 samples, 0.09%)</title><rect x="506.0" y="899.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="509.0" y="910.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (62 samples, 5.43%)</title><rect x="507.0" y="899.0" width="64.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="510.0" y="910.0">rocksdb..</text>
</g>
<g>
<title>/tmp/librocksdbjni13374039931298556330.so (1 samples, 0.09%)</title><rect x="509.1" y="883.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="512.1" y="894.0"></text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.09%)</title><rect x="510.1" y="883.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="513.1" y="894.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (1 samples, 0.09%)</title><rect x="511.1" y="883.0" width="1.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="514.1" y="894.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned (1 samples, 0.09%)</title><rect x="512.2" y="883.0" width="1.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="515.2" y="894.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.26%)</title><rect x="513.2" y="883.0" width="3.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="516.2" y="894.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (6 samples, 0.53%)</title><rect x="516.3" y="883.0" width="6.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="519.3" y="894.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.09%)</title><rect x="517.3" y="867.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="520.3" y="878.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (2 samples, 0.18%)</title><rect x="518.4" y="867.0" width="2.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="521.4" y="878.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.18%)</title><rect x="520.4" y="867.0" width="2.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="523.4" y="878.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="521.5" y="851.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="524.5" y="862.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (1 samples, 0.09%)</title><rect x="522.5" y="883.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="525.5" y="894.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion(rocksdb::SuperVersion*) (1 samples, 0.09%)</title><rect x="522.5" y="867.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="525.5" y="878.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap(unsigned int, void*, void*&amp;) (1 samples, 0.09%)</title><rect x="522.5" y="851.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="525.5" y="862.0"></text>
</g>
<g>
<title>rocksdb::EncodeVarint32(char*, unsigned int) (3 samples, 0.26%)</title><rect x="523.5" y="883.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="526.5" y="894.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="525.6" y="867.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="528.6" y="878.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="525.6" y="851.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="528.6" y="862.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="525.6" y="835.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="528.6" y="846.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (42 samples, 3.68%)</title><rect x="526.6" y="883.0" width="43.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="529.6" y="894.0">rock..</text>
</g>
<g>
<title>/tmp/librocksdbjni13374039931298556330.so (37 samples, 3.24%)</title><rect x="529.7" y="867.0" width="38.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="532.7" y="878.0">/tm..</text>
</g>
<g>
<title>/tmp/librocksdbjni13374039931298556330.so (5 samples, 0.44%)</title><rect x="531.8" y="851.0" width="5.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="534.8" y="862.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (27 samples, 2.36%)</title><rect x="537.0" y="851.0" width="27.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="540.0" y="862.0">r..</text>
</g>
<g>
<title>TLS init function for rocksdb::perf_context (1 samples, 0.09%)</title><rect x="552.5" y="835.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="555.5" y="846.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="553.5" y="835.0" width="1.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="556.5" y="846.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="554.5" y="835.0" width="1.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="557.5" y="846.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (9 samples, 0.79%)</title><rect x="555.6" y="835.0" width="9.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="558.6" y="846.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni13374039931298556330.so (1 samples, 0.09%)</title><rect x="556.6" y="819.0" width="1.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="559.6" y="830.0"></text>
</g>
<g>
<title>__memcmp_sse4_1 (4 samples, 0.35%)</title><rect x="557.6" y="819.0" width="4.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="560.6" y="830.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="561.8" y="819.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="564.8" y="830.0"></text>
</g>
<g>
<title>_init (2 samples, 0.18%)</title><rect x="562.8" y="819.0" width="2.1" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="565.8" y="830.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.09%)</title><rect x="564.9" y="851.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="567.9" y="862.0"></text>
</g>
<g>
<title>rocksdb::UnPackSequenceAndType(unsigned long, unsigned long*, rocksdb::ValueType*) (1 samples, 0.09%)</title><rect x="565.9" y="851.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="568.9" y="862.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned long) (1 samples, 0.09%)</title><rect x="566.9" y="851.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="569.9" y="862.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="568.0" y="867.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="571.0" y="878.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="569.0" y="867.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="572.0" y="878.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="569.0" y="851.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="572.0" y="862.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="569.0" y="835.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="572.0" y="846.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.09%)</title><rect x="570.0" y="883.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="573.0" y="894.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long) (1 samples, 0.09%)</title><rect x="571.1" y="899.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="574.1" y="910.0"></text>
</g>
<g>
<title>rocksdb::PerfStepTimer::Start() (1 samples, 0.09%)</title><rect x="572.1" y="899.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="575.1" y="910.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="572.1" y="883.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="575.1" y="894.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="572.1" y="867.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="575.1" y="878.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="572.1" y="851.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="575.1" y="862.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (1 samples, 0.09%)</title><rect x="573.1" y="915.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="576.1" y="926.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (13 samples, 1.14%)</title><rect x="574.2" y="947.0" width="13.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="577.2" y="958.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.26%)</title><rect x="574.2" y="931.0" width="3.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="577.2" y="942.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (3 samples, 0.26%)</title><rect x="577.3" y="931.0" width="3.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="580.3" y="942.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="579.3" y="915.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="582.3" y="926.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="579.3" y="899.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="582.3" y="910.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="579.3" y="883.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="582.3" y="894.0"></text>
</g>
<g>
<title>jni_NewByteArray (7 samples, 0.61%)</title><rect x="580.4" y="931.0" width="7.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="583.4" y="942.0"></text>
</g>
<g>
<title>JNIHandles::make_local(JNIEnv_*, oopDesc*) (1 samples, 0.09%)</title><rect x="581.4" y="915.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="584.4" y="926.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (5 samples, 0.44%)</title><rect x="582.4" y="915.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="585.4" y="926.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.26%)</title><rect x="582.4" y="899.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="585.4" y="910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.26%)</title><rect x="582.4" y="883.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="585.4" y="894.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.09%)</title><rect x="583.5" y="867.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="586.5" y="878.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (1 samples, 0.09%)</title><rect x="584.5" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="587.5" y="878.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.18%)</title><rect x="585.5" y="899.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="588.5" y="910.0"></text>
</g>
<g>
<title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string(std::string const&amp;) (2 samples, 0.18%)</title><rect x="587.6" y="963.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="590.6" y="974.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="589.7" y="979.0" width="1.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="592.7" y="990.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.09%)</title><rect x="589.7" y="963.0" width="1.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="592.7" y="974.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned (1 samples, 0.09%)</title><rect x="589.7" y="947.0" width="1.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="592.7" y="958.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="589.7" y="931.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="592.7" y="942.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="589.7" y="915.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="592.7" y="926.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="589.7" y="899.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="592.7" y="910.0"></text>
</g>
<g>
<title>__malloc (4 samples, 0.35%)</title><rect x="590.7" y="979.0" width="4.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="593.7" y="990.0"></text>
</g>
<g>
<title>rocksdb::ReadOptions::ReadOptions() (5 samples, 0.44%)</title><rect x="594.8" y="979.0" width="5.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="597.8" y="990.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (2 samples, 0.18%)</title><rect x="600.0" y="979.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="603.0" y="990.0"></text>
</g>
<g>
<title>std::string::_M_mutate(unsigned long, unsigned long, unsigned long) (1 samples, 0.09%)</title><rect x="602.1" y="979.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="605.1" y="990.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (2 samples, 0.18%)</title><rect x="603.1" y="979.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="606.1" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shift (2 samples, 0.18%)</title><rect x="605.2" y="1011.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="608.2" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.fromByteToArray (2 samples, 0.18%)</title><rect x="605.2" y="995.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="608.2" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.09%)</title><rect x="605.2" y="979.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="608.2" y="990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.09%)</title><rect x="605.2" y="963.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="608.2" y="974.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.09%)</title><rect x="606.2" y="979.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="609.2" y="990.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="606.2" y="963.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="609.2" y="974.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="606.2" y="947.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="609.2" y="958.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="606.2" y="931.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="609.2" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RecordTimestamp.fromBytes (2 samples, 0.18%)</title><rect x="607.2" y="1011.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="610.2" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.18%)</title><rect x="607.2" y="995.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="610.2" y="1006.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (2 samples, 0.18%)</title><rect x="607.2" y="979.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="610.2" y="990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.18%)</title><rect x="607.2" y="963.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="610.2" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.18%)</title><rect x="607.2" y="947.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="610.2" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.18%)</title><rect x="607.2" y="931.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="610.2" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.18%)</title><rect x="607.2" y="915.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="610.2" y="926.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="608.3" y="899.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="611.3" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RecordTimestamp.toBytes (2 samples, 0.18%)</title><rect x="609.3" y="1027.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="612.3" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putLong (2 samples, 0.18%)</title><rect x="609.3" y="1011.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="612.3" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextPutIndex (2 samples, 0.18%)</title><rect x="609.3" y="995.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="612.3" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.18%)</title><rect x="609.3" y="979.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="612.3" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.processNode (389 samples, 34.06%)</title><rect x="611.4" y="1075.0" width="401.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="614.4" y="1086.0">ru/mail/polis/service/luckydaemon/RequestCoordinators.p..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.09%)</title><rect x="612.4" y="1059.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="615.4" y="1070.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1990160809.invoke (1 samples, 0.09%)</title><rect x="612.4" y="1043.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="615.4" y="1054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/319977154.invoke (1 samples, 0.09%)</title><rect x="612.4" y="1027.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="615.4" y="1038.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.09%)</title><rect x="612.4" y="1011.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="615.4" y="1022.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.prepend (1 samples, 0.09%)</title><rect x="612.4" y="995.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="615.4" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.09%)</title><rect x="612.4" y="979.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="615.4" y="990.0"></text>
</g>
<g>
<title>java/lang/String.coder (1 samples, 0.09%)</title><rect x="612.4" y="963.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="615.4" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (1 samples, 0.09%)</title><rect x="613.4" y="1059.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="616.4" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.18%)</title><rect x="614.5" y="1059.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="617.5" y="1070.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.18%)</title><rect x="614.5" y="1043.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="617.5" y="1054.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.09%)</title><rect x="615.5" y="1027.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="618.5" y="1038.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.09%)</title><rect x="615.5" y="1011.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="618.5" y="1022.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="615.5" y="995.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="618.5" y="1006.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.09%)</title><rect x="615.5" y="979.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="618.5" y="990.0"></text>
</g>
<g>
<title>java/util/HashMap.get (2 samples, 0.18%)</title><rect x="616.5" y="1059.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="619.5" y="1070.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.09%)</title><rect x="616.5" y="1043.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="619.5" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.09%)</title><rect x="616.5" y="1027.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="619.5" y="1038.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="616.5" y="1011.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="619.5" y="1022.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.09%)</title><rect x="617.6" y="1043.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="620.6" y="1054.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.09%)</title><rect x="617.6" y="1027.0" width="1.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="620.6" y="1038.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.09%)</title><rect x="617.6" y="1011.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="620.6" y="1022.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1 samples, 0.09%)</title><rect x="617.6" y="995.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="620.6" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.get (311 samples, 27.23%)</title><rect x="618.6" y="1059.0" width="321.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="621.6" y="1070.0">one/nio/http/HttpClient.get</text>
</g>
<g>
<title>one/nio/http/HttpClient.createRequest (2 samples, 0.18%)</title><rect x="619.6" y="1043.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="622.6" y="1054.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.09%)</title><rect x="620.7" y="1027.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="623.7" y="1038.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.09%)</title><rect x="620.7" y="1011.0" width="1.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="623.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.09%)</title><rect x="620.7" y="995.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="623.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.09%)</title><rect x="620.7" y="979.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="623.7" y="990.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (308 samples, 26.97%)</title><rect x="621.7" y="1043.0" width="318.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="624.7" y="1054.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (308 samples, 26.97%)</title><rect x="621.7" y="1027.0" width="318.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="624.7" y="1038.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (5 samples, 0.44%)</title><rect x="622.7" y="1011.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="625.7" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.09%)</title><rect x="622.7" y="995.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="625.7" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (4 samples, 0.35%)</title><rect x="623.8" y="995.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="626.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.26%)</title><rect x="624.8" y="979.0" width="3.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="627.8" y="990.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="626.9" y="963.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="629.9" y="974.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="626.9" y="947.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="629.9" y="958.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="626.9" y="931.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="629.9" y="942.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (47 samples, 4.12%)</title><rect x="627.9" y="1011.0" width="48.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="630.9" y="1022.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (45 samples, 3.94%)</title><rect x="627.9" y="995.0" width="46.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="630.9" y="1006.0">one/..</text>
</g>
<g>
<title>[unknown] (10 samples, 0.88%)</title><rect x="628.9" y="979.0" width="10.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="631.9" y="990.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.88%)</title><rect x="628.9" y="963.0" width="10.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="631.9" y="974.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (9 samples, 0.79%)</title><rect x="628.9" y="947.0" width="9.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="631.9" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.09%)</title><rect x="630.0" y="931.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="633.0" y="942.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (6 samples, 0.53%)</title><rect x="631.0" y="931.0" width="6.2" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="634.0" y="942.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.18%)</title><rect x="634.1" y="915.0" width="2.1" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="637.1" y="926.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="635.1" y="899.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="638.1" y="910.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="635.1" y="883.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="638.1" y="894.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="635.1" y="867.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="638.1" y="878.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="636.2" y="915.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="639.2" y="926.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="636.2" y="899.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="639.2" y="910.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="636.2" y="883.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="639.2" y="894.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="637.2" y="931.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="640.2" y="942.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="637.2" y="915.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="640.2" y="926.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="637.2" y="899.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="640.2" y="910.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.09%)</title><rect x="638.2" y="947.0" width="1.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="641.2" y="958.0"></text>
</g>
<g>
<title>recv (33 samples, 2.89%)</title><rect x="639.3" y="979.0" width="34.1" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="642.3" y="990.0">recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (30 samples, 2.63%)</title><rect x="641.3" y="963.0" width="31.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="644.3" y="974.0">en..</text>
</g>
<g>
<title>do_syscall_64 (30 samples, 2.63%)</title><rect x="641.3" y="947.0" width="31.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="644.3" y="958.0">do..</text>
</g>
<g>
<title>sys_recvfrom (27 samples, 2.36%)</title><rect x="644.4" y="931.0" width="27.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="647.4" y="942.0">s..</text>
</g>
<g>
<title>SYSC_recvfrom (26 samples, 2.28%)</title><rect x="644.4" y="915.0" width="26.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="647.4" y="926.0">S..</text>
</g>
<g>
<title>security_socket_recvmsg (1 samples, 0.09%)</title><rect x="644.4" y="899.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="647.4" y="910.0"></text>
</g>
<g>
<title>sock_recvmsg (23 samples, 2.01%)</title><rect x="645.5" y="899.0" width="23.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="648.5" y="910.0">s..</text>
</g>
<g>
<title>inet_recvmsg (20 samples, 1.75%)</title><rect x="645.5" y="883.0" width="20.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="648.5" y="894.0"></text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.09%)</title><rect x="645.5" y="867.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="648.5" y="878.0"></text>
</g>
<g>
<title>tcp_recvmsg (19 samples, 1.66%)</title><rect x="646.5" y="867.0" width="19.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="649.5" y="878.0"></text>
</g>
<g>
<title>sk_wait_data (17 samples, 1.49%)</title><rect x="647.5" y="851.0" width="17.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="650.5" y="862.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.09%)</title><rect x="648.6" y="835.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="651.6" y="846.0"></text>
</g>
<g>
<title>_raw_spin_unlock_bh (1 samples, 0.09%)</title><rect x="648.6" y="819.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="651.6" y="830.0"></text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.09%)</title><rect x="648.6" y="803.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="651.6" y="814.0"></text>
</g>
<g>
<title>wait_woken (15 samples, 1.31%)</title><rect x="649.6" y="835.0" width="15.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="652.6" y="846.0"></text>
</g>
<g>
<title>schedule_timeout (15 samples, 1.31%)</title><rect x="649.6" y="819.0" width="15.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="652.6" y="830.0"></text>
</g>
<g>
<title>del_timer_sync (1 samples, 0.09%)</title><rect x="649.6" y="803.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="652.6" y="814.0"></text>
</g>
<g>
<title>lock_timer_base (1 samples, 0.09%)</title><rect x="649.6" y="787.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="652.6" y="798.0"></text>
</g>
<g>
<title>schedule (14 samples, 1.23%)</title><rect x="650.6" y="803.0" width="14.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="653.6" y="814.0"></text>
</g>
<g>
<title>__schedule (14 samples, 1.23%)</title><rect x="650.6" y="787.0" width="14.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="653.6" y="798.0"></text>
</g>
<g>
<title>finish_task_switch (13 samples, 1.14%)</title><rect x="651.7" y="771.0" width="13.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="654.7" y="782.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (1 samples, 0.09%)</title><rect x="665.1" y="851.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="668.1" y="862.0"></text>
</g>
<g>
<title>tcp_send_ack (1 samples, 0.09%)</title><rect x="665.1" y="835.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="668.1" y="846.0"></text>
</g>
<g>
<title>tcp_send_ack.part.39 (1 samples, 0.09%)</title><rect x="665.1" y="819.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="668.1" y="830.0"></text>
</g>
<g>
<title>tcp_transmit_skb (1 samples, 0.09%)</title><rect x="665.1" y="803.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="668.1" y="814.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.09%)</title><rect x="665.1" y="787.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="668.1" y="798.0"></text>
</g>
<g>
<title>ip_local_out (1 samples, 0.09%)</title><rect x="665.1" y="771.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="668.1" y="782.0"></text>
</g>
<g>
<title>ip_output (1 samples, 0.09%)</title><rect x="665.1" y="755.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="668.1" y="766.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.09%)</title><rect x="665.1" y="739.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="668.1" y="750.0"></text>
</g>
<g>
<title>ip_finish_output2 (1 samples, 0.09%)</title><rect x="665.1" y="723.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="668.1" y="734.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.09%)</title><rect x="665.1" y="707.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="668.1" y="718.0"></text>
</g>
<g>
<title>do_softirq.part.17 (1 samples, 0.09%)</title><rect x="665.1" y="691.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="668.1" y="702.0"></text>
</g>
<g>
<title>do_softirq_own_stack (1 samples, 0.09%)</title><rect x="665.1" y="675.0" width="1.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="668.1" y="686.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.09%)</title><rect x="665.1" y="659.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="668.1" y="670.0"></text>
</g>
<g>
<title>security_socket_recvmsg (2 samples, 0.18%)</title><rect x="666.1" y="883.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="669.1" y="894.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.09%)</title><rect x="666.1" y="867.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="669.1" y="878.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (1 samples, 0.09%)</title><rect x="667.2" y="867.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="670.2" y="878.0"></text>
</g>
<g>
<title>aa_sock_msg_perm (1 samples, 0.09%)</title><rect x="667.2" y="851.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="670.2" y="862.0"></text>
</g>
<g>
<title>aa_sk_perm (1 samples, 0.09%)</title><rect x="667.2" y="835.0" width="1.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="670.2" y="846.0"></text>
</g>
<g>
<title>aa_label_sk_perm (1 samples, 0.09%)</title><rect x="667.2" y="819.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="670.2" y="830.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.09%)</title><rect x="668.2" y="883.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="671.2" y="894.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.18%)</title><rect x="669.2" y="899.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="672.2" y="910.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.09%)</title><rect x="670.3" y="883.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="673.3" y="894.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.09%)</title><rect x="670.3" y="867.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="673.3" y="878.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.09%)</title><rect x="670.3" y="851.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="673.3" y="862.0"></text>
</g>
<g>
<title>import_single_range (1 samples, 0.09%)</title><rect x="671.3" y="915.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="674.3" y="926.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="672.3" y="963.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="675.3" y="974.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="672.3" y="947.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="675.3" y="958.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="672.3" y="931.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="675.3" y="942.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="673.4" y="979.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="676.4" y="990.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="673.4" y="963.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="676.4" y="974.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="673.4" y="947.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="676.4" y="958.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.09%)</title><rect x="673.4" y="931.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="676.4" y="942.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.09%)</title><rect x="673.4" y="915.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="676.4" y="926.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.09%)</title><rect x="673.4" y="899.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="676.4" y="910.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.09%)</title><rect x="674.4" y="995.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="677.4" y="1006.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="675.4" y="995.0" width="1.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="678.4" y="1006.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="675.4" y="979.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="678.4" y="990.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="675.4" y="963.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="678.4" y="974.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (12 samples, 1.05%)</title><rect x="676.5" y="1011.0" width="12.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="679.5" y="1022.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.09%)</title><rect x="676.5" y="995.0" width="1.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="679.5" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (8 samples, 0.70%)</title><rect x="677.5" y="995.0" width="8.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="680.5" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.09%)</title><rect x="680.6" y="979.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="683.6" y="990.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.09%)</title><rect x="680.6" y="963.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="683.6" y="974.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.35%)</title><rect x="681.6" y="979.0" width="4.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="684.6" y="990.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.35%)</title><rect x="681.6" y="963.0" width="4.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="684.6" y="974.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.35%)</title><rect x="681.6" y="947.0" width="4.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="684.6" y="958.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.18%)</title><rect x="685.8" y="995.0" width="2.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="688.8" y="1006.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.09%)</title><rect x="685.8" y="979.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="688.8" y="990.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.09%)</title><rect x="685.8" y="963.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="688.8" y="974.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="686.8" y="979.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="689.8" y="990.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="686.8" y="963.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="689.8" y="974.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="686.8" y="947.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="689.8" y="958.0"></text>
</g>
<g>
<title>one/nio/http/Response.setBody (1 samples, 0.09%)</title><rect x="687.8" y="995.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="690.8" y="1006.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (7 samples, 0.61%)</title><rect x="688.9" y="1011.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="691.9" y="1022.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1 samples, 0.09%)</title><rect x="689.9" y="995.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="692.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="689.9" y="979.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="692.9" y="990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="689.9" y="963.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="692.9" y="974.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (4 samples, 0.35%)</title><rect x="690.9" y="995.0" width="4.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="693.9" y="1006.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (1 samples, 0.09%)</title><rect x="690.9" y="979.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="693.9" y="990.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.26%)</title><rect x="692.0" y="979.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="695.0" y="990.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (3 samples, 0.26%)</title><rect x="692.0" y="963.0" width="3.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="695.0" y="974.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.09%)</title><rect x="693.0" y="947.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="696.0" y="958.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.09%)</title><rect x="693.0" y="931.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="696.0" y="942.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="694.0" y="947.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="697.0" y="958.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="694.0" y="931.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="697.0" y="942.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="694.0" y="915.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="697.0" y="926.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="695.1" y="995.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="698.1" y="1006.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="695.1" y="979.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="698.1" y="990.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="695.1" y="963.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="698.1" y="974.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (32 samples, 2.80%)</title><rect x="696.1" y="1011.0" width="33.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="699.1" y="1022.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (1 samples, 0.09%)</title><rect x="698.2" y="995.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="701.2" y="1006.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="698.2" y="979.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="701.2" y="990.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="698.2" y="963.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="701.2" y="974.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="698.2" y="947.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="701.2" y="958.0"></text>
</g>
<g>
<title>__GI___setsockopt (29 samples, 2.54%)</title><rect x="699.2" y="995.0" width="30.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="702.2" y="1006.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (27 samples, 2.36%)</title><rect x="701.3" y="979.0" width="27.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="704.3" y="990.0">e..</text>
</g>
<g>
<title>do_syscall_64 (27 samples, 2.36%)</title><rect x="701.3" y="963.0" width="27.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="704.3" y="974.0">d..</text>
</g>
<g>
<title>sys_setsockopt (21 samples, 1.84%)</title><rect x="707.5" y="947.0" width="21.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="710.5" y="958.0">s..</text>
</g>
<g>
<title>__get_user_4 (3 samples, 0.26%)</title><rect x="707.5" y="931.0" width="3.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="710.5" y="942.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.09%)</title><rect x="710.6" y="931.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="713.6" y="942.0"></text>
</g>
<g>
<title>security_socket_setsockopt (6 samples, 0.53%)</title><rect x="711.6" y="931.0" width="6.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="714.6" y="942.0"></text>
</g>
<g>
<title>aa_sock_opt_perm (1 samples, 0.09%)</title><rect x="712.6" y="915.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="715.6" y="926.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (4 samples, 0.35%)</title><rect x="713.7" y="915.0" width="4.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="716.7" y="926.0"></text>
</g>
<g>
<title>aa_sock_opt_perm (4 samples, 0.35%)</title><rect x="713.7" y="899.0" width="4.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="716.7" y="910.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.18%)</title><rect x="715.7" y="883.0" width="2.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="718.7" y="894.0"></text>
</g>
<g>
<title>sock_setsockopt (9 samples, 0.79%)</title><rect x="717.8" y="931.0" width="9.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="720.8" y="942.0"></text>
</g>
<g>
<title>_copy_from_user (1 samples, 0.09%)</title><rect x="720.9" y="915.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="723.9" y="926.0"></text>
</g>
<g>
<title>release_sock (2 samples, 0.18%)</title><rect x="721.9" y="915.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="724.9" y="926.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (1 samples, 0.09%)</title><rect x="721.9" y="899.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="724.9" y="910.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.09%)</title><rect x="723.0" y="899.0" width="1.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="726.0" y="910.0"></text>
</g>
<g>
<title>sock_set_timeout (3 samples, 0.26%)</title><rect x="724.0" y="915.0" width="3.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="727.0" y="926.0"></text>
</g>
<g>
<title>_copy_from_user (1 samples, 0.09%)</title><rect x="726.1" y="899.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="729.1" y="910.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.18%)</title><rect x="727.1" y="931.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="730.1" y="942.0"></text>
</g>
<g>
<title>__fdget (2 samples, 0.18%)</title><rect x="727.1" y="915.0" width="2.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="730.1" y="926.0"></text>
</g>
<g>
<title>__fget_light (2 samples, 0.18%)</title><rect x="727.1" y="899.0" width="2.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="730.1" y="910.0"></text>
</g>
<g>
<title>__fget (2 samples, 0.18%)</title><rect x="727.1" y="883.0" width="2.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="730.1" y="894.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (200 samples, 17.51%)</title><rect x="729.2" y="1011.0" width="206.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="732.2" y="1022.0">one/nio/net/NativeSocket.wr..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (4 samples, 0.35%)</title><rect x="729.2" y="995.0" width="4.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="732.2" y="1006.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned (1 samples, 0.09%)</title><rect x="731.2" y="979.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="734.2" y="990.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.09%)</title><rect x="732.3" y="979.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="735.3" y="990.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.09%)</title><rect x="732.3" y="963.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="735.3" y="974.0"></text>
</g>
<g>
<title>__send (194 samples, 16.99%)</title><rect x="733.3" y="995.0" width="200.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="736.3" y="1006.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (193 samples, 16.90%)</title><rect x="733.3" y="979.0" width="199.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="736.3" y="990.0">entry_SYSCALL_64_after_hwf..</text>
</g>
<g>
<title>do_syscall_64 (193 samples, 16.90%)</title><rect x="733.3" y="963.0" width="199.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="736.3" y="974.0">do_syscall_64</text>
</g>
<g>
<title>exit_to_usermode_loop (9 samples, 0.79%)</title><rect x="734.3" y="947.0" width="9.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="737.3" y="958.0"></text>
</g>
<g>
<title>schedule (9 samples, 0.79%)</title><rect x="734.3" y="931.0" width="9.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="737.3" y="942.0"></text>
</g>
<g>
<title>__schedule (9 samples, 0.79%)</title><rect x="734.3" y="915.0" width="9.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="737.3" y="926.0"></text>
</g>
<g>
<title>finish_task_switch (8 samples, 0.70%)</title><rect x="735.4" y="899.0" width="8.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="738.4" y="910.0"></text>
</g>
<g>
<title>sys_sendto (183 samples, 16.02%)</title><rect x="743.6" y="947.0" width="189.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="746.6" y="958.0">sys_sendto</text>
</g>
<g>
<title>SYSC_sendto (182 samples, 15.94%)</title><rect x="744.7" y="931.0" width="188.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="747.7" y="942.0">SYSC_sendto</text>
</g>
<g>
<title>sock_sendmsg (181 samples, 15.85%)</title><rect x="745.7" y="915.0" width="187.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="748.7" y="926.0">sock_sendmsg</text>
</g>
<g>
<title>inet_sendmsg (180 samples, 15.76%)</title><rect x="745.7" y="899.0" width="186.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="748.7" y="910.0">inet_sendmsg</text>
</g>
<g>
<title>lock_sock_nested (1 samples, 0.09%)</title><rect x="745.7" y="883.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="748.7" y="894.0"></text>
</g>
<g>
<title>tcp_sendmsg (179 samples, 15.67%)</title><rect x="746.7" y="883.0" width="185.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="749.7" y="894.0">tcp_sendmsg</text>
</g>
<g>
<title>sk_stream_alloc_skb (1 samples, 0.09%)</title><rect x="746.7" y="867.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="749.7" y="878.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.09%)</title><rect x="747.8" y="867.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="750.8" y="878.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (177 samples, 15.50%)</title><rect x="748.8" y="867.0" width="182.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="751.8" y="878.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (1 samples, 0.09%)</title><rect x="750.9" y="851.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="753.9" y="862.0"></text>
</g>
<g>
<title>__virt_addr_valid (1 samples, 0.09%)</title><rect x="750.9" y="835.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="753.9" y="846.0"></text>
</g>
<g>
<title>_copy_from_iter_full (2 samples, 0.18%)</title><rect x="751.9" y="851.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="754.9" y="862.0"></text>
</g>
<g>
<title>copy_user_generic_string (1 samples, 0.09%)</title><rect x="751.9" y="835.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="754.9" y="846.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.09%)</title><rect x="752.9" y="835.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="755.9" y="846.0"></text>
</g>
<g>
<title>copyin (1 samples, 0.09%)</title><rect x="754.0" y="851.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="757.0" y="862.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (2 samples, 0.18%)</title><rect x="755.0" y="851.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="758.0" y="862.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (1 samples, 0.09%)</title><rect x="755.0" y="835.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="758.0" y="846.0"></text>
</g>
<g>
<title>ksize (1 samples, 0.09%)</title><rect x="756.0" y="835.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="759.0" y="846.0"></text>
</g>
<g>
<title>tcp_chrono_start (1 samples, 0.09%)</title><rect x="757.1" y="851.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="760.1" y="862.0"></text>
</g>
<g>
<title>tcp_push (164 samples, 14.36%)</title><rect x="758.1" y="851.0" width="169.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="761.1" y="862.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (163 samples, 14.27%)</title><rect x="758.1" y="835.0" width="168.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="761.1" y="846.0">__tcp_push_pending_fra..</text>
</g>
<g>
<title>sched_clock_cpu (1 samples, 0.09%)</title><rect x="759.1" y="819.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="762.1" y="830.0"></text>
</g>
<g>
<title>tcp_write_xmit (161 samples, 14.10%)</title><rect x="760.2" y="819.0" width="166.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="763.2" y="830.0">tcp_write_xmit</text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.09%)</title><rect x="762.2" y="803.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="765.2" y="814.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (1 samples, 0.09%)</title><rect x="763.3" y="803.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="766.3" y="814.0"></text>
</g>
<g>
<title>rb_first (1 samples, 0.09%)</title><rect x="764.3" y="803.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="767.3" y="814.0"></text>
</g>
<g>
<title>sched_clock_cpu (1 samples, 0.09%)</title><rect x="765.3" y="803.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="768.3" y="814.0"></text>
</g>
<g>
<title>sched_clock (1 samples, 0.09%)</title><rect x="765.3" y="787.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="768.3" y="798.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (1 samples, 0.09%)</title><rect x="765.3" y="771.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="768.3" y="782.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (1 samples, 0.09%)</title><rect x="765.3" y="755.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="768.3" y="766.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (1 samples, 0.09%)</title><rect x="766.4" y="803.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="769.4" y="814.0"></text>
</g>
<g>
<title>rb_insert_color (1 samples, 0.09%)</title><rect x="766.4" y="787.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="769.4" y="798.0"></text>
</g>
<g>
<title>tcp_rearm_rto (1 samples, 0.09%)</title><rect x="767.4" y="803.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="770.4" y="814.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.09%)</title><rect x="768.4" y="803.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="771.4" y="814.0"></text>
</g>
<g>
<title>__usecs_to_jiffies (1 samples, 0.09%)</title><rect x="768.4" y="787.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="771.4" y="798.0"></text>
</g>
<g>
<title>tcp_transmit_skb (151 samples, 13.22%)</title><rect x="769.5" y="803.0" width="156.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="772.5" y="814.0">tcp_transmit_skb</text>
</g>
<g>
<title>__tcp_select_window (1 samples, 0.09%)</title><rect x="770.5" y="787.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="773.5" y="798.0"></text>
</g>
<g>
<title>ip_copy_addrs (1 samples, 0.09%)</title><rect x="771.5" y="787.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="774.5" y="798.0"></text>
</g>
<g>
<title>ip_queue_xmit (146 samples, 12.78%)</title><rect x="772.6" y="787.0" width="150.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="775.6" y="798.0">ip_queue_xmit</text>
</g>
<g>
<title>ip_local_out (145 samples, 12.70%)</title><rect x="772.6" y="771.0" width="149.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="775.6" y="782.0">ip_local_out</text>
</g>
<g>
<title>ip_output (143 samples, 12.52%)</title><rect x="773.6" y="755.0" width="147.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="776.6" y="766.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (142 samples, 12.43%)</title><rect x="773.6" y="739.0" width="146.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="776.6" y="750.0">ip_finish_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.18%)</title><rect x="774.6" y="723.0" width="2.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="777.6" y="734.0"></text>
</g>
<g>
<title>ip_finish_output2 (139 samples, 12.17%)</title><rect x="776.7" y="723.0" width="143.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="779.7" y="734.0">ip_finish_output2</text>
</g>
<g>
<title>__local_bh_enable_ip (130 samples, 11.38%)</title><rect x="779.8" y="707.0" width="134.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="782.8" y="718.0">__local_bh_enable..</text>
</g>
<g>
<title>do_softirq.part.17 (130 samples, 11.38%)</title><rect x="779.8" y="691.0" width="134.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="782.8" y="702.0">do_softirq.part.17</text>
</g>
<g>
<title>do_softirq_own_stack (128 samples, 11.21%)</title><rect x="781.9" y="675.0" width="132.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="784.9" y="686.0">do_softirq_own_s..</text>
</g>
<g>
<title>__softirqentry_text_start (128 samples, 11.21%)</title><rect x="781.9" y="659.0" width="132.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="784.9" y="670.0">__softirqentry_t..</text>
</g>
<g>
<title>net_rx_action (127 samples, 11.12%)</title><rect x="782.9" y="643.0" width="131.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="785.9" y="654.0">net_rx_action</text>
</g>
<g>
<title>__kfree_skb_flush (1 samples, 0.09%)</title><rect x="783.9" y="627.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="786.9" y="638.0"></text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.09%)</title><rect x="785.0" y="627.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="788.0" y="638.0"></text>
</g>
<g>
<title>process_backlog (124 samples, 10.86%)</title><rect x="786.0" y="627.0" width="128.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="789.0" y="638.0">process_backlog</text>
</g>
<g>
<title>__netif_receive_skb (124 samples, 10.86%)</title><rect x="786.0" y="611.0" width="128.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="789.0" y="622.0">__netif_receive_..</text>
</g>
<g>
<title>__netif_receive_skb_core (124 samples, 10.86%)</title><rect x="786.0" y="595.0" width="128.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="789.0" y="606.0">__netif_receive_..</text>
</g>
<g>
<title>ip_rcv (124 samples, 10.86%)</title><rect x="786.0" y="579.0" width="128.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="789.0" y="590.0">ip_rcv</text>
</g>
<g>
<title>ip_rcv_finish (124 samples, 10.86%)</title><rect x="786.0" y="563.0" width="128.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="789.0" y="574.0">ip_rcv_finish</text>
</g>
<g>
<title>ip_local_deliver (124 samples, 10.86%)</title><rect x="786.0" y="547.0" width="128.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="789.0" y="558.0">ip_local_deliver</text>
</g>
<g>
<title>ip_local_deliver_finish (124 samples, 10.86%)</title><rect x="786.0" y="531.0" width="128.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="789.0" y="542.0">ip_local_deliver..</text>
</g>
<g>
<title>__raw_callee_save___pv_queued_spin_unlock (1 samples, 0.09%)</title><rect x="788.1" y="515.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="791.1" y="526.0"></text>
</g>
<g>
<title>tcp_v4_rcv (121 samples, 10.60%)</title><rect x="789.1" y="515.0" width="125.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="792.1" y="526.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (4 samples, 0.35%)</title><rect x="791.2" y="499.0" width="4.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="794.2" y="510.0"></text>
</g>
<g>
<title>inet_ehashfn (1 samples, 0.09%)</title><rect x="794.3" y="483.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="797.3" y="494.0"></text>
</g>
<g>
<title>tcp_filter (2 samples, 0.18%)</title><rect x="795.3" y="499.0" width="2.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="798.3" y="510.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (2 samples, 0.18%)</title><rect x="795.3" y="483.0" width="2.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="798.3" y="494.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (1 samples, 0.09%)</title><rect x="795.3" y="467.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="798.3" y="478.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (1 samples, 0.09%)</title><rect x="796.3" y="467.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="799.3" y="478.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (112 samples, 9.81%)</title><rect x="797.4" y="499.0" width="115.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="800.4" y="510.0">tcp_v4_do_rcv</text>
</g>
<g>
<title>tcp_check_space (1 samples, 0.09%)</title><rect x="797.4" y="483.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="800.4" y="494.0"></text>
</g>
<g>
<title>tcp_data_queue (2 samples, 0.18%)</title><rect x="798.4" y="483.0" width="2.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="801.4" y="494.0"></text>
</g>
<g>
<title>tcp_rcv_established (109 samples, 9.54%)</title><rect x="800.5" y="483.0" width="112.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="803.5" y="494.0">tcp_rcv_establ..</text>
</g>
<g>
<title>bictcp_cong_avoid (1 samples, 0.09%)</title><rect x="801.5" y="467.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="804.5" y="478.0"></text>
</g>
<g>
<title>sk_forced_mem_schedule (1 samples, 0.09%)</title><rect x="802.5" y="467.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="805.5" y="478.0"></text>
</g>
<g>
<title>sock_def_readable (5 samples, 0.44%)</title><rect x="803.6" y="467.0" width="5.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="806.6" y="478.0"></text>
</g>
<g>
<title>__wake_up_sync_key (4 samples, 0.35%)</title><rect x="804.6" y="451.0" width="4.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="807.6" y="462.0"></text>
</g>
<g>
<title>__wake_up_common_lock (4 samples, 0.35%)</title><rect x="804.6" y="435.0" width="4.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="807.6" y="446.0"></text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (4 samples, 0.35%)</title><rect x="804.6" y="419.0" width="4.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="807.6" y="430.0"></text>
</g>
<g>
<title>tcp_ack (13 samples, 1.14%)</title><rect x="808.7" y="467.0" width="13.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="811.7" y="478.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (10 samples, 0.88%)</title><rect x="811.8" y="451.0" width="10.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="814.8" y="462.0"></text>
</g>
<g>
<title>__kfree_skb (5 samples, 0.44%)</title><rect x="813.9" y="435.0" width="5.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="816.9" y="446.0"></text>
</g>
<g>
<title>skb_release_all (5 samples, 0.44%)</title><rect x="813.9" y="419.0" width="5.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="816.9" y="430.0"></text>
</g>
<g>
<title>skb_release_data (2 samples, 0.18%)</title><rect x="813.9" y="403.0" width="2.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="816.9" y="414.0"></text>
</g>
<g>
<title>skb_free_head (1 samples, 0.09%)</title><rect x="814.9" y="387.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="817.9" y="398.0"></text>
</g>
<g>
<title>kfree (1 samples, 0.09%)</title><rect x="814.9" y="371.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="817.9" y="382.0"></text>
</g>
<g>
<title>skb_release_head_state (3 samples, 0.26%)</title><rect x="816.0" y="403.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="819.0" y="414.0"></text>
</g>
<g>
<title>bictcp_acked (1 samples, 0.09%)</title><rect x="819.1" y="435.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="822.1" y="446.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.09%)</title><rect x="820.1" y="435.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="823.1" y="446.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (1 samples, 0.09%)</title><rect x="821.1" y="435.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="824.1" y="446.0"></text>
</g>
<g>
<title>tcp_data_queue (85 samples, 7.44%)</title><rect x="822.2" y="467.0" width="87.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="825.2" y="478.0">tcp_data_q..</text>
</g>
<g>
<title>dst_release (1 samples, 0.09%)</title><rect x="825.3" y="451.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="828.3" y="462.0"></text>
</g>
<g>
<title>sock_def_readable (80 samples, 7.01%)</title><rect x="826.3" y="451.0" width="82.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="829.3" y="462.0">sock_def_..</text>
</g>
<g>
<title>__wake_up_sync_key (80 samples, 7.01%)</title><rect x="826.3" y="435.0" width="82.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="829.3" y="446.0">__wake_up..</text>
</g>
<g>
<title>__wake_up_common_lock (80 samples, 7.01%)</title><rect x="826.3" y="419.0" width="82.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="829.3" y="430.0">__wake_up..</text>
</g>
<g>
<title>_raw_spin_unlock_irqrestore (80 samples, 7.01%)</title><rect x="826.3" y="403.0" width="82.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="829.3" y="414.0">_raw_spin..</text>
</g>
<g>
<title>tcp_queue_rcv (1 samples, 0.09%)</title><rect x="908.9" y="451.0" width="1.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="911.9" y="462.0"></text>
</g>
<g>
<title>tcp_rate_gen (1 samples, 0.09%)</title><rect x="910.0" y="467.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="913.0" y="478.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (2 samples, 0.18%)</title><rect x="911.0" y="467.0" width="2.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="914.0" y="478.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (1 samples, 0.09%)</title><rect x="913.1" y="499.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="916.1" y="510.0"></text>
</g>
<g>
<title>dev_queue_xmit (6 samples, 0.53%)</title><rect x="914.1" y="707.0" width="6.2" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="917.1" y="718.0"></text>
</g>
<g>
<title>__dev_queue_xmit (6 samples, 0.53%)</title><rect x="914.1" y="691.0" width="6.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="917.1" y="702.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (3 samples, 0.26%)</title><rect x="915.1" y="675.0" width="3.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="918.1" y="686.0"></text>
</g>
<g>
<title>loopback_xmit (3 samples, 0.26%)</title><rect x="915.1" y="659.0" width="3.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="918.1" y="670.0"></text>
</g>
<g>
<title>eth_type_trans (1 samples, 0.09%)</title><rect x="915.1" y="643.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="918.1" y="654.0"></text>
</g>
<g>
<title>netif_rx (2 samples, 0.18%)</title><rect x="916.2" y="643.0" width="2.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="919.2" y="654.0"></text>
</g>
<g>
<title>netif_rx_internal (2 samples, 0.18%)</title><rect x="916.2" y="627.0" width="2.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="919.2" y="638.0"></text>
</g>
<g>
<title>enqueue_to_backlog (2 samples, 0.18%)</title><rect x="916.2" y="611.0" width="2.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="919.2" y="622.0"></text>
</g>
<g>
<title>validate_xmit_skb (1 samples, 0.09%)</title><rect x="918.2" y="675.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="921.2" y="686.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (1 samples, 0.09%)</title><rect x="919.3" y="675.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="922.3" y="686.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.09%)</title><rect x="920.3" y="739.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="923.3" y="750.0"></text>
</g>
<g>
<title>ip_send_check (1 samples, 0.09%)</title><rect x="921.3" y="755.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="924.3" y="766.0"></text>
</g>
<g>
<title>ipv4_dst_check (1 samples, 0.09%)</title><rect x="922.4" y="771.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="925.4" y="782.0"></text>
</g>
<g>
<title>skb_clone (2 samples, 0.18%)</title><rect x="923.4" y="787.0" width="2.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="926.4" y="798.0"></text>
</g>
<g>
<title>__skb_clone (1 samples, 0.09%)</title><rect x="924.4" y="771.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="927.4" y="782.0"></text>
</g>
<g>
<title>tcp_tso_segs (1 samples, 0.09%)</title><rect x="925.5" y="803.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="928.5" y="814.0"></text>
</g>
<g>
<title>tcp_write_xmit (1 samples, 0.09%)</title><rect x="926.5" y="835.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="929.5" y="846.0"></text>
</g>
<g>
<title>tcp_send_mss (4 samples, 0.35%)</title><rect x="927.5" y="851.0" width="4.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="930.5" y="862.0"></text>
</g>
<g>
<title>ipv4_mtu (1 samples, 0.09%)</title><rect x="927.5" y="835.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="930.5" y="846.0"></text>
</g>
<g>
<title>tcp_current_mss (3 samples, 0.26%)</title><rect x="928.6" y="835.0" width="3.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="931.6" y="846.0"></text>
</g>
<g>
<title>security_socket_sendmsg (1 samples, 0.09%)</title><rect x="931.7" y="899.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="934.7" y="910.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="932.7" y="979.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="935.7" y="990.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="932.7" y="963.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="935.7" y="974.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="932.7" y="947.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="935.7" y="958.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.18%)</title><rect x="933.7" y="995.0" width="2.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="936.7" y="1006.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.18%)</title><rect x="933.7" y="979.0" width="2.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="936.7" y="990.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.18%)</title><rect x="933.7" y="963.0" width="2.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="936.7" y="974.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (2 samples, 0.18%)</title><rect x="935.8" y="1011.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="938.8" y="1022.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (2 samples, 0.18%)</title><rect x="935.8" y="995.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="938.8" y="1006.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (1 samples, 0.09%)</title><rect x="936.8" y="979.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="939.8" y="990.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.09%)</title><rect x="936.8" y="963.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="939.8" y="974.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.18%)</title><rect x="937.9" y="1011.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="940.9" y="1022.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (2 samples, 0.18%)</title><rect x="937.9" y="995.0" width="2.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="940.9" y="1006.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.18%)</title><rect x="937.9" y="979.0" width="2.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="940.9" y="990.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (1 samples, 0.09%)</title><rect x="939.9" y="1059.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="942.9" y="1070.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.09%)</title><rect x="939.9" y="1043.0" width="1.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="942.9" y="1054.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="939.9" y="1027.0" width="1.1" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="942.9" y="1038.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="939.9" y="1011.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="942.9" y="1022.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="939.9" y="995.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="942.9" y="1006.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="939.9" y="979.0" width="1.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="942.9" y="990.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.getMethodWrapper (70 samples, 6.13%)</title><rect x="941.0" y="1059.0" width="72.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="944.0" y="1070.0">ru/mail/..</text>
</g>
<g>
<title>ru/mail/polis/dao/DAOImpl.getWithTimestamp (64 samples, 5.60%)</title><rect x="942.0" y="1043.0" width="66.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="945.0" y="1054.0">ru/mail..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (59 samples, 5.17%)</title><rect x="942.0" y="1027.0" width="61.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="945.0" y="1038.0">org/ro..</text>
</g>
<g>
<title>org/rocksdb/RocksDB.get (59 samples, 5.17%)</title><rect x="942.0" y="1011.0" width="61.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="945.0" y="1022.0">org/ro..</text>
</g>
<g>
<title>Java_org_rocksdb_RocksDB_get__J_3BII (56 samples, 4.90%)</title><rect x="942.0" y="995.0" width="57.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="945.0" y="1006.0">Java_o..</text>
</g>
<g>
<title>/tmp/librocksdbjni13374039931298556330.so (2 samples, 0.18%)</title><rect x="942.0" y="979.0" width="2.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="945.0" y="990.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="943.0" y="963.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="946.0" y="974.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="943.0" y="947.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="946.0" y="958.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="943.0" y="931.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="946.0" y="942.0"></text>
</g>
<g>
<title>operator new[](unsigned long) (1 samples, 0.09%)</title><rect x="944.1" y="979.0" width="1.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="947.1" y="990.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (1 samples, 0.09%)</title><rect x="945.1" y="979.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="948.1" y="990.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (50 samples, 4.38%)</title><rect x="946.1" y="979.0" width="51.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="949.1" y="990.0">rocks..</text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (1 samples, 0.09%)</title><rect x="948.2" y="963.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="951.2" y="974.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, std::string*) (37 samples, 3.24%)</title><rect x="949.2" y="963.0" width="38.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="952.2" y="974.0">roc..</text>
</g>
<g>
<title>rocksdb::Cleanable::Cleanable() (1 samples, 0.09%)</title><rect x="949.2" y="947.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="952.2" y="958.0"></text>
</g>
<g>
<title>rocksdb::DB::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, std::string*) (35 samples, 3.06%)</title><rect x="950.3" y="947.0" width="36.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="953.3" y="958.0">roc..</text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (35 samples, 3.06%)</title><rect x="950.3" y="931.0" width="36.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="953.3" y="942.0">roc..</text>
</g>
<g>
<title>_init (2 samples, 0.18%)</title><rect x="950.3" y="915.0" width="2.0" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="953.3" y="926.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (1 samples, 0.09%)</title><rect x="952.3" y="915.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="955.3" y="926.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetAndRefSuperVersion(rocksdb::ColumnFamilyData*) (1 samples, 0.09%)</title><rect x="953.4" y="915.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="956.4" y="926.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, bool*, rocksdb::ReadCallback*, bool*) (29 samples, 2.54%)</title><rect x="954.4" y="915.0" width="30.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="957.4" y="926.0">ro..</text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.18%)</title><rect x="955.4" y="899.0" width="2.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="958.4" y="910.0"></text>
</g>
<g>
<title>_init (1 samples, 0.09%)</title><rect x="957.5" y="899.0" width="1.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="960.5" y="910.0"></text>
</g>
<g>
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion(rocksdb::InstrumentedMutex*) (5 samples, 0.44%)</title><rect x="958.5" y="899.0" width="5.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="961.5" y="910.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::Instance() (1 samples, 0.09%)</title><rect x="959.6" y="883.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="962.6" y="894.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.09%)</title><rect x="960.6" y="883.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="963.6" y="894.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="960.6" y="867.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="963.6" y="878.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="960.6" y="851.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="963.6" y="862.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="960.6" y="835.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="963.6" y="846.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (2 samples, 0.18%)</title><rect x="961.6" y="883.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="964.6" y="894.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal() (1 samples, 0.09%)</title><rect x="962.7" y="867.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="965.7" y="878.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion(rocksdb::ColumnFamilyData*, rocksdb::SuperVersion*) (1 samples, 0.09%)</title><rect x="963.7" y="899.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="966.7" y="910.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::CompareAndSwap(void*, void*&amp;) (1 samples, 0.09%)</title><rect x="963.7" y="883.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="966.7" y="894.0"></text>
</g>
<g>
<title>rocksdb::MemTable::Get(rocksdb::LookupKey const&amp;, std::string*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, unsigned long*, rocksdb::ReadOptions const&amp;, rocksdb::ReadCallback*, bool*) (17 samples, 1.49%)</title><rect x="964.7" y="899.0" width="17.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="967.7" y="910.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni13374039931298556330.so (17 samples, 1.49%)</title><rect x="964.7" y="883.0" width="17.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="967.7" y="894.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni13374039931298556330.so (2 samples, 0.18%)</title><rect x="965.8" y="867.0" width="2.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="968.8" y="878.0"></text>
</g>
<g>
<title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::FindGreaterOrEqual(char const*) const (11 samples, 0.96%)</title><rect x="967.8" y="867.0" width="11.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="970.8" y="878.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (3 samples, 0.26%)</title><rect x="972.0" y="851.0" width="3.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="975.0" y="862.0"></text>
</g>
<g>
<title>/tmp/librocksdbjni13374039931298556330.so (2 samples, 0.18%)</title><rect x="973.0" y="835.0" width="2.1" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="976.0" y="846.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="974.0" y="819.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="977.0" y="830.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="974.0" y="803.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="977.0" y="814.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="974.0" y="787.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="977.0" y="798.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (4 samples, 0.35%)</title><rect x="975.1" y="851.0" width="4.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="978.1" y="862.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (4 samples, 0.35%)</title><rect x="975.1" y="835.0" width="4.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="978.1" y="846.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (4 samples, 0.35%)</title><rect x="975.1" y="819.0" width="4.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="978.1" y="830.0"></text>
</g>
<g>
<title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (1 samples, 0.09%)</title><rect x="979.2" y="867.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="982.2" y="878.0"></text>
</g>
<g>
<title>std::string::assign(char const*, unsigned long) (2 samples, 0.18%)</title><rect x="980.2" y="867.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="983.2" y="878.0"></text>
</g>
<g>
<title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.09%)</title><rect x="982.3" y="899.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="985.3" y="910.0"></text>
</g>
<g>
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap(unsigned int, void*) (1 samples, 0.09%)</title><rect x="983.3" y="899.0" width="1.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="986.3" y="910.0"></text>
</g>
<g>
<title>rocksdb::LookupKey::LookupKey(rocksdb::Slice const&amp;, unsigned long) (1 samples, 0.09%)</title><rect x="984.4" y="915.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="987.4" y="926.0"></text>
</g>
<g>
<title>rocksdb::PerfStepTimer::Start() (1 samples, 0.09%)</title><rect x="985.4" y="915.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="988.4" y="926.0"></text>
</g>
<g>
<title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1 samples, 0.09%)</title><rect x="986.4" y="947.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="989.4" y="958.0"></text>
</g>
<g>
<title>rocksdb::JniUtil::createJavaByteArrayWithSizeCheck(JNIEnv_*, char const*, unsigned long) (10 samples, 0.88%)</title><rect x="987.5" y="963.0" width="10.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="990.5" y="974.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.09%)</title><rect x="987.5" y="947.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="990.5" y="958.0"></text>
</g>
<g>
<title>jni_ExceptionCheck (1 samples, 0.09%)</title><rect x="988.5" y="947.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="991.5" y="958.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="988.5" y="931.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="991.5" y="942.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="988.5" y="915.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="991.5" y="926.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="988.5" y="899.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="991.5" y="910.0"></text>
</g>
<g>
<title>jni_NewByteArray (6 samples, 0.53%)</title><rect x="989.5" y="947.0" width="6.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="992.5" y="958.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.26%)</title><rect x="989.5" y="931.0" width="3.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.5" y="942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.26%)</title><rect x="992.6" y="931.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="995.6" y="942.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.09%)</title><rect x="994.7" y="915.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="997.7" y="926.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="994.7" y="899.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="997.7" y="910.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="994.7" y="883.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="997.7" y="894.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="994.7" y="867.0" width="1.0" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="997.7" y="878.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.18%)</title><rect x="995.7" y="947.0" width="2.1" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="998.7" y="958.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (1 samples, 0.09%)</title><rect x="995.7" y="931.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="998.7" y="942.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.09%)</title><rect x="996.8" y="931.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="999.8" y="942.0"></text>
</g>
<g>
<title>std::string::_Rep::_M_destroy(std::allocator&lt;char&gt; const&amp;) (1 samples, 0.09%)</title><rect x="997.8" y="979.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1000.8" y="990.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="998.8" y="979.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1001.8" y="990.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="998.8" y="963.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1001.8" y="974.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="998.8" y="947.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1001.8" y="958.0"></text>
</g>
<g>
<title>__malloc (1 samples, 0.09%)</title><rect x="999.9" y="995.0" width="1.0" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1002.9" y="1006.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="999.9" y="979.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1002.9" y="990.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="999.9" y="963.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1002.9" y="974.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="999.9" y="947.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1002.9" y="958.0"></text>
</g>
<g>
<title>rocksdb_get_helper(JNIEnv_*, rocksdb::DB*, rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, _jbyteArray*, int, int) (1 samples, 0.09%)</title><rect x="1000.9" y="995.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1003.9" y="1006.0"></text>
</g>
<g>
<title>std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator&lt;char&gt; const&amp;) (1 samples, 0.09%)</title><rect x="1001.9" y="995.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1004.9" y="1006.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1001.9" y="979.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1004.9" y="990.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1001.9" y="963.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1004.9" y="974.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1001.9" y="947.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1004.9" y="958.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.shift (4 samples, 0.35%)</title><rect x="1003.0" y="1027.0" width="4.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1006.0" y="1038.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/ByteBufferUtils.fromByteToArray (4 samples, 0.35%)</title><rect x="1003.0" y="1011.0" width="4.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1006.0" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.get (1 samples, 0.09%)</title><rect x="1003.0" y="995.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1006.0" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.09%)</title><rect x="1003.0" y="979.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1006.0" y="990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.26%)</title><rect x="1004.0" y="995.0" width="3.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1007.0" y="1006.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.18%)</title><rect x="1005.0" y="979.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1008.0" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.18%)</title><rect x="1005.0" y="963.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1008.0" y="974.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1006.1" y="947.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1009.1" y="958.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="1006.1" y="931.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1009.1" y="942.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="1006.1" y="915.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1009.1" y="926.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.09%)</title><rect x="1006.1" y="899.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1009.1" y="910.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RecordTimestamp.fromBytes (1 samples, 0.09%)</title><rect x="1007.1" y="1027.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1010.1" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.getLong (1 samples, 0.09%)</title><rect x="1007.1" y="1011.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1010.1" y="1022.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RecordTimestamp.toBytes (5 samples, 0.44%)</title><rect x="1008.1" y="1043.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1011.1" y="1054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.09%)</title><rect x="1008.1" y="1027.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1011.1" y="1038.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1008.1" y="1011.0" width="1.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1011.1" y="1022.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1008.1" y="995.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1011.1" y="1006.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1008.1" y="979.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1011.1" y="990.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="1008.1" y="963.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1011.1" y="974.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.09%)</title><rect x="1008.1" y="947.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1011.1" y="958.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.09%)</title><rect x="1008.1" y="931.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1011.1" y="942.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.putLong (4 samples, 0.35%)</title><rect x="1009.2" y="1027.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1012.2" y="1038.0"></text>
</g>
<g>
<title>java/nio/Buffer.nextPutIndex (4 samples, 0.35%)</title><rect x="1009.2" y="1011.0" width="4.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1012.2" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.18%)</title><rect x="1010.2" y="995.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1013.2" y="1006.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1012.3" y="995.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1015.3" y="1006.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1012.3" y="979.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1015.3" y="990.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1012.3" y="963.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1015.3" y="974.0"></text>
</g>
<g>
<title>ru/mail/polis/service/luckydaemon/RequestCoordinators.responsesProcessing (14 samples, 1.23%)</title><rect x="1013.3" y="1075.0" width="14.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1016.3" y="1086.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RecordTimestamp.getValueInByteFormat (3 samples, 0.26%)</title><rect x="1013.3" y="1059.0" width="3.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1016.3" y="1070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (3 samples, 0.26%)</title><rect x="1013.3" y="1043.0" width="3.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1016.3" y="1054.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1014.3" y="1027.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1017.3" y="1038.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1014.3" y="1011.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1017.3" y="1022.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1014.3" y="995.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1017.3" y="1006.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1015.4" y="1027.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1018.4" y="1038.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1015.4" y="1011.0" width="1.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1018.4" y="1022.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1015.4" y="995.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1018.4" y="1006.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RecordTimestamp.mergeRecords (11 samples, 0.96%)</title><rect x="1016.4" y="1059.0" width="11.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1019.4" y="1070.0"></text>
</g>
<g>
<title>java/util/Collection.stream (1 samples, 0.09%)</title><rect x="1016.4" y="1043.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1019.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.09%)</title><rect x="1016.4" y="1027.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1019.4" y="1038.0"></text>
</g>
<g>
<title>java/util/Optional.orElseGet (1 samples, 0.09%)</title><rect x="1017.4" y="1043.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1020.4" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (4 samples, 0.35%)</title><rect x="1018.5" y="1043.0" width="4.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1021.5" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.&lt;init&gt; (4 samples, 0.35%)</title><rect x="1018.5" y="1027.0" width="4.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1021.5" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$StatelessOp.&lt;init&gt; (4 samples, 0.35%)</title><rect x="1018.5" y="1011.0" width="4.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1021.5" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.&lt;init&gt; (4 samples, 0.35%)</title><rect x="1018.5" y="995.0" width="4.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1021.5" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.&lt;init&gt; (4 samples, 0.35%)</title><rect x="1018.5" y="979.0" width="4.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1021.5" y="990.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.09%)</title><rect x="1020.5" y="963.0" width="1.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1023.5" y="974.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1021.6" y="963.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1024.6" y="974.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1021.6" y="947.0" width="1.0" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1024.6" y="958.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1021.6" y="931.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1024.6" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (5 samples, 0.44%)</title><rect x="1022.6" y="1043.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1025.6" y="1054.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (5 samples, 0.44%)</title><rect x="1022.6" y="1027.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1025.6" y="1038.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (5 samples, 0.44%)</title><rect x="1022.6" y="1011.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1025.6" y="1022.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (5 samples, 0.44%)</title><rect x="1022.6" y="995.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1025.6" y="1006.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.35%)</title><rect x="1022.6" y="979.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1025.6" y="990.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (3 samples, 0.26%)</title><rect x="1022.6" y="963.0" width="3.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1025.6" y="974.0"></text>
</g>
<g>
<title>java/util/ArrayList$ArrayListSpliterator.forEachRemaining (2 samples, 0.18%)</title><rect x="1022.6" y="947.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1025.6" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.accept (1 samples, 0.09%)</title><rect x="1023.6" y="931.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1026.6" y="942.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.accept (1 samples, 0.09%)</title><rect x="1023.6" y="915.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1026.6" y="926.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.begin (1 samples, 0.09%)</title><rect x="1024.7" y="947.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1027.7" y="958.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapSink (1 samples, 0.09%)</title><rect x="1025.7" y="963.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1028.7" y="974.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2.opWrapSink (1 samples, 0.09%)</title><rect x="1025.7" y="947.0" width="1.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1028.7" y="958.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$2$1.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1025.7" y="931.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1028.7" y="942.0"></text>
</g>
<g>
<title>java/util/stream/Sink$ChainedReference.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1025.7" y="915.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1028.7" y="926.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1025.7" y="899.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1028.7" y="910.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1025.7" y="883.0" width="1.0" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1028.7" y="894.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1025.7" y="867.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1028.7" y="878.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.get (1 samples, 0.09%)</title><rect x="1026.7" y="979.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1029.7" y="990.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$2ReducingSink.get (1 samples, 0.09%)</title><rect x="1026.7" y="963.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1029.7" y="974.0"></text>
</g>
<g>
<title>java/util/Optional.of (1 samples, 0.09%)</title><rect x="1026.7" y="947.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1029.7" y="958.0"></text>
</g>
<g>
<title>java/util/Optional.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1026.7" y="931.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1029.7" y="942.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.09%)</title><rect x="1026.7" y="915.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1029.7" y="926.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (1 samples, 0.09%)</title><rect x="1026.7" y="899.0" width="1.1" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1029.7" y="910.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (6 samples, 0.53%)</title><rect x="1027.8" y="1139.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1030.8" y="1150.0"></text>
</g>
<g>
<title>java/util/HashMap.get (6 samples, 0.53%)</title><rect x="1027.8" y="1123.0" width="6.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1030.8" y="1134.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.18%)</title><rect x="1027.8" y="1107.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1030.8" y="1118.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.35%)</title><rect x="1029.8" y="1107.0" width="4.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1032.8" y="1118.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.35%)</title><rect x="1029.8" y="1091.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1032.8" y="1102.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.35%)</title><rect x="1029.8" y="1075.0" width="4.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1032.8" y="1086.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.26%)</title><rect x="1030.9" y="1059.0" width="3.1" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1033.9" y="1070.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (5 samples, 0.44%)</title><rect x="1034.0" y="1139.0" width="5.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1037.0" y="1150.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.44%)</title><rect x="1034.0" y="1123.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1037.0" y="1134.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.44%)</title><rect x="1034.0" y="1107.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1037.0" y="1118.0"></text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (1 samples, 0.09%)</title><rect x="1034.0" y="1091.0" width="1.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1037.0" y="1102.0"></text>
</g>
<g>
<title>itable stub (4 samples, 0.35%)</title><rect x="1035.0" y="1091.0" width="4.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1038.0" y="1102.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (11 samples, 0.96%)</title><rect x="1039.1" y="1171.0" width="11.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1042.1" y="1182.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.18%)</title><rect x="1040.2" y="1155.0" width="2.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1043.2" y="1166.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.18%)</title><rect x="1040.2" y="1139.0" width="2.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1043.2" y="1150.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (7 samples, 0.61%)</title><rect x="1042.2" y="1155.0" width="7.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1045.2" y="1166.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.26%)</title><rect x="1046.4" y="1139.0" width="3.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1049.4" y="1150.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.26%)</title><rect x="1046.4" y="1123.0" width="3.1" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1049.4" y="1134.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.26%)</title><rect x="1046.4" y="1107.0" width="3.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1049.4" y="1118.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1049.5" y="1155.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1052.5" y="1166.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1049.5" y="1139.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1052.5" y="1150.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1049.5" y="1123.0" width="1.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1052.5" y="1134.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 0.26%)</title><rect x="1050.5" y="1171.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1053.5" y="1182.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.09%)</title><rect x="1052.6" y="1155.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1055.6" y="1166.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.09%)</title><rect x="1052.6" y="1139.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1055.6" y="1150.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.26%)</title><rect x="1053.6" y="1171.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1056.6" y="1182.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.26%)</title><rect x="1053.6" y="1155.0" width="3.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1056.6" y="1166.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (2 samples, 0.18%)</title><rect x="1056.7" y="1187.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1059.7" y="1198.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (39 samples, 3.42%)</title><rect x="1058.8" y="1187.0" width="40.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1061.8" y="1198.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (38 samples, 3.33%)</title><rect x="1059.8" y="1171.0" width="39.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1062.8" y="1182.0">one..</text>
</g>
<g>
<title>[unknown] (15 samples, 1.31%)</title><rect x="1062.9" y="1155.0" width="15.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="1065.9" y="1166.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 1.31%)</title><rect x="1062.9" y="1139.0" width="15.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1065.9" y="1150.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (12 samples, 1.05%)</title><rect x="1062.9" y="1123.0" width="12.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1065.9" y="1134.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.26%)</title><rect x="1062.9" y="1107.0" width="3.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1065.9" y="1118.0"></text>
</g>
<g>
<title>__memmove_sse2_unaligned (1 samples, 0.09%)</title><rect x="1066.0" y="1107.0" width="1.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1069.0" y="1118.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (8 samples, 0.70%)</title><rect x="1067.0" y="1107.0" width="8.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1070.0" y="1118.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.09%)</title><rect x="1068.1" y="1091.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1071.1" y="1102.0"></text>
</g>
<g>
<title>ThreadStateTransition::trans_and_fence(JavaThreadState, JavaThreadState) [clone .constprop.298] (2 samples, 0.18%)</title><rect x="1069.1" y="1091.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1072.1" y="1102.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1070.1" y="1075.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1073.1" y="1086.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1070.1" y="1059.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1073.1" y="1070.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1070.1" y="1043.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1073.1" y="1054.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.297] (1 samples, 0.09%)</title><rect x="1071.2" y="1091.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1074.2" y="1102.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.18%)</title><rect x="1072.2" y="1091.0" width="2.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="1075.2" y="1102.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1074.3" y="1091.0" width="1.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1077.3" y="1102.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1074.3" y="1075.0" width="1.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1077.3" y="1086.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1074.3" y="1059.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1077.3" y="1070.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.09%)</title><rect x="1074.3" y="1043.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1077.3" y="1054.0"></text>
</g>
<g>
<title>__schedule (1 samples, 0.09%)</title><rect x="1074.3" y="1027.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1077.3" y="1038.0"></text>
</g>
<g>
<title>finish_task_switch (1 samples, 0.09%)</title><rect x="1074.3" y="1011.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1077.3" y="1022.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.26%)</title><rect x="1075.3" y="1123.0" width="3.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1078.3" y="1134.0"></text>
</g>
<g>
<title>recv (17 samples, 1.49%)</title><rect x="1078.4" y="1155.0" width="17.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1081.4" y="1166.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (15 samples, 1.31%)</title><rect x="1080.5" y="1139.0" width="15.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1083.5" y="1150.0"></text>
</g>
<g>
<title>__indirect_thunk_start (1 samples, 0.09%)</title><rect x="1080.5" y="1123.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1083.5" y="1134.0"></text>
</g>
<g>
<title>do_syscall_64 (14 samples, 1.23%)</title><rect x="1081.5" y="1123.0" width="14.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1084.5" y="1134.0"></text>
</g>
<g>
<title>SYSC_recvfrom (1 samples, 0.09%)</title><rect x="1083.6" y="1107.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1086.6" y="1118.0"></text>
</g>
<g>
<title>sys_recvfrom (11 samples, 0.96%)</title><rect x="1084.6" y="1107.0" width="11.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1087.6" y="1118.0"></text>
</g>
<g>
<title>SYSC_recvfrom (10 samples, 0.88%)</title><rect x="1084.6" y="1091.0" width="10.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1087.6" y="1102.0"></text>
</g>
<g>
<title>sock_recvmsg (8 samples, 0.70%)</title><rect x="1085.6" y="1075.0" width="8.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1088.6" y="1086.0"></text>
</g>
<g>
<title>inet_recvmsg (7 samples, 0.61%)</title><rect x="1085.6" y="1059.0" width="7.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1088.6" y="1070.0"></text>
</g>
<g>
<title>tcp_recvmsg (7 samples, 0.61%)</title><rect x="1085.6" y="1043.0" width="7.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1088.6" y="1054.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.09%)</title><rect x="1086.7" y="1027.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1089.7" y="1038.0"></text>
</g>
<g>
<title>kfree_skbmem (1 samples, 0.09%)</title><rect x="1086.7" y="1011.0" width="1.0" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1089.7" y="1022.0"></text>
</g>
<g>
<title>release_sock (1 samples, 0.09%)</title><rect x="1087.7" y="1027.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1090.7" y="1038.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (1 samples, 0.09%)</title><rect x="1087.7" y="1011.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1090.7" y="1022.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (3 samples, 0.26%)</title><rect x="1088.7" y="1027.0" width="3.1" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1091.7" y="1038.0"></text>
</g>
<g>
<title>__check_object_size (1 samples, 0.09%)</title><rect x="1088.7" y="1011.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1091.7" y="1022.0"></text>
</g>
<g>
<title>_copy_to_iter (2 samples, 0.18%)</title><rect x="1089.8" y="1011.0" width="2.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1092.8" y="1022.0"></text>
</g>
<g>
<title>copy_user_generic_string (2 samples, 0.18%)</title><rect x="1089.8" y="995.0" width="2.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1092.8" y="1006.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (1 samples, 0.09%)</title><rect x="1091.8" y="1027.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1094.8" y="1038.0"></text>
</g>
<g>
<title>sched_clock_cpu (1 samples, 0.09%)</title><rect x="1091.8" y="1011.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1094.8" y="1022.0"></text>
</g>
<g>
<title>sched_clock (1 samples, 0.09%)</title><rect x="1091.8" y="995.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1094.8" y="1006.0"></text>
</g>
<g>
<title>kvm_sched_clock_read (1 samples, 0.09%)</title><rect x="1091.8" y="979.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1094.8" y="990.0"></text>
</g>
<g>
<title>pvclock_clocksource_read (1 samples, 0.09%)</title><rect x="1091.8" y="963.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1094.8" y="974.0"></text>
</g>
<g>
<title>tcp_recvmsg (1 samples, 0.09%)</title><rect x="1092.9" y="1059.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1095.9" y="1070.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.09%)</title><rect x="1093.9" y="1075.0" width="1.0" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1096.9" y="1086.0"></text>
</g>
<g>
<title>__fdget (1 samples, 0.09%)</title><rect x="1093.9" y="1059.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1096.9" y="1070.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.09%)</title><rect x="1093.9" y="1043.0" width="1.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1096.9" y="1054.0"></text>
</g>
<g>
<title>__fget (1 samples, 0.09%)</title><rect x="1093.9" y="1027.0" width="1.0" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1096.9" y="1038.0"></text>
</g>
<g>
<title>sockfd_lookup_light (1 samples, 0.09%)</title><rect x="1094.9" y="1091.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1097.9" y="1102.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (3 samples, 0.26%)</title><rect x="1096.0" y="1155.0" width="3.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1099.0" y="1166.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (3 samples, 0.26%)</title><rect x="1096.0" y="1139.0" width="3.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1099.0" y="1150.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (3 samples, 0.26%)</title><rect x="1096.0" y="1123.0" width="3.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1099.0" y="1134.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.09%)</title><rect x="1099.1" y="1219.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1102.1" y="1230.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1100.1" y="1219.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1103.1" y="1230.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1100.1" y="1203.0" width="1.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1103.1" y="1214.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1100.1" y="1187.0" width="1.0" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1103.1" y="1198.0"></text>
</g>
<g>
<title>start_thread (86 samples, 7.53%)</title><rect x="1101.1" y="1235.0" width="88.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1104.1" y="1246.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (86 samples, 7.53%)</title><rect x="1101.1" y="1219.0" width="88.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1104.1" y="1230.0">thread_nat..</text>
</g>
<g>
<title>Thread::call_run() (86 samples, 7.53%)</title><rect x="1101.1" y="1203.0" width="88.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1104.1" y="1214.0">Thread::ca..</text>
</g>
<g>
<title>JavaThread::run() (85 samples, 7.44%)</title><rect x="1101.1" y="1187.0" width="87.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1104.1" y="1198.0">JavaThread..</text>
</g>
<g>
<title>JavaThread::thread_main_inner() (85 samples, 7.44%)</title><rect x="1101.1" y="1171.0" width="87.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1104.1" y="1182.0">JavaThread..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (85 samples, 7.44%)</title><rect x="1101.1" y="1155.0" width="87.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.1" y="1166.0">CompileBro..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (85 samples, 7.44%)</title><rect x="1101.1" y="1139.0" width="87.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1104.1" y="1150.0">CompileBro..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (84 samples, 7.36%)</title><rect x="1101.1" y="1123.0" width="86.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1104.1" y="1134.0">C2Compiler..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (84 samples, 7.36%)</title><rect x="1101.1" y="1107.0" width="86.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1104.1" y="1118.0">Compile::C..</text>
</g>
<g>
<title>Compile::Code_Gen() (39 samples, 3.42%)</title><rect x="1101.1" y="1091.0" width="40.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1104.1" y="1102.0">Com..</text>
</g>
<g>
<title>Compile::Output() (1 samples, 0.09%)</title><rect x="1101.1" y="1075.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.1" y="1086.0"></text>
</g>
<g>
<title>Compile::BuildOopMaps() (1 samples, 0.09%)</title><rect x="1101.1" y="1059.0" width="1.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1104.1" y="1070.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (1 samples, 0.09%)</title><rect x="1102.2" y="1075.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.2" y="1086.0"></text>
</g>
<g>
<title>Matcher::match() (4 samples, 0.35%)</title><rect x="1103.2" y="1075.0" width="4.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.2" y="1086.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (4 samples, 0.35%)</title><rect x="1103.2" y="1059.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1106.2" y="1070.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (3 samples, 0.26%)</title><rect x="1103.2" y="1043.0" width="3.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1106.2" y="1054.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (3 samples, 0.26%)</title><rect x="1103.2" y="1027.0" width="3.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1106.2" y="1038.0"></text>
</g>
<g>
<title>AddPNode::bottom_type() const (1 samples, 0.09%)</title><rect x="1103.2" y="1011.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1106.2" y="1022.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1103.2" y="995.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1106.2" y="1006.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1103.2" y="979.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1106.2" y="990.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1103.2" y="963.0" width="1.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1106.2" y="974.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1104.2" y="1011.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1107.2" y="1022.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1104.2" y="995.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.2" y="1006.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node const*) (1 samples, 0.09%)</title><rect x="1104.2" y="979.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.2" y="990.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.09%)</title><rect x="1104.2" y="963.0" width="1.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.2" y="974.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.09%)</title><rect x="1104.2" y="947.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1107.2" y="958.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.09%)</title><rect x="1105.3" y="1011.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1108.3" y="1022.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.09%)</title><rect x="1105.3" y="995.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.3" y="1006.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.09%)</title><rect x="1105.3" y="979.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1108.3" y="990.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.09%)</title><rect x="1105.3" y="963.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1108.3" y="974.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.09%)</title><rect x="1105.3" y="947.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1108.3" y="958.0"></text>
</g>
<g>
<title>TypeOopPtr::eq(Type const*) const [clone .part.150] (1 samples, 0.09%)</title><rect x="1105.3" y="931.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.3" y="942.0"></text>
</g>
<g>
<title>Node::out_grow(unsigned int) (1 samples, 0.09%)</title><rect x="1106.3" y="1043.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1109.3" y="1054.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="1106.3" y="1027.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1109.3" y="1038.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (5 samples, 0.44%)</title><rect x="1107.3" y="1075.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1110.3" y="1086.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (5 samples, 0.44%)</title><rect x="1107.3" y="1059.0" width="5.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1110.3" y="1070.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.18%)</title><rect x="1108.4" y="1043.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1111.4" y="1054.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (1 samples, 0.09%)</title><rect x="1108.4" y="1027.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1111.4" y="1038.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1108.4" y="1011.0" width="1.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1111.4" y="1022.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1108.4" y="995.0" width="1.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1111.4" y="1006.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1108.4" y="979.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1111.4" y="990.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.09%)</title><rect x="1109.4" y="1027.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1112.4" y="1038.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (1 samples, 0.09%)</title><rect x="1110.4" y="1043.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1113.4" y="1054.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (1 samples, 0.09%)</title><rect x="1110.4" y="1027.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1113.4" y="1038.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.09%)</title><rect x="1110.4" y="1011.0" width="1.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1113.4" y="1022.0"></text>
</g>
<g>
<title>loadConINode::ideal_Opcode() const (1 samples, 0.09%)</title><rect x="1111.5" y="1043.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1114.5" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (28 samples, 2.45%)</title><rect x="1112.5" y="1075.0" width="28.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1115.5" y="1086.0">Ph..</text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (1 samples, 0.09%)</title><rect x="1112.5" y="1059.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1115.5" y="1070.0"></text>
</g>
<g>
<title>MachNode::two_adr() const (1 samples, 0.09%)</title><rect x="1112.5" y="1043.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.5" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (2 samples, 0.18%)</title><rect x="1113.5" y="1059.0" width="2.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1116.5" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (6 samples, 0.53%)</title><rect x="1115.6" y="1059.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1118.6" y="1070.0"></text>
</g>
<g>
<title>jmpDirNode::is_block_proj() const (1 samples, 0.09%)</title><rect x="1119.7" y="1043.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1122.7" y="1054.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1119.7" y="1027.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1122.7" y="1038.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1119.7" y="1011.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1122.7" y="1022.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1119.7" y="995.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1122.7" y="1006.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.09%)</title><rect x="1120.8" y="1043.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1123.8" y="1054.0"></text>
</g>
<g>
<title>update_get_addr (1 samples, 0.09%)</title><rect x="1120.8" y="1027.0" width="1.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1123.8" y="1038.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (5 samples, 0.44%)</title><rect x="1121.8" y="1059.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1124.8" y="1070.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.18%)</title><rect x="1121.8" y="1043.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1124.8" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (1 samples, 0.09%)</title><rect x="1123.9" y="1043.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1126.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (1 samples, 0.09%)</title><rect x="1124.9" y="1043.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1127.9" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1124.9" y="1027.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1127.9" y="1038.0"></text>
</g>
<g>
<title>RegMask::smear_to_sets(int) (1 samples, 0.09%)</title><rect x="1125.9" y="1043.0" width="1.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.9" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.178] (2 samples, 0.18%)</title><rect x="1127.0" y="1059.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1130.0" y="1070.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.179] (2 samples, 0.18%)</title><rect x="1129.0" y="1059.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1132.0" y="1070.0"></text>
</g>
<g>
<title>MachNode::ideal_reg() const (1 samples, 0.09%)</title><rect x="1129.0" y="1043.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1132.0" y="1054.0"></text>
</g>
<g>
<title>RegMask::is_aligned_pairs() const (1 samples, 0.09%)</title><rect x="1130.1" y="1043.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1133.1" y="1054.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (2 samples, 0.18%)</title><rect x="1131.1" y="1059.0" width="2.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1134.1" y="1070.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (1 samples, 0.09%)</title><rect x="1133.2" y="1059.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1136.2" y="1070.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (1 samples, 0.09%)</title><rect x="1133.2" y="1043.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1136.2" y="1054.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) (1 samples, 0.09%)</title><rect x="1133.2" y="1027.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1136.2" y="1038.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (1 samples, 0.09%)</title><rect x="1133.2" y="1011.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1136.2" y="1022.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1133.2" y="995.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1136.2" y="1006.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.18%)</title><rect x="1134.2" y="1059.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1137.2" y="1070.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (1 samples, 0.09%)</title><rect x="1136.3" y="1059.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1139.3" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (2 samples, 0.18%)</title><rect x="1137.3" y="1059.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.3" y="1070.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (2 samples, 0.18%)</title><rect x="1137.3" y="1043.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.3" y="1054.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.09%)</title><rect x="1138.3" y="1027.0" width="1.1" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1141.3" y="1038.0"></text>
</g>
<g>
<title>find_lowest_bit(unsigned int) (1 samples, 0.09%)</title><rect x="1139.4" y="1059.0" width="1.0" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1142.4" y="1070.0"></text>
</g>
<g>
<title>shrL_rReg_immNode::out_RegMask() const (1 samples, 0.09%)</title><rect x="1140.4" y="1059.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.4" y="1070.0"></text>
</g>
<g>
<title>Compile::Optimize() (37 samples, 3.24%)</title><rect x="1141.4" y="1091.0" width="38.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.4" y="1102.0">Com..</text>
</g>
<g>
<title>Compile::final_graph_reshaping() (1 samples, 0.09%)</title><rect x="1141.4" y="1075.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1144.4" y="1086.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.09%)</title><rect x="1141.4" y="1059.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.4" y="1070.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1141.4" y="1043.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1144.4" y="1054.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1141.4" y="1027.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1144.4" y="1038.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1141.4" y="1011.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1144.4" y="1022.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.53%)</title><rect x="1142.5" y="1075.0" width="6.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.5" y="1086.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.53%)</title><rect x="1142.5" y="1059.0" width="6.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.5" y="1070.0"></text>
</g>
<g>
<title>ConnectionGraph::complete_connection_graph(GrowableArray&lt;PointsToNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;JavaObjectNode*&gt;&amp;, GrowableArray&lt;FieldNode*&gt;&amp;) (5 samples, 0.44%)</title><rect x="1142.5" y="1043.0" width="5.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1145.5" y="1054.0"></text>
</g>
<g>
<title>ConnectionGraph::add_field_uses_to_worklist(FieldNode*) (5 samples, 0.44%)</title><rect x="1142.5" y="1027.0" width="5.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.5" y="1038.0"></text>
</g>
<g>
<title>ConnectionGraph::add_fields_to_worklist(FieldNode*, PointsToNode*) (1 samples, 0.09%)</title><rect x="1145.6" y="1011.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1148.6" y="1022.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1145.6" y="995.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1148.6" y="1006.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1145.6" y="979.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1148.6" y="990.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1145.6" y="963.0" width="1.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1148.6" y="974.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1146.6" y="1011.0" width="1.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1149.6" y="1022.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1146.6" y="995.0" width="1.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1149.6" y="1006.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1146.6" y="979.0" width="1.0" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1149.6" y="990.0"></text>
</g>
<g>
<title>ConnectionGraph::split_unique_types(GrowableArray&lt;Node*&gt;&amp;, GrowableArray&lt;ArrayCopyNode*&gt;&amp;) (1 samples, 0.09%)</title><rect x="1147.6" y="1043.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.6" y="1054.0"></text>
</g>
<g>
<title>RethrowNode::Opcode() const (1 samples, 0.09%)</title><rect x="1147.6" y="1027.0" width="1.1" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.6" y="1038.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (1 samples, 0.09%)</title><rect x="1148.7" y="1075.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.7" y="1086.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(bool, bool, bool) (23 samples, 2.01%)</title><rect x="1149.7" y="1075.0" width="23.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.7" y="1086.0">P..</text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.18%)</title><rect x="1149.7" y="1059.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1152.7" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (3 samples, 0.26%)</title><rect x="1151.8" y="1059.0" width="3.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.8" y="1070.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.09%)</title><rect x="1153.8" y="1043.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.8" y="1054.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1153.8" y="1027.0" width="1.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1156.8" y="1038.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1153.8" y="1011.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1156.8" y="1022.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1153.8" y="995.0" width="1.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1156.8" y="1006.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (15 samples, 1.31%)</title><rect x="1154.9" y="1059.0" width="15.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.9" y="1070.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (13 samples, 1.14%)</title><rect x="1156.9" y="1043.0" width="13.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1159.9" y="1054.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (12 samples, 1.05%)</title><rect x="1158.0" y="1027.0" width="12.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.0" y="1038.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (10 samples, 0.88%)</title><rect x="1160.0" y="1011.0" width="10.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1163.0" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (2 samples, 0.18%)</title><rect x="1170.4" y="1059.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1173.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (2 samples, 0.18%)</title><rect x="1170.4" y="1043.0" width="2.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1173.4" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.09%)</title><rect x="1170.4" y="1027.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1173.4" y="1038.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1170.4" y="1011.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1173.4" y="1022.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1171.4" y="1027.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.4" y="1038.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) (1 samples, 0.09%)</title><rect x="1171.4" y="1011.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.4" y="1022.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="995.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.4" y="1006.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="979.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1174.4" y="990.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="963.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1174.4" y="974.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="947.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1174.4" y="958.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="931.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1174.4" y="942.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="915.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.4" y="926.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="899.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.4" y="910.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="883.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1174.4" y="894.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="867.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.4" y="878.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="851.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1174.4" y="862.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="835.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1174.4" y="846.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="819.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1174.4" y="830.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="803.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.4" y="814.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="787.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.4" y="798.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="771.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.4" y="782.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="755.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1174.4" y="766.0"></text>
</g>
<g>
<title>MemNode::all_controls_dominate(Node*, Node*) (1 samples, 0.09%)</title><rect x="1171.4" y="739.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1174.4" y="750.0"></text>
</g>
<g>
<title>Node::dominates(Node*, Node_List&amp;) (1 samples, 0.09%)</title><rect x="1171.4" y="723.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1174.4" y="734.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.09%)</title><rect x="1172.4" y="1059.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1175.4" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (5 samples, 0.44%)</title><rect x="1173.5" y="1075.0" width="5.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1176.5" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (5 samples, 0.44%)</title><rect x="1173.5" y="1059.0" width="5.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1176.5" y="1070.0"></text>
</g>
<g>
<title>LoadBNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1173.5" y="1043.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.5" y="1054.0"></text>
</g>
<g>
<title>MemNode::can_see_stored_value(Node*, PhaseTransform*) const (1 samples, 0.09%)</title><rect x="1173.5" y="1027.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.5" y="1038.0"></text>
</g>
<g>
<title>AllocateNode::Ideal_allocation(Node*, PhaseTransform*, long&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="1011.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1176.5" y="1022.0"></text>
</g>
<g>
<title>AddPNode::Ideal_base_and_offset(Node*, PhaseTransform*, long&amp;) (1 samples, 0.09%)</title><rect x="1173.5" y="995.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1176.5" y="1006.0"></text>
</g>
<g>
<title>PhaseTransform::find_long_type(Node*) (1 samples, 0.09%)</title><rect x="1173.5" y="979.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.5" y="990.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1174.5" y="1043.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.5" y="1054.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1174.5" y="1027.0" width="1.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1177.5" y="1038.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1174.5" y="1011.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1177.5" y="1022.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1174.5" y="995.0" width="1.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1177.5" y="1006.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1175.5" y="1043.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.5" y="1054.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1175.5" y="1027.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1178.5" y="1038.0"></text>
</g>
<g>
<title>TypeAryPtr::hash() const (1 samples, 0.09%)</title><rect x="1175.5" y="1011.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1178.5" y="1022.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.18%)</title><rect x="1176.6" y="1043.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1179.6" y="1054.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.09%)</title><rect x="1177.6" y="1027.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1180.6" y="1038.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (1 samples, 0.09%)</title><rect x="1178.6" y="1075.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1181.6" y="1086.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (1 samples, 0.09%)</title><rect x="1178.6" y="1059.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1181.6" y="1070.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (1 samples, 0.09%)</title><rect x="1178.6" y="1043.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.6" y="1054.0"></text>
</g>
<g>
<title>CallNode::Ideal(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.6" y="1027.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1181.6" y="1038.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.09%)</title><rect x="1178.6" y="1011.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.6" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (7 samples, 0.61%)</title><rect x="1179.7" y="1091.0" width="7.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.7" y="1102.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (7 samples, 0.61%)</title><rect x="1179.7" y="1075.0" width="7.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1182.7" y="1086.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.61%)</title><rect x="1179.7" y="1059.0" width="7.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.7" y="1070.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.61%)</title><rect x="1179.7" y="1043.0" width="7.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.7" y="1054.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.61%)</title><rect x="1179.7" y="1027.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1182.7" y="1038.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.61%)</title><rect x="1179.7" y="1011.0" width="7.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1182.7" y="1022.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (6 samples, 0.53%)</title><rect x="1179.7" y="995.0" width="6.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1182.7" y="1006.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (6 samples, 0.53%)</title><rect x="1179.7" y="979.0" width="6.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.7" y="990.0"></text>
</g>
<g>
<title>Parse::build_exits() (1 samples, 0.09%)</title><rect x="1179.7" y="963.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.7" y="974.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.09%)</title><rect x="1179.7" y="947.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="958.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.09%)</title><rect x="1179.7" y="931.0" width="1.0" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1182.7" y="942.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.09%)</title><rect x="1179.7" y="915.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.7" y="926.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.09%)</title><rect x="1179.7" y="899.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.7" y="910.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.09%)</title><rect x="1179.7" y="883.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.44%)</title><rect x="1180.7" y="963.0" width="5.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1183.7" y="974.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.44%)</title><rect x="1180.7" y="947.0" width="5.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.44%)</title><rect x="1180.7" y="931.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="942.0"></text>
</g>
<g>
<title>Parse::do_call() (5 samples, 0.44%)</title><rect x="1180.7" y="915.0" width="5.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1183.7" y="926.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.44%)</title><rect x="1180.7" y="899.0" width="5.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="910.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.44%)</title><rect x="1180.7" y="883.0" width="5.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1183.7" y="894.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (5 samples, 0.44%)</title><rect x="1180.7" y="867.0" width="5.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1183.7" y="878.0"></text>
</g>
<g>
<title>Parse::do_one_block() (5 samples, 0.44%)</title><rect x="1180.7" y="851.0" width="5.2" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1183.7" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (5 samples, 0.44%)</title><rect x="1180.7" y="835.0" width="5.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="846.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.35%)</title><rect x="1180.7" y="819.0" width="4.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="830.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool, bool) (1 samples, 0.09%)</title><rect x="1180.7" y="803.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="814.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.09%)</title><rect x="1180.7" y="787.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1183.7" y="798.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.09%)</title><rect x="1180.7" y="771.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1183.7" y="782.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.09%)</title><rect x="1180.7" y="755.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.7" y="766.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.09%)</title><rect x="1180.7" y="739.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1183.7" y="750.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1180.7" y="723.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1183.7" y="734.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.09%)</title><rect x="1180.7" y="707.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.7" y="718.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1180.7" y="691.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1183.7" y="702.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.09%)</title><rect x="1180.7" y="675.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.7" y="686.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.09%)</title><rect x="1180.7" y="659.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1183.7" y="670.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1180.7" y="643.0" width="1.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1183.7" y="654.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1180.7" y="627.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.7" y="638.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.09%)</title><rect x="1180.7" y="611.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1183.7" y="622.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1180.7" y="595.0" width="1.0" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1183.7" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.09%)</title><rect x="1180.7" y="579.0" width="1.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1183.7" y="590.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1181.7" y="803.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1181.7" y="787.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1184.7" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1181.7" y="771.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1184.7" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1181.7" y="755.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1184.7" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1181.7" y="739.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.7" y="750.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1182.8" y="803.0" width="2.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1182.8" y="787.0" width="2.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1182.8" y="771.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1182.8" y="755.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1182.8" y="739.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1182.8" y="723.0" width="2.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1185.8" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1182.8" y="707.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1182.8" y="691.0" width="2.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1182.8" y="675.0" width="2.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1185.8" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1182.8" y="659.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1182.8" y="643.0" width="2.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1182.8" y="627.0" width="2.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1182.8" y="611.0" width="2.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.18%)</title><rect x="1182.8" y="595.0" width="2.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1185.8" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.18%)</title><rect x="1182.8" y="579.0" width="2.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.18%)</title><rect x="1182.8" y="563.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.18%)</title><rect x="1182.8" y="547.0" width="2.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.18%)</title><rect x="1182.8" y="531.0" width="2.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.18%)</title><rect x="1182.8" y="515.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1185.8" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="499.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.8" y="483.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.8" y="467.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.8" y="451.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.8" y="435.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="446.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.8" y="419.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.8" y="430.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="403.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1185.8" y="414.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.8" y="387.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1185.8" y="398.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.8" y="371.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.8" y="355.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.8" y="366.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.8" y="339.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="350.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.8" y="323.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1185.8" y="334.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="307.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1185.8" y="318.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.8" y="291.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.8" y="302.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.8" y="275.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1185.8" y="286.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.8" y="259.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="270.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.8" y="243.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="254.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1182.8" y="227.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.8" y="238.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1182.8" y="211.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="222.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1182.8" y="195.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1185.8" y="206.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1182.8" y="179.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1185.8" y="190.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1182.8" y="163.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1185.8" y="174.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1182.8" y="147.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="158.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.09%)</title><rect x="1182.8" y="131.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="142.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const**) (1 samples, 0.09%)</title><rect x="1182.8" y="115.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="126.0"></text>
</g>
<g>
<title>GraphKit::array_element_address(Node*, Node*, BasicType, TypeInt const*, Node*) (1 samples, 0.09%)</title><rect x="1182.8" y="99.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1185.8" y="110.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1182.8" y="83.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1185.8" y="94.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.09%)</title><rect x="1182.8" y="67.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1185.8" y="78.0"></text>
</g>
<g>
<title>NodeHash::grow() (1 samples, 0.09%)</title><rect x="1182.8" y="51.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1185.8" y="62.0"></text>
</g>
<g>
<title>AddPNode::Opcode() const (1 samples, 0.09%)</title><rect x="1182.8" y="35.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1185.8" y="46.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.09%)</title><rect x="1183.8" y="499.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1186.8" y="510.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.09%)</title><rect x="1183.8" y="483.0" width="1.0" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1186.8" y="494.0"></text>
</g>
<g>
<title>ciObjectFactory::get_unloaded_klass(ciKlass*, ciSymbol*, bool) (1 samples, 0.09%)</title><rect x="1183.8" y="467.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1186.8" y="478.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1184.8" y="819.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.8" y="830.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1184.8" y="803.0" width="1.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1187.8" y="814.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.09%)</title><rect x="1184.8" y="787.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.8" y="798.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.09%)</title><rect x="1184.8" y="771.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.8" y="782.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.09%)</title><rect x="1184.8" y="755.0" width="1.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1187.8" y="766.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.09%)</title><rect x="1184.8" y="739.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1187.8" y="750.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.09%)</title><rect x="1184.8" y="723.0" width="1.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1187.8" y="734.0"></text>
</g>
<g>
<title>Node::Node(Node*) (1 samples, 0.09%)</title><rect x="1184.8" y="707.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1187.8" y="718.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.09%)</title><rect x="1184.8" y="691.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1187.8" y="702.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.09%)</title><rect x="1184.8" y="675.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1187.8" y="686.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.09%)</title><rect x="1184.8" y="659.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1187.8" y="670.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.09%)</title><rect x="1184.8" y="643.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1187.8" y="654.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.09%)</title><rect x="1184.8" y="627.0" width="1.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1187.8" y="638.0"></text>
</g>
<g>
<title>handle_pte_fault (1 samples, 0.09%)</title><rect x="1184.8" y="611.0" width="1.1" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1187.8" y="622.0"></text>
</g>
<g>
<title>alloc_pages_vma (1 samples, 0.09%)</title><rect x="1184.8" y="595.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1187.8" y="606.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (1 samples, 0.09%)</title><rect x="1184.8" y="579.0" width="1.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1187.8" y="590.0"></text>
</g>
<g>
<title>clear_page_rep (1 samples, 0.09%)</title><rect x="1184.8" y="563.0" width="1.1" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1187.8" y="574.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1185.9" y="995.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.9" y="1006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1185.9" y="979.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.9" y="990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1185.9" y="963.0" width="1.0" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1188.9" y="974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1185.9" y="947.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.9" y="958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1185.9" y="931.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.9" y="942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1185.9" y="915.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.9" y="926.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1185.9" y="899.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.9" y="910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1185.9" y="883.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.9" y="894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1185.9" y="867.0" width="1.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1188.9" y="878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1185.9" y="851.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.9" y="862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1185.9" y="835.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1188.9" y="846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1185.9" y="819.0" width="1.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.9" y="830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1185.9" y="803.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1188.9" y="814.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1185.9" y="787.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1188.9" y="798.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1185.9" y="771.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.9" y="782.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1185.9" y="755.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1185.9" y="739.0" width="1.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1188.9" y="750.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1185.9" y="723.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.9" y="734.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1185.9" y="707.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.9" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1185.9" y="691.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1185.9" y="675.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1185.9" y="659.0" width="1.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1188.9" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1185.9" y="643.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1188.9" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1185.9" y="627.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1185.9" y="611.0" width="1.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1188.9" y="622.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1185.9" y="595.0" width="1.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1188.9" y="606.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1185.9" y="579.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.9" y="590.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1185.9" y="563.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.9" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1185.9" y="547.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="558.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1185.9" y="531.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.9" y="542.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.09%)</title><rect x="1185.9" y="515.0" width="1.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.9" y="526.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.09%)</title><rect x="1185.9" y="499.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.9" y="510.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.09%)</title><rect x="1185.9" y="483.0" width="1.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.9" y="494.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.09%)</title><rect x="1185.9" y="467.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.9" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.09%)</title><rect x="1185.9" y="451.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1188.9" y="462.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.09%)</title><rect x="1185.9" y="435.0" width="1.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.9" y="446.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.09%)</title><rect x="1185.9" y="419.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="430.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.09%)</title><rect x="1185.9" y="403.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1188.9" y="414.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.09%)</title><rect x="1185.9" y="387.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1188.9" y="398.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.09%)</title><rect x="1185.9" y="371.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="382.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.09%)</title><rect x="1185.9" y="355.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1188.9" y="366.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.09%)</title><rect x="1185.9" y="339.0" width="1.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.9" y="350.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool) (1 samples, 0.09%)</title><rect x="1185.9" y="323.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.9" y="334.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool) (1 samples, 0.09%)</title><rect x="1185.9" y="307.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.9" y="318.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.09%)</title><rect x="1185.9" y="291.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="302.0"></text>
</g>
<g>
<title>LoadNode::Identity(PhaseGVN*) (1 samples, 0.09%)</title><rect x="1185.9" y="275.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.9" y="286.0"></text>
</g>
<g>
<title>LoadNode::is_instance_field_load_with_local_phi(Node*) (1 samples, 0.09%)</title><rect x="1185.9" y="259.0" width="1.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1188.9" y="270.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.09%)</title><rect x="1186.9" y="1091.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.9" y="1102.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.09%)</title><rect x="1186.9" y="1075.0" width="1.0" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.9" y="1086.0"></text>
</g>
<g>
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="1186.9" y="1059.0" width="1.0" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1189.9" y="1070.0"></text>
</g>
<g>
<title>prepare_exit_to_usermode (1 samples, 0.09%)</title><rect x="1186.9" y="1043.0" width="1.0" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1189.9" y="1054.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (1 samples, 0.09%)</title><rect x="1186.9" y="1027.0" width="1.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1189.9" y="1038.0"></text>
</g>
<g>
<title>CompileBroker::post_compile(CompilerThread*, CompileTask*, bool, ciEnv*, int, char const*) (1 samples, 0.09%)</title><rect x="1187.9" y="1123.0" width="1.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1190.9" y="1134.0"></text>
</g>
<g>
<title>Monitor::unlock() (1 samples, 0.09%)</title><rect x="1187.9" y="1107.0" width="1.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1190.9" y="1118.0"></text>
</g>
<g>
<title>WatcherThread::run() (1 samples, 0.09%)</title><rect x="1189.0" y="1187.0" width="1.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.0" y="1198.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (1 samples, 0.09%)</title><rect x="1189.0" y="1171.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.0" y="1182.0"></text>
</g>
</g>
</svg>
